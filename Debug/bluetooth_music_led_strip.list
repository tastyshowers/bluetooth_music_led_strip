
bluetooth_music_led_strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007030  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  00009014  2**0
                  CONTENTS
  4 .ARM          00000000  08007248  08007248  00009014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007248  08007248  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800724c  0800724c  0000824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007250  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000014  08007264  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08007264  0000977c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103de  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  0001941a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac7  00000000  00000000  0001c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141b8  00000000  00000000  0001cfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef2  00000000  00000000  0003115f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f9b7  00000000  00000000  00042051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000c1a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c4df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080070d8 	.word	0x080070d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080070d8 	.word	0x080070d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb55 	bl	8000aac <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fad5 	bl	80009bc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb47 	bl	8000aac <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb3d 	bl	8000aac <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fae3 	bl	8000a0c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fad9 	bl	8000a0c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	46ce      	mov	lr, r9
 800046c:	4647      	mov	r7, r8
 800046e:	0243      	lsls	r3, r0, #9
 8000470:	0a5a      	lsrs	r2, r3, #9
 8000472:	024e      	lsls	r6, r1, #9
 8000474:	0045      	lsls	r5, r0, #1
 8000476:	0fc4      	lsrs	r4, r0, #31
 8000478:	0048      	lsls	r0, r1, #1
 800047a:	4691      	mov	r9, r2
 800047c:	0e2d      	lsrs	r5, r5, #24
 800047e:	0a72      	lsrs	r2, r6, #9
 8000480:	0e00      	lsrs	r0, r0, #24
 8000482:	4694      	mov	ip, r2
 8000484:	b580      	push	{r7, lr}
 8000486:	099b      	lsrs	r3, r3, #6
 8000488:	0fc9      	lsrs	r1, r1, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1a2a      	subs	r2, r5, r0
 800048e:	428c      	cmp	r4, r1
 8000490:	d021      	beq.n	80004d6 <__aeabi_fadd+0x6e>
 8000492:	2a00      	cmp	r2, #0
 8000494:	dd0d      	ble.n	80004b2 <__aeabi_fadd+0x4a>
 8000496:	2800      	cmp	r0, #0
 8000498:	d12d      	bne.n	80004f6 <__aeabi_fadd+0x8e>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x38>
 800049e:	e08d      	b.n	80005bc <__aeabi_fadd+0x154>
 80004a0:	1e51      	subs	r1, r2, #1
 80004a2:	2a01      	cmp	r2, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x40>
 80004a6:	e11d      	b.n	80006e4 <__aeabi_fadd+0x27c>
 80004a8:	2aff      	cmp	r2, #255	@ 0xff
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x46>
 80004ac:	e0ab      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004ae:	000a      	movs	r2, r1
 80004b0:	e027      	b.n	8000502 <__aeabi_fadd+0x9a>
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	d04d      	beq.n	8000552 <__aeabi_fadd+0xea>
 80004b6:	1b42      	subs	r2, r0, r5
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d000      	beq.n	80004be <__aeabi_fadd+0x56>
 80004bc:	e0cc      	b.n	8000658 <__aeabi_fadd+0x1f0>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0x5c>
 80004c2:	e079      	b.n	80005b8 <__aeabi_fadd+0x150>
 80004c4:	1e54      	subs	r4, r2, #1
 80004c6:	2a01      	cmp	r2, #1
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x64>
 80004ca:	e128      	b.n	800071e <__aeabi_fadd+0x2b6>
 80004cc:	2aff      	cmp	r2, #255	@ 0xff
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x6a>
 80004d0:	e097      	b.n	8000602 <__aeabi_fadd+0x19a>
 80004d2:	0022      	movs	r2, r4
 80004d4:	e0c5      	b.n	8000662 <__aeabi_fadd+0x1fa>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	dc00      	bgt.n	80004dc <__aeabi_fadd+0x74>
 80004da:	e096      	b.n	800060a <__aeabi_fadd+0x1a2>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d04f      	beq.n	8000580 <__aeabi_fadd+0x118>
 80004e0:	2dff      	cmp	r5, #255	@ 0xff
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x7e>
 80004e4:	e08f      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	04c9      	lsls	r1, r1, #19
 80004ea:	430e      	orrs	r6, r1
 80004ec:	2a1b      	cmp	r2, #27
 80004ee:	dd51      	ble.n	8000594 <__aeabi_fadd+0x12c>
 80004f0:	002a      	movs	r2, r5
 80004f2:	3301      	adds	r3, #1
 80004f4:	e018      	b.n	8000528 <__aeabi_fadd+0xc0>
 80004f6:	2dff      	cmp	r5, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e084      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004fc:	2180      	movs	r1, #128	@ 0x80
 80004fe:	04c9      	lsls	r1, r1, #19
 8000500:	430e      	orrs	r6, r1
 8000502:	2101      	movs	r1, #1
 8000504:	2a1b      	cmp	r2, #27
 8000506:	dc08      	bgt.n	800051a <__aeabi_fadd+0xb2>
 8000508:	0031      	movs	r1, r6
 800050a:	2020      	movs	r0, #32
 800050c:	40d1      	lsrs	r1, r2
 800050e:	1a82      	subs	r2, r0, r2
 8000510:	4096      	lsls	r6, r2
 8000512:	0032      	movs	r2, r6
 8000514:	1e50      	subs	r0, r2, #1
 8000516:	4182      	sbcs	r2, r0
 8000518:	4311      	orrs	r1, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	d459      	bmi.n	80005d4 <__aeabi_fadd+0x16c>
 8000520:	2107      	movs	r1, #7
 8000522:	002a      	movs	r2, r5
 8000524:	4019      	ands	r1, r3
 8000526:	d049      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000528:	210f      	movs	r1, #15
 800052a:	4019      	ands	r1, r3
 800052c:	2904      	cmp	r1, #4
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0xca>
 8000530:	3304      	adds	r3, #4
 8000532:	0159      	lsls	r1, r3, #5
 8000534:	d542      	bpl.n	80005bc <__aeabi_fadd+0x154>
 8000536:	1c50      	adds	r0, r2, #1
 8000538:	2afe      	cmp	r2, #254	@ 0xfe
 800053a:	d03a      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	b2c0      	uxtb	r0, r0
 8000540:	0a5b      	lsrs	r3, r3, #9
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	4318      	orrs	r0, r3
 8000546:	07e4      	lsls	r4, r4, #31
 8000548:	4320      	orrs	r0, r4
 800054a:	bcc0      	pop	{r6, r7}
 800054c:	46b9      	mov	r9, r7
 800054e:	46b0      	mov	r8, r6
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000552:	20fe      	movs	r0, #254	@ 0xfe
 8000554:	4680      	mov	r8, r0
 8000556:	1c6f      	adds	r7, r5, #1
 8000558:	0038      	movs	r0, r7
 800055a:	4647      	mov	r7, r8
 800055c:	4207      	tst	r7, r0
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xfa>
 8000560:	e08e      	b.n	8000680 <__aeabi_fadd+0x218>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x100>
 8000566:	e0b4      	b.n	80006d2 <__aeabi_fadd+0x26a>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x106>
 800056c:	e0db      	b.n	8000726 <__aeabi_fadd+0x2be>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d06c      	beq.n	800064c <__aeabi_fadd+0x1e4>
 8000572:	1b98      	subs	r0, r3, r6
 8000574:	0145      	lsls	r5, r0, #5
 8000576:	d400      	bmi.n	800057a <__aeabi_fadd+0x112>
 8000578:	e0f7      	b.n	800076a <__aeabi_fadd+0x302>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	e03d      	b.n	80005fc <__aeabi_fadd+0x194>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d01b      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000584:	1e51      	subs	r1, r2, #1
 8000586:	2a01      	cmp	r2, #1
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x124>
 800058a:	e082      	b.n	8000692 <__aeabi_fadd+0x22a>
 800058c:	2aff      	cmp	r2, #255	@ 0xff
 800058e:	d03a      	beq.n	8000606 <__aeabi_fadd+0x19e>
 8000590:	000a      	movs	r2, r1
 8000592:	e7ab      	b.n	80004ec <__aeabi_fadd+0x84>
 8000594:	0031      	movs	r1, r6
 8000596:	2020      	movs	r0, #32
 8000598:	40d1      	lsrs	r1, r2
 800059a:	1a82      	subs	r2, r0, r2
 800059c:	4096      	lsls	r6, r2
 800059e:	0032      	movs	r2, r6
 80005a0:	1e50      	subs	r0, r2, #1
 80005a2:	4182      	sbcs	r2, r0
 80005a4:	430a      	orrs	r2, r1
 80005a6:	189b      	adds	r3, r3, r2
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	d5b9      	bpl.n	8000520 <__aeabi_fadd+0xb8>
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	2dfe      	cmp	r5, #254	@ 0xfe
 80005b0:	d175      	bne.n	800069e <__aeabi_fadd+0x236>
 80005b2:	20ff      	movs	r0, #255	@ 0xff
 80005b4:	2300      	movs	r3, #0
 80005b6:	e7c4      	b.n	8000542 <__aeabi_fadd+0xda>
 80005b8:	000c      	movs	r4, r1
 80005ba:	0033      	movs	r3, r6
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	2aff      	cmp	r2, #255	@ 0xff
 80005c0:	d146      	bne.n	8000650 <__aeabi_fadd+0x1e8>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f5      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	03d2      	lsls	r2, r2, #15
 80005ca:	4313      	orrs	r3, r2
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	20ff      	movs	r0, #255	@ 0xff
 80005d0:	0a5b      	lsrs	r3, r3, #9
 80005d2:	e7b6      	b.n	8000542 <__aeabi_fadd+0xda>
 80005d4:	019f      	lsls	r7, r3, #6
 80005d6:	09bf      	lsrs	r7, r7, #6
 80005d8:	0038      	movs	r0, r7
 80005da:	f001 fa33 	bl	8001a44 <__clzsi2>
 80005de:	3805      	subs	r0, #5
 80005e0:	4087      	lsls	r7, r0
 80005e2:	4285      	cmp	r5, r0
 80005e4:	dc24      	bgt.n	8000630 <__aeabi_fadd+0x1c8>
 80005e6:	003b      	movs	r3, r7
 80005e8:	2120      	movs	r1, #32
 80005ea:	1b42      	subs	r2, r0, r5
 80005ec:	3201      	adds	r2, #1
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	1a8a      	subs	r2, r1, r2
 80005f2:	4097      	lsls	r7, r2
 80005f4:	1e7a      	subs	r2, r7, #1
 80005f6:	4197      	sbcs	r7, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	433b      	orrs	r3, r7
 80005fc:	0759      	lsls	r1, r3, #29
 80005fe:	d193      	bne.n	8000528 <__aeabi_fadd+0xc0>
 8000600:	e797      	b.n	8000532 <__aeabi_fadd+0xca>
 8000602:	000c      	movs	r4, r1
 8000604:	0033      	movs	r3, r6
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	e7db      	b.n	80005c2 <__aeabi_fadd+0x15a>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d014      	beq.n	8000638 <__aeabi_fadd+0x1d0>
 800060e:	1b42      	subs	r2, r0, r5
 8000610:	2d00      	cmp	r5, #0
 8000612:	d14b      	bne.n	80006ac <__aeabi_fadd+0x244>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d0      	beq.n	80005ba <__aeabi_fadd+0x152>
 8000618:	1e51      	subs	r1, r2, #1
 800061a:	2a01      	cmp	r2, #1
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x1b8>
 800061e:	e09e      	b.n	800075e <__aeabi_fadd+0x2f6>
 8000620:	2aff      	cmp	r2, #255	@ 0xff
 8000622:	d0ef      	beq.n	8000604 <__aeabi_fadd+0x19c>
 8000624:	000a      	movs	r2, r1
 8000626:	2a1b      	cmp	r2, #27
 8000628:	dd5f      	ble.n	80006ea <__aeabi_fadd+0x282>
 800062a:	0002      	movs	r2, r0
 800062c:	1c73      	adds	r3, r6, #1
 800062e:	e77b      	b.n	8000528 <__aeabi_fadd+0xc0>
 8000630:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000632:	1a2a      	subs	r2, r5, r0
 8000634:	403b      	ands	r3, r7
 8000636:	e7e1      	b.n	80005fc <__aeabi_fadd+0x194>
 8000638:	21fe      	movs	r1, #254	@ 0xfe
 800063a:	1c6a      	adds	r2, r5, #1
 800063c:	4211      	tst	r1, r2
 800063e:	d13b      	bne.n	80006b8 <__aeabi_fadd+0x250>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d15d      	bne.n	8000700 <__aeabi_fadd+0x298>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d07f      	beq.n	8000748 <__aeabi_fadd+0x2e0>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d17f      	bne.n	800074c <__aeabi_fadd+0x2e4>
 800064c:	2200      	movs	r2, #0
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	b2d0      	uxtb	r0, r2
 8000656:	e774      	b.n	8000542 <__aeabi_fadd+0xda>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d0d2      	beq.n	8000602 <__aeabi_fadd+0x19a>
 800065c:	2480      	movs	r4, #128	@ 0x80
 800065e:	04e4      	lsls	r4, r4, #19
 8000660:	4323      	orrs	r3, r4
 8000662:	2401      	movs	r4, #1
 8000664:	2a1b      	cmp	r2, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x210>
 8000668:	001c      	movs	r4, r3
 800066a:	2520      	movs	r5, #32
 800066c:	40d4      	lsrs	r4, r2
 800066e:	1aaa      	subs	r2, r5, r2
 8000670:	4093      	lsls	r3, r2
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	4193      	sbcs	r3, r2
 8000676:	431c      	orrs	r4, r3
 8000678:	1b33      	subs	r3, r6, r4
 800067a:	0005      	movs	r5, r0
 800067c:	000c      	movs	r4, r1
 800067e:	e74d      	b.n	800051c <__aeabi_fadd+0xb4>
 8000680:	1b9f      	subs	r7, r3, r6
 8000682:	017a      	lsls	r2, r7, #5
 8000684:	d422      	bmi.n	80006cc <__aeabi_fadd+0x264>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d1a6      	bne.n	80005d8 <__aeabi_fadd+0x170>
 800068a:	2400      	movs	r4, #0
 800068c:	2000      	movs	r0, #0
 800068e:	2300      	movs	r3, #0
 8000690:	e757      	b.n	8000542 <__aeabi_fadd+0xda>
 8000692:	199b      	adds	r3, r3, r6
 8000694:	2501      	movs	r5, #1
 8000696:	3201      	adds	r2, #1
 8000698:	0159      	lsls	r1, r3, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x236>
 800069c:	e740      	b.n	8000520 <__aeabi_fadd+0xb8>
 800069e:	2101      	movs	r1, #1
 80006a0:	4835      	ldr	r0, [pc, #212]	@ (8000778 <__aeabi_fadd+0x310>)
 80006a2:	4019      	ands	r1, r3
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4003      	ands	r3, r0
 80006a8:	430b      	orrs	r3, r1
 80006aa:	e7a7      	b.n	80005fc <__aeabi_fadd+0x194>
 80006ac:	28ff      	cmp	r0, #255	@ 0xff
 80006ae:	d0a9      	beq.n	8000604 <__aeabi_fadd+0x19c>
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	04c9      	lsls	r1, r1, #19
 80006b4:	430b      	orrs	r3, r1
 80006b6:	e7b6      	b.n	8000626 <__aeabi_fadd+0x1be>
 80006b8:	2aff      	cmp	r2, #255	@ 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x256>
 80006bc:	e779      	b.n	80005b2 <__aeabi_fadd+0x14a>
 80006be:	199b      	adds	r3, r3, r6
 80006c0:	085b      	lsrs	r3, r3, #1
 80006c2:	0759      	lsls	r1, r3, #29
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fadd+0x260>
 80006c6:	e72f      	b.n	8000528 <__aeabi_fadd+0xc0>
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	e7c1      	b.n	8000650 <__aeabi_fadd+0x1e8>
 80006cc:	000c      	movs	r4, r1
 80006ce:	1af7      	subs	r7, r6, r3
 80006d0:	e782      	b.n	80005d8 <__aeabi_fadd+0x170>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d12c      	bne.n	8000730 <__aeabi_fadd+0x2c8>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d193      	bne.n	8000602 <__aeabi_fadd+0x19a>
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	2400      	movs	r4, #0
 80006de:	20ff      	movs	r0, #255	@ 0xff
 80006e0:	03db      	lsls	r3, r3, #15
 80006e2:	e72e      	b.n	8000542 <__aeabi_fadd+0xda>
 80006e4:	2501      	movs	r5, #1
 80006e6:	1b9b      	subs	r3, r3, r6
 80006e8:	e718      	b.n	800051c <__aeabi_fadd+0xb4>
 80006ea:	0019      	movs	r1, r3
 80006ec:	2520      	movs	r5, #32
 80006ee:	40d1      	lsrs	r1, r2
 80006f0:	1aaa      	subs	r2, r5, r2
 80006f2:	4093      	lsls	r3, r2
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	430b      	orrs	r3, r1
 80006fa:	0005      	movs	r5, r0
 80006fc:	199b      	adds	r3, r3, r6
 80006fe:	e753      	b.n	80005a8 <__aeabi_fadd+0x140>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e77e      	b.n	8000604 <__aeabi_fadd+0x19c>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x2a4>
 800070a:	e77c      	b.n	8000606 <__aeabi_fadd+0x19e>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	03d2      	lsls	r2, r2, #15
 8000710:	4591      	cmp	r9, r2
 8000712:	d302      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 8000714:	4594      	cmp	ip, r2
 8000716:	d200      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000718:	0033      	movs	r3, r6
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	e753      	b.n	80005c6 <__aeabi_fadd+0x15e>
 800071e:	000c      	movs	r4, r1
 8000720:	1af3      	subs	r3, r6, r3
 8000722:	3501      	adds	r5, #1
 8000724:	e6fa      	b.n	800051c <__aeabi_fadd+0xb4>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0af      	beq.n	800068a <__aeabi_fadd+0x222>
 800072a:	000c      	movs	r4, r1
 800072c:	0033      	movs	r3, r6
 800072e:	e78d      	b.n	800064c <__aeabi_fadd+0x1e4>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2ce>
 8000734:	e767      	b.n	8000606 <__aeabi_fadd+0x19e>
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	4591      	cmp	r9, r2
 800073c:	d3ed      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 800073e:	4594      	cmp	ip, r2
 8000740:	d2eb      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000742:	000c      	movs	r4, r1
 8000744:	0033      	movs	r3, r6
 8000746:	e7e8      	b.n	800071a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	e77f      	b.n	800064c <__aeabi_fadd+0x1e4>
 800074c:	199b      	adds	r3, r3, r6
 800074e:	2200      	movs	r2, #0
 8000750:	0159      	lsls	r1, r3, #5
 8000752:	d5b9      	bpl.n	80006c8 <__aeabi_fadd+0x260>
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000756:	4013      	ands	r3, r2
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	2201      	movs	r2, #1
 800075c:	e778      	b.n	8000650 <__aeabi_fadd+0x1e8>
 800075e:	199b      	adds	r3, r3, r6
 8000760:	3201      	adds	r2, #1
 8000762:	3501      	adds	r5, #1
 8000764:	0159      	lsls	r1, r3, #5
 8000766:	d49a      	bmi.n	800069e <__aeabi_fadd+0x236>
 8000768:	e6da      	b.n	8000520 <__aeabi_fadd+0xb8>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d08d      	beq.n	800068a <__aeabi_fadd+0x222>
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e76e      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	fbffffff 	.word	0xfbffffff
 8000778:	7dffffff 	.word	0x7dffffff

0800077c <__aeabi_fdiv>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	464f      	mov	r7, r9
 8000780:	4646      	mov	r6, r8
 8000782:	46d6      	mov	lr, sl
 8000784:	0244      	lsls	r4, r0, #9
 8000786:	b5c0      	push	{r6, r7, lr}
 8000788:	0047      	lsls	r7, r0, #1
 800078a:	1c0e      	adds	r6, r1, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	0e3f      	lsrs	r7, r7, #24
 8000790:	0fc5      	lsrs	r5, r0, #31
 8000792:	2f00      	cmp	r7, #0
 8000794:	d03c      	beq.n	8000810 <__aeabi_fdiv+0x94>
 8000796:	2fff      	cmp	r7, #255	@ 0xff
 8000798:	d042      	beq.n	8000820 <__aeabi_fdiv+0xa4>
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	4699      	mov	r9, r3
 80007a0:	469a      	mov	sl, r3
 80007a2:	00e4      	lsls	r4, r4, #3
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4314      	orrs	r4, r2
 80007a8:	3f7f      	subs	r7, #127	@ 0x7f
 80007aa:	0273      	lsls	r3, r6, #9
 80007ac:	0a5b      	lsrs	r3, r3, #9
 80007ae:	4698      	mov	r8, r3
 80007b0:	0073      	lsls	r3, r6, #1
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	0ff6      	lsrs	r6, r6, #31
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01b      	beq.n	80007f2 <__aeabi_fdiv+0x76>
 80007ba:	2bff      	cmp	r3, #255	@ 0xff
 80007bc:	d013      	beq.n	80007e6 <__aeabi_fdiv+0x6a>
 80007be:	4642      	mov	r2, r8
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	00d2      	lsls	r2, r2, #3
 80007c4:	04c9      	lsls	r1, r1, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	4688      	mov	r8, r1
 80007ca:	2000      	movs	r0, #0
 80007cc:	3b7f      	subs	r3, #127	@ 0x7f
 80007ce:	0029      	movs	r1, r5
 80007d0:	1aff      	subs	r7, r7, r3
 80007d2:	464b      	mov	r3, r9
 80007d4:	4071      	eors	r1, r6
 80007d6:	b2c9      	uxtb	r1, r1
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d900      	bls.n	80007de <__aeabi_fdiv+0x62>
 80007dc:	e0b5      	b.n	800094a <__aeabi_fdiv+0x1ce>
 80007de:	4a74      	ldr	r2, [pc, #464]	@ (80009b0 <__aeabi_fdiv+0x234>)
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	469f      	mov	pc, r3
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d13f      	bne.n	800086c <__aeabi_fdiv+0xf0>
 80007ec:	3fff      	subs	r7, #255	@ 0xff
 80007ee:	3302      	adds	r3, #2
 80007f0:	e003      	b.n	80007fa <__aeabi_fdiv+0x7e>
 80007f2:	4643      	mov	r3, r8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12d      	bne.n	8000854 <__aeabi_fdiv+0xd8>
 80007f8:	2301      	movs	r3, #1
 80007fa:	0029      	movs	r1, r5
 80007fc:	464a      	mov	r2, r9
 80007fe:	4071      	eors	r1, r6
 8000800:	b2c9      	uxtb	r1, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	2a0e      	cmp	r2, #14
 8000806:	d838      	bhi.n	800087a <__aeabi_fdiv+0xfe>
 8000808:	486a      	ldr	r0, [pc, #424]	@ (80009b4 <__aeabi_fdiv+0x238>)
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	5882      	ldr	r2, [r0, r2]
 800080e:	4697      	mov	pc, r2
 8000810:	2c00      	cmp	r4, #0
 8000812:	d113      	bne.n	800083c <__aeabi_fdiv+0xc0>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2700      	movs	r7, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e7c4      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d105      	bne.n	8000830 <__aeabi_fdiv+0xb4>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	27ff      	movs	r7, #255	@ 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e7bc      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000830:	230c      	movs	r3, #12
 8000832:	4699      	mov	r9, r3
 8000834:	3b09      	subs	r3, #9
 8000836:	27ff      	movs	r7, #255	@ 0xff
 8000838:	469a      	mov	sl, r3
 800083a:	e7b6      	b.n	80007aa <__aeabi_fdiv+0x2e>
 800083c:	0020      	movs	r0, r4
 800083e:	f001 f901 	bl	8001a44 <__clzsi2>
 8000842:	2776      	movs	r7, #118	@ 0x76
 8000844:	1f43      	subs	r3, r0, #5
 8000846:	409c      	lsls	r4, r3
 8000848:	2300      	movs	r3, #0
 800084a:	427f      	negs	r7, r7
 800084c:	4699      	mov	r9, r3
 800084e:	469a      	mov	sl, r3
 8000850:	1a3f      	subs	r7, r7, r0
 8000852:	e7aa      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000854:	4640      	mov	r0, r8
 8000856:	f001 f8f5 	bl	8001a44 <__clzsi2>
 800085a:	4642      	mov	r2, r8
 800085c:	1f43      	subs	r3, r0, #5
 800085e:	409a      	lsls	r2, r3
 8000860:	2376      	movs	r3, #118	@ 0x76
 8000862:	425b      	negs	r3, r3
 8000864:	1a1b      	subs	r3, r3, r0
 8000866:	4690      	mov	r8, r2
 8000868:	2000      	movs	r0, #0
 800086a:	e7b0      	b.n	80007ce <__aeabi_fdiv+0x52>
 800086c:	2303      	movs	r3, #3
 800086e:	464a      	mov	r2, r9
 8000870:	431a      	orrs	r2, r3
 8000872:	4691      	mov	r9, r2
 8000874:	2003      	movs	r0, #3
 8000876:	33fc      	adds	r3, #252	@ 0xfc
 8000878:	e7a9      	b.n	80007ce <__aeabi_fdiv+0x52>
 800087a:	000d      	movs	r5, r1
 800087c:	20ff      	movs	r0, #255	@ 0xff
 800087e:	2200      	movs	r2, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	07ed      	lsls	r5, r5, #31
 8000884:	4310      	orrs	r0, r2
 8000886:	4328      	orrs	r0, r5
 8000888:	bce0      	pop	{r5, r6, r7}
 800088a:	46ba      	mov	sl, r7
 800088c:	46b1      	mov	r9, r6
 800088e:	46a8      	mov	r8, r5
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	000d      	movs	r5, r1
 8000894:	2000      	movs	r0, #0
 8000896:	2200      	movs	r2, #0
 8000898:	e7f2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800089a:	4653      	mov	r3, sl
 800089c:	2b02      	cmp	r3, #2
 800089e:	d0ed      	beq.n	800087c <__aeabi_fdiv+0x100>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d033      	beq.n	800090c <__aeabi_fdiv+0x190>
 80008a4:	46a0      	mov	r8, r4
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d105      	bne.n	80008b6 <__aeabi_fdiv+0x13a>
 80008aa:	2000      	movs	r0, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	e7e7      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008b0:	0035      	movs	r5, r6
 80008b2:	2803      	cmp	r0, #3
 80008b4:	d07a      	beq.n	80009ac <__aeabi_fdiv+0x230>
 80008b6:	003b      	movs	r3, r7
 80008b8:	337f      	adds	r3, #127	@ 0x7f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd2d      	ble.n	800091a <__aeabi_fdiv+0x19e>
 80008be:	4642      	mov	r2, r8
 80008c0:	0752      	lsls	r2, r2, #29
 80008c2:	d007      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008c4:	220f      	movs	r2, #15
 80008c6:	4641      	mov	r1, r8
 80008c8:	400a      	ands	r2, r1
 80008ca:	2a04      	cmp	r2, #4
 80008cc:	d002      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008ce:	2204      	movs	r2, #4
 80008d0:	4694      	mov	ip, r2
 80008d2:	44e0      	add	r8, ip
 80008d4:	4642      	mov	r2, r8
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	d505      	bpl.n	80008e6 <__aeabi_fdiv+0x16a>
 80008da:	4642      	mov	r2, r8
 80008dc:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <__aeabi_fdiv+0x23c>)
 80008de:	401a      	ands	r2, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	4690      	mov	r8, r2
 80008e4:	3380      	adds	r3, #128	@ 0x80
 80008e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008e8:	dcc8      	bgt.n	800087c <__aeabi_fdiv+0x100>
 80008ea:	4642      	mov	r2, r8
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	0a52      	lsrs	r2, r2, #9
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	e7c5      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	2500      	movs	r5, #0
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	03d2      	lsls	r2, r2, #15
 80008fc:	e7c0      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4214      	tst	r4, r2
 8000904:	d002      	beq.n	800090c <__aeabi_fdiv+0x190>
 8000906:	4643      	mov	r3, r8
 8000908:	4213      	tst	r3, r2
 800090a:	d049      	beq.n	80009a0 <__aeabi_fdiv+0x224>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	4322      	orrs	r2, r4
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e7b2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800091a:	2201      	movs	r2, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b1b      	cmp	r3, #27
 8000920:	dcc3      	bgt.n	80008aa <__aeabi_fdiv+0x12e>
 8000922:	4642      	mov	r2, r8
 8000924:	40da      	lsrs	r2, r3
 8000926:	4643      	mov	r3, r8
 8000928:	379e      	adds	r7, #158	@ 0x9e
 800092a:	40bb      	lsls	r3, r7
 800092c:	1e59      	subs	r1, r3, #1
 800092e:	418b      	sbcs	r3, r1
 8000930:	431a      	orrs	r2, r3
 8000932:	0753      	lsls	r3, r2, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 8000936:	230f      	movs	r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	2b04      	cmp	r3, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 800093e:	3204      	adds	r2, #4
 8000940:	0153      	lsls	r3, r2, #5
 8000942:	d529      	bpl.n	8000998 <__aeabi_fdiv+0x21c>
 8000944:	2001      	movs	r0, #1
 8000946:	2200      	movs	r2, #0
 8000948:	e79a      	b.n	8000880 <__aeabi_fdiv+0x104>
 800094a:	4642      	mov	r2, r8
 800094c:	0163      	lsls	r3, r4, #5
 800094e:	0155      	lsls	r5, r2, #5
 8000950:	42ab      	cmp	r3, r5
 8000952:	d215      	bcs.n	8000980 <__aeabi_fdiv+0x204>
 8000954:	201b      	movs	r0, #27
 8000956:	2200      	movs	r2, #0
 8000958:	3f01      	subs	r7, #1
 800095a:	2601      	movs	r6, #1
 800095c:	001c      	movs	r4, r3
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2c00      	cmp	r4, #0
 8000964:	db01      	blt.n	800096a <__aeabi_fdiv+0x1ee>
 8000966:	429d      	cmp	r5, r3
 8000968:	d801      	bhi.n	800096e <__aeabi_fdiv+0x1f2>
 800096a:	1b5b      	subs	r3, r3, r5
 800096c:	4332      	orrs	r2, r6
 800096e:	3801      	subs	r0, #1
 8000970:	2800      	cmp	r0, #0
 8000972:	d1f3      	bne.n	800095c <__aeabi_fdiv+0x1e0>
 8000974:	1e58      	subs	r0, r3, #1
 8000976:	4183      	sbcs	r3, r0
 8000978:	4313      	orrs	r3, r2
 800097a:	4698      	mov	r8, r3
 800097c:	000d      	movs	r5, r1
 800097e:	e79a      	b.n	80008b6 <__aeabi_fdiv+0x13a>
 8000980:	201a      	movs	r0, #26
 8000982:	2201      	movs	r2, #1
 8000984:	1b5b      	subs	r3, r3, r5
 8000986:	e7e8      	b.n	800095a <__aeabi_fdiv+0x1de>
 8000988:	3b02      	subs	r3, #2
 800098a:	425a      	negs	r2, r3
 800098c:	4153      	adcs	r3, r2
 800098e:	425b      	negs	r3, r3
 8000990:	0035      	movs	r5, r6
 8000992:	2200      	movs	r2, #0
 8000994:	b2d8      	uxtb	r0, r3
 8000996:	e773      	b.n	8000880 <__aeabi_fdiv+0x104>
 8000998:	0192      	lsls	r2, r2, #6
 800099a:	2000      	movs	r0, #0
 800099c:	0a52      	lsrs	r2, r2, #9
 800099e:	e76f      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009a0:	431a      	orrs	r2, r3
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	0035      	movs	r5, r6
 80009a6:	20ff      	movs	r0, #255	@ 0xff
 80009a8:	0a52      	lsrs	r2, r2, #9
 80009aa:	e769      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009ac:	4644      	mov	r4, r8
 80009ae:	e7ad      	b.n	800090c <__aeabi_fdiv+0x190>
 80009b0:	080070f0 	.word	0x080070f0
 80009b4:	08007130 	.word	0x08007130
 80009b8:	f7ffffff 	.word	0xf7ffffff

080009bc <__eqsf2>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	024e      	lsls	r6, r1, #9
 80009c2:	004c      	lsls	r4, r1, #1
 80009c4:	0245      	lsls	r5, r0, #9
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	0e12      	lsrs	r2, r2, #24
 80009ca:	0fc3      	lsrs	r3, r0, #31
 80009cc:	0a76      	lsrs	r6, r6, #9
 80009ce:	0e24      	lsrs	r4, r4, #24
 80009d0:	0fc9      	lsrs	r1, r1, #31
 80009d2:	2aff      	cmp	r2, #255	@ 0xff
 80009d4:	d010      	beq.n	80009f8 <__eqsf2+0x3c>
 80009d6:	2cff      	cmp	r4, #255	@ 0xff
 80009d8:	d00c      	beq.n	80009f4 <__eqsf2+0x38>
 80009da:	2001      	movs	r0, #1
 80009dc:	42a2      	cmp	r2, r4
 80009de:	d10a      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e0:	42b5      	cmp	r5, r6
 80009e2:	d108      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d00f      	beq.n	8000a08 <__eqsf2+0x4c>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d104      	bne.n	80009f6 <__eqsf2+0x3a>
 80009ec:	0028      	movs	r0, r5
 80009ee:	1e43      	subs	r3, r0, #1
 80009f0:	4198      	sbcs	r0, r3
 80009f2:	e000      	b.n	80009f6 <__eqsf2+0x3a>
 80009f4:	2001      	movs	r0, #1
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	2001      	movs	r0, #1
 80009fa:	2cff      	cmp	r4, #255	@ 0xff
 80009fc:	d1fb      	bne.n	80009f6 <__eqsf2+0x3a>
 80009fe:	4335      	orrs	r5, r6
 8000a00:	d1f9      	bne.n	80009f6 <__eqsf2+0x3a>
 8000a02:	404b      	eors	r3, r1
 8000a04:	0018      	movs	r0, r3
 8000a06:	e7f6      	b.n	80009f6 <__eqsf2+0x3a>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7f4      	b.n	80009f6 <__eqsf2+0x3a>

08000a0c <__gesf2>:
 8000a0c:	b530      	push	{r4, r5, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0244      	lsls	r4, r0, #9
 8000a12:	024d      	lsls	r5, r1, #9
 8000a14:	0fc3      	lsrs	r3, r0, #31
 8000a16:	0048      	lsls	r0, r1, #1
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	0e00      	lsrs	r0, r0, #24
 8000a20:	0fc9      	lsrs	r1, r1, #31
 8000a22:	2aff      	cmp	r2, #255	@ 0xff
 8000a24:	d019      	beq.n	8000a5a <__gesf2+0x4e>
 8000a26:	28ff      	cmp	r0, #255	@ 0xff
 8000a28:	d00b      	beq.n	8000a42 <__gesf2+0x36>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d11e      	bne.n	8000a6c <__gesf2+0x60>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d10b      	bne.n	8000a4a <__gesf2+0x3e>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d027      	beq.n	8000a86 <__gesf2+0x7a>
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d134      	bne.n	8000aa4 <__gesf2+0x98>
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d02f      	beq.n	8000a9e <__gesf2+0x92>
 8000a3e:	0008      	movs	r0, r1
 8000a40:	bd30      	pop	{r4, r5, pc}
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d128      	bne.n	8000a98 <__gesf2+0x8c>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x42>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d0f5      	beq.n	8000a3a <__gesf2+0x2e>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d107      	bne.n	8000a62 <__gesf2+0x56>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d023      	beq.n	8000a9e <__gesf2+0x92>
 8000a56:	0018      	movs	r0, r3
 8000a58:	e7f2      	b.n	8000a40 <__gesf2+0x34>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d11c      	bne.n	8000a98 <__gesf2+0x8c>
 8000a5e:	28ff      	cmp	r0, #255	@ 0xff
 8000a60:	d014      	beq.n	8000a8c <__gesf2+0x80>
 8000a62:	1e58      	subs	r0, r3, #1
 8000a64:	2302      	movs	r3, #2
 8000a66:	4018      	ands	r0, r3
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e7e9      	b.n	8000a40 <__gesf2+0x34>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0f8      	beq.n	8000a62 <__gesf2+0x56>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d1f6      	bne.n	8000a62 <__gesf2+0x56>
 8000a74:	4282      	cmp	r2, r0
 8000a76:	dcf4      	bgt.n	8000a62 <__gesf2+0x56>
 8000a78:	dbeb      	blt.n	8000a52 <__gesf2+0x46>
 8000a7a:	42ac      	cmp	r4, r5
 8000a7c:	d8f1      	bhi.n	8000a62 <__gesf2+0x56>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	42ac      	cmp	r4, r5
 8000a82:	d2dd      	bcs.n	8000a40 <__gesf2+0x34>
 8000a84:	e7e5      	b.n	8000a52 <__gesf2+0x46>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d0da      	beq.n	8000a40 <__gesf2+0x34>
 8000a8a:	e7ea      	b.n	8000a62 <__gesf2+0x56>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d103      	bne.n	8000a98 <__gesf2+0x8c>
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d1e6      	bne.n	8000a62 <__gesf2+0x56>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7d3      	b.n	8000a40 <__gesf2+0x34>
 8000a98:	2002      	movs	r0, #2
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	e7d0      	b.n	8000a40 <__gesf2+0x34>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	e7cd      	b.n	8000a40 <__gesf2+0x34>
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d0e8      	beq.n	8000a7a <__gesf2+0x6e>
 8000aa8:	e7db      	b.n	8000a62 <__gesf2+0x56>
 8000aaa:	46c0      	nop			@ (mov r8, r8)

08000aac <__lesf2>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0244      	lsls	r4, r0, #9
 8000ab2:	024d      	lsls	r5, r1, #9
 8000ab4:	0fc3      	lsrs	r3, r0, #31
 8000ab6:	0048      	lsls	r0, r1, #1
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e00      	lsrs	r0, r0, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d01a      	beq.n	8000afc <__lesf2+0x50>
 8000ac6:	28ff      	cmp	r0, #255	@ 0xff
 8000ac8:	d00e      	beq.n	8000ae8 <__lesf2+0x3c>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d11e      	bne.n	8000b0c <__lesf2+0x60>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d10e      	bne.n	8000af0 <__lesf2+0x44>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d02a      	beq.n	8000b2c <__lesf2+0x80>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d00c      	beq.n	8000af4 <__lesf2+0x48>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d01d      	beq.n	8000b1a <__lesf2+0x6e>
 8000ade:	1e58      	subs	r0, r3, #1
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	4018      	ands	r0, r3
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e010      	b.n	8000b0a <__lesf2+0x5e>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d10d      	bne.n	8000b08 <__lesf2+0x5c>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d120      	bne.n	8000b32 <__lesf2+0x86>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d11e      	bne.n	8000b32 <__lesf2+0x86>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d023      	beq.n	8000b40 <__lesf2+0x94>
 8000af8:	0008      	movs	r0, r1
 8000afa:	e006      	b.n	8000b0a <__lesf2+0x5e>
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d103      	bne.n	8000b08 <__lesf2+0x5c>
 8000b00:	28ff      	cmp	r0, #255	@ 0xff
 8000b02:	d1ec      	bne.n	8000ade <__lesf2+0x32>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d017      	beq.n	8000b38 <__lesf2+0x8c>
 8000b08:	2002      	movs	r0, #2
 8000b0a:	bd30      	pop	{r4, r5, pc}
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d0e6      	beq.n	8000ade <__lesf2+0x32>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1e4      	bne.n	8000ade <__lesf2+0x32>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	dce2      	bgt.n	8000ade <__lesf2+0x32>
 8000b18:	db04      	blt.n	8000b24 <__lesf2+0x78>
 8000b1a:	42ac      	cmp	r4, r5
 8000b1c:	d8df      	bhi.n	8000ade <__lesf2+0x32>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	42ac      	cmp	r4, r5
 8000b22:	d2f2      	bcs.n	8000b0a <__lesf2+0x5e>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <__lesf2+0x94>
 8000b28:	0018      	movs	r0, r3
 8000b2a:	e7ee      	b.n	8000b0a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d0ec      	beq.n	8000b0a <__lesf2+0x5e>
 8000b30:	e7d5      	b.n	8000ade <__lesf2+0x32>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d1d3      	bne.n	8000ade <__lesf2+0x32>
 8000b36:	e7f5      	b.n	8000b24 <__lesf2+0x78>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d0e5      	beq.n	8000b0a <__lesf2+0x5e>
 8000b3e:	e7ce      	b.n	8000ade <__lesf2+0x32>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7e1      	b.n	8000b0a <__lesf2+0x5e>
 8000b46:	46c0      	nop			@ (mov r8, r8)

08000b48 <__aeabi_fmul>:
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	0243      	lsls	r3, r0, #9
 8000b52:	0a5b      	lsrs	r3, r3, #9
 8000b54:	0045      	lsls	r5, r0, #1
 8000b56:	b5c0      	push	{r6, r7, lr}
 8000b58:	4699      	mov	r9, r3
 8000b5a:	1c0f      	adds	r7, r1, #0
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fmul+0x1e>
 8000b64:	e088      	b.n	8000c78 <__aeabi_fmul+0x130>
 8000b66:	2dff      	cmp	r5, #255	@ 0xff
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fmul+0x24>
 8000b6a:	e08d      	b.n	8000c88 <__aeabi_fmul+0x140>
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	04d2      	lsls	r2, r2, #19
 8000b72:	431a      	orrs	r2, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	4691      	mov	r9, r2
 8000b78:	4698      	mov	r8, r3
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	3d7f      	subs	r5, #127	@ 0x7f
 8000b7e:	027c      	lsls	r4, r7, #9
 8000b80:	007b      	lsls	r3, r7, #1
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	0e1b      	lsrs	r3, r3, #24
 8000b86:	0fff      	lsrs	r7, r7, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d068      	beq.n	8000c5e <__aeabi_fmul+0x116>
 8000b8c:	2bff      	cmp	r3, #255	@ 0xff
 8000b8e:	d021      	beq.n	8000bd4 <__aeabi_fmul+0x8c>
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	00e4      	lsls	r4, r4, #3
 8000b94:	04d2      	lsls	r2, r2, #19
 8000b96:	4314      	orrs	r4, r2
 8000b98:	4642      	mov	r2, r8
 8000b9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b9c:	195b      	adds	r3, r3, r5
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	1c5d      	adds	r5, r3, #1
 8000ba2:	2a0a      	cmp	r2, #10
 8000ba4:	dc2e      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000ba6:	407e      	eors	r6, r7
 8000ba8:	4642      	mov	r2, r8
 8000baa:	2a02      	cmp	r2, #2
 8000bac:	dc23      	bgt.n	8000bf6 <__aeabi_fmul+0xae>
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	2a01      	cmp	r2, #1
 8000bb2:	d900      	bls.n	8000bb6 <__aeabi_fmul+0x6e>
 8000bb4:	e0bd      	b.n	8000d32 <__aeabi_fmul+0x1ea>
 8000bb6:	2902      	cmp	r1, #2
 8000bb8:	d06e      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000bba:	2901      	cmp	r1, #1
 8000bbc:	d12c      	bne.n	8000c18 <__aeabi_fmul+0xd0>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	05c0      	lsls	r0, r0, #23
 8000bc4:	07f6      	lsls	r6, r6, #31
 8000bc6:	4310      	orrs	r0, r2
 8000bc8:	4330      	orrs	r0, r6
 8000bca:	bce0      	pop	{r5, r6, r7}
 8000bcc:	46ba      	mov	sl, r7
 8000bce:	46b1      	mov	r9, r6
 8000bd0:	46a8      	mov	r8, r5
 8000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	33ff      	adds	r3, #255	@ 0xff
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d065      	beq.n	8000ca8 <__aeabi_fmul+0x160>
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4641      	mov	r1, r8
 8000be0:	4311      	orrs	r1, r2
 8000be2:	0032      	movs	r2, r6
 8000be4:	3501      	adds	r5, #1
 8000be6:	4688      	mov	r8, r1
 8000be8:	407a      	eors	r2, r7
 8000bea:	35ff      	adds	r5, #255	@ 0xff
 8000bec:	290a      	cmp	r1, #10
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_fmul+0xaa>
 8000bf0:	e0d8      	b.n	8000da4 <__aeabi_fmul+0x25c>
 8000bf2:	0016      	movs	r6, r2
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4082      	lsls	r2, r0
 8000bfc:	20a6      	movs	r0, #166	@ 0xa6
 8000bfe:	00c0      	lsls	r0, r0, #3
 8000c00:	4202      	tst	r2, r0
 8000c02:	d020      	beq.n	8000c46 <__aeabi_fmul+0xfe>
 8000c04:	4653      	mov	r3, sl
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d046      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0xc8>
 8000c0e:	e0bb      	b.n	8000d88 <__aeabi_fmul+0x240>
 8000c10:	4651      	mov	r1, sl
 8000c12:	464c      	mov	r4, r9
 8000c14:	2901      	cmp	r1, #1
 8000c16:	d0d2      	beq.n	8000bbe <__aeabi_fmul+0x76>
 8000c18:	002b      	movs	r3, r5
 8000c1a:	337f      	adds	r3, #127	@ 0x7f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd70      	ble.n	8000d02 <__aeabi_fmul+0x1ba>
 8000c20:	0762      	lsls	r2, r4, #29
 8000c22:	d004      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c24:	220f      	movs	r2, #15
 8000c26:	4022      	ands	r2, r4
 8000c28:	2a04      	cmp	r2, #4
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c2c:	3404      	adds	r4, #4
 8000c2e:	0122      	lsls	r2, r4, #4
 8000c30:	d503      	bpl.n	8000c3a <__aeabi_fmul+0xf2>
 8000c32:	4b63      	ldr	r3, [pc, #396]	@ (8000dc0 <__aeabi_fmul+0x278>)
 8000c34:	401c      	ands	r4, r3
 8000c36:	002b      	movs	r3, r5
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dc2c      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000c3e:	01a2      	lsls	r2, r4, #6
 8000c40:	0a52      	lsrs	r2, r2, #9
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	e7bd      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c46:	2090      	movs	r0, #144	@ 0x90
 8000c48:	0080      	lsls	r0, r0, #2
 8000c4a:	4202      	tst	r2, r0
 8000c4c:	d127      	bne.n	8000c9e <__aeabi_fmul+0x156>
 8000c4e:	38b9      	subs	r0, #185	@ 0xb9
 8000c50:	38ff      	subs	r0, #255	@ 0xff
 8000c52:	4210      	tst	r0, r2
 8000c54:	d06d      	beq.n	8000d32 <__aeabi_fmul+0x1ea>
 8000c56:	003e      	movs	r6, r7
 8000c58:	46a1      	mov	r9, r4
 8000c5a:	468a      	mov	sl, r1
 8000c5c:	e7d2      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d141      	bne.n	8000ce6 <__aeabi_fmul+0x19e>
 8000c62:	2301      	movs	r3, #1
 8000c64:	4642      	mov	r2, r8
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4690      	mov	r8, r2
 8000c6a:	002b      	movs	r3, r5
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	2101      	movs	r1, #1
 8000c70:	1c5d      	adds	r5, r3, #1
 8000c72:	2a0a      	cmp	r2, #10
 8000c74:	dd97      	ble.n	8000ba6 <__aeabi_fmul+0x5e>
 8000c76:	e7c5      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d126      	bne.n	8000cca <__aeabi_fmul+0x182>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	4698      	mov	r8, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469a      	mov	sl, r3
 8000c86:	e77a      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d118      	bne.n	8000cbe <__aeabi_fmul+0x176>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	4698      	mov	r8, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	@ 0xff
 8000c94:	469a      	mov	sl, r3
 8000c96:	e772      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e791      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	20ff      	movs	r0, #255	@ 0xff
 8000ca4:	03d2      	lsls	r2, r2, #15
 8000ca6:	e78c      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000ca8:	4641      	mov	r1, r8
 8000caa:	2202      	movs	r2, #2
 8000cac:	3501      	adds	r5, #1
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	35ff      	adds	r5, #255	@ 0xff
 8000cb4:	290a      	cmp	r1, #10
 8000cb6:	dca5      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000cb8:	2102      	movs	r1, #2
 8000cba:	407e      	eors	r6, r7
 8000cbc:	e774      	b.n	8000ba8 <__aeabi_fmul+0x60>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	3b09      	subs	r3, #9
 8000cc4:	25ff      	movs	r5, #255	@ 0xff
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	e759      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 feba 	bl	8001a44 <__clzsi2>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1f43      	subs	r3, r0, #5
 8000cd4:	2576      	movs	r5, #118	@ 0x76
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	426d      	negs	r5, r5
 8000cdc:	4691      	mov	r9, r2
 8000cde:	4698      	mov	r8, r3
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	1a2d      	subs	r5, r5, r0
 8000ce4:	e74b      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f000 feac 	bl	8001a44 <__clzsi2>
 8000cec:	4642      	mov	r2, r8
 8000cee:	1f43      	subs	r3, r0, #5
 8000cf0:	409c      	lsls	r4, r3
 8000cf2:	1a2b      	subs	r3, r5, r0
 8000cf4:	3b76      	subs	r3, #118	@ 0x76
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	1c5d      	adds	r5, r3, #1
 8000cfa:	2a0a      	cmp	r2, #10
 8000cfc:	dc00      	bgt.n	8000d00 <__aeabi_fmul+0x1b8>
 8000cfe:	e752      	b.n	8000ba6 <__aeabi_fmul+0x5e>
 8000d00:	e780      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000d02:	2201      	movs	r2, #1
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b1b      	cmp	r3, #27
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_fmul+0x1c4>
 8000d0a:	e758      	b.n	8000bbe <__aeabi_fmul+0x76>
 8000d0c:	359e      	adds	r5, #158	@ 0x9e
 8000d0e:	0022      	movs	r2, r4
 8000d10:	40ac      	lsls	r4, r5
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	4322      	orrs	r2, r4
 8000d1a:	0753      	lsls	r3, r2, #29
 8000d1c:	d004      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d1e:	230f      	movs	r3, #15
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d000      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d26:	3204      	adds	r2, #4
 8000d28:	0153      	lsls	r3, r2, #5
 8000d2a:	d537      	bpl.n	8000d9c <__aeabi_fmul+0x254>
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e747      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d32:	0c21      	lsrs	r1, r4, #16
 8000d34:	464a      	mov	r2, r9
 8000d36:	0424      	lsls	r4, r4, #16
 8000d38:	0c24      	lsrs	r4, r4, #16
 8000d3a:	0027      	movs	r7, r4
 8000d3c:	0c10      	lsrs	r0, r2, #16
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	4344      	muls	r4, r0
 8000d44:	4357      	muls	r7, r2
 8000d46:	4348      	muls	r0, r1
 8000d48:	4351      	muls	r1, r2
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	1852      	adds	r2, r2, r1
 8000d50:	4294      	cmp	r4, r2
 8000d52:	d903      	bls.n	8000d5c <__aeabi_fmul+0x214>
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0249      	lsls	r1, r1, #9
 8000d58:	468c      	mov	ip, r1
 8000d5a:	4460      	add	r0, ip
 8000d5c:	043f      	lsls	r7, r7, #16
 8000d5e:	0411      	lsls	r1, r2, #16
 8000d60:	0c3f      	lsrs	r7, r7, #16
 8000d62:	19c9      	adds	r1, r1, r7
 8000d64:	018c      	lsls	r4, r1, #6
 8000d66:	1e67      	subs	r7, r4, #1
 8000d68:	41bc      	sbcs	r4, r7
 8000d6a:	0c12      	lsrs	r2, r2, #16
 8000d6c:	0e89      	lsrs	r1, r1, #26
 8000d6e:	1812      	adds	r2, r2, r0
 8000d70:	430c      	orrs	r4, r1
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	4314      	orrs	r4, r2
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	d50e      	bpl.n	8000d98 <__aeabi_fmul+0x250>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	0862      	lsrs	r2, r4, #1
 8000d7e:	401c      	ands	r4, r3
 8000d80:	4314      	orrs	r4, r2
 8000d82:	e749      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d84:	003e      	movs	r6, r7
 8000d86:	46a1      	mov	r9, r4
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	03d2      	lsls	r2, r2, #15
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	0252      	lsls	r2, r2, #9
 8000d92:	20ff      	movs	r0, #255	@ 0xff
 8000d94:	0a52      	lsrs	r2, r2, #9
 8000d96:	e714      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d98:	001d      	movs	r5, r3
 8000d9a:	e73d      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e70e      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000da4:	290f      	cmp	r1, #15
 8000da6:	d1ed      	bne.n	8000d84 <__aeabi_fmul+0x23c>
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	464b      	mov	r3, r9
 8000dac:	03d2      	lsls	r2, r2, #15
 8000dae:	4213      	tst	r3, r2
 8000db0:	d0ea      	beq.n	8000d88 <__aeabi_fmul+0x240>
 8000db2:	4214      	tst	r4, r2
 8000db4:	d1e8      	bne.n	8000d88 <__aeabi_fmul+0x240>
 8000db6:	003e      	movs	r6, r7
 8000db8:	20ff      	movs	r0, #255	@ 0xff
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	e701      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	0243      	lsls	r3, r0, #9
 8000dce:	0045      	lsls	r5, r0, #1
 8000dd0:	0a72      	lsrs	r2, r6, #9
 8000dd2:	0fc4      	lsrs	r4, r0, #31
 8000dd4:	0048      	lsls	r0, r1, #1
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	4694      	mov	ip, r2
 8000dda:	0a5f      	lsrs	r7, r3, #9
 8000ddc:	0e2d      	lsrs	r5, r5, #24
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	0e00      	lsrs	r0, r0, #24
 8000de2:	0fc9      	lsrs	r1, r1, #31
 8000de4:	09b6      	lsrs	r6, r6, #6
 8000de6:	28ff      	cmp	r0, #255	@ 0xff
 8000de8:	d024      	beq.n	8000e34 <__aeabi_fsub+0x70>
 8000dea:	2201      	movs	r2, #1
 8000dec:	4051      	eors	r1, r2
 8000dee:	1a2a      	subs	r2, r5, r0
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d00f      	beq.n	8000e14 <__aeabi_fsub+0x50>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_fsub+0x36>
 8000df8:	e16a      	b.n	80010d0 <__aeabi_fsub+0x30c>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d135      	bne.n	8000e6a <__aeabi_fsub+0xa6>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x40>
 8000e02:	e0a2      	b.n	8000f4a <__aeabi_fsub+0x186>
 8000e04:	1e51      	subs	r1, r2, #1
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x48>
 8000e0a:	e124      	b.n	8001056 <__aeabi_fsub+0x292>
 8000e0c:	2aff      	cmp	r2, #255	@ 0xff
 8000e0e:	d021      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e10:	000a      	movs	r2, r1
 8000e12:	e02f      	b.n	8000e74 <__aeabi_fsub+0xb0>
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	dc00      	bgt.n	8000e1a <__aeabi_fsub+0x56>
 8000e18:	e167      	b.n	80010ea <__aeabi_fsub+0x326>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d05e      	beq.n	8000edc <__aeabi_fsub+0x118>
 8000e1e:	2dff      	cmp	r5, #255	@ 0xff
 8000e20:	d018      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	04c9      	lsls	r1, r1, #19
 8000e26:	430e      	orrs	r6, r1
 8000e28:	2a1b      	cmp	r2, #27
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_fsub+0x6a>
 8000e2c:	e076      	b.n	8000f1c <__aeabi_fsub+0x158>
 8000e2e:	002a      	movs	r2, r5
 8000e30:	3301      	adds	r3, #1
 8000e32:	e032      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000e34:	002a      	movs	r2, r5
 8000e36:	3aff      	subs	r2, #255	@ 0xff
 8000e38:	4691      	mov	r9, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d042      	beq.n	8000ec4 <__aeabi_fsub+0x100>
 8000e3e:	428c      	cmp	r4, r1
 8000e40:	d055      	beq.n	8000eee <__aeabi_fsub+0x12a>
 8000e42:	464a      	mov	r2, r9
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x86>
 8000e48:	e09c      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x8c>
 8000e4e:	e077      	b.n	8000f40 <__aeabi_fsub+0x17c>
 8000e50:	000c      	movs	r4, r1
 8000e52:	0033      	movs	r3, r6
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x98>
 8000e5a:	e06e      	b.n	8000f3a <__aeabi_fsub+0x176>
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	03d2      	lsls	r2, r2, #15
 8000e60:	4313      	orrs	r3, r2
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	20ff      	movs	r0, #255	@ 0xff
 8000e66:	0a5b      	lsrs	r3, r3, #9
 8000e68:	e024      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000e6a:	2dff      	cmp	r5, #255	@ 0xff
 8000e6c:	d0f2      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	04c9      	lsls	r1, r1, #19
 8000e72:	430e      	orrs	r6, r1
 8000e74:	2101      	movs	r1, #1
 8000e76:	2a1b      	cmp	r2, #27
 8000e78:	dc08      	bgt.n	8000e8c <__aeabi_fsub+0xc8>
 8000e7a:	0031      	movs	r1, r6
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	40d1      	lsrs	r1, r2
 8000e80:	1a82      	subs	r2, r0, r2
 8000e82:	4096      	lsls	r6, r2
 8000e84:	0032      	movs	r2, r6
 8000e86:	1e50      	subs	r0, r2, #1
 8000e88:	4182      	sbcs	r2, r0
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	d460      	bmi.n	8000f54 <__aeabi_fsub+0x190>
 8000e92:	2107      	movs	r1, #7
 8000e94:	002a      	movs	r2, r5
 8000e96:	4019      	ands	r1, r3
 8000e98:	d057      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	2904      	cmp	r1, #4
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_fsub+0xe0>
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	0159      	lsls	r1, r3, #5
 8000ea6:	d550      	bpl.n	8000f4a <__aeabi_fsub+0x186>
 8000ea8:	1c50      	adds	r0, r2, #1
 8000eaa:	2afe      	cmp	r2, #254	@ 0xfe
 8000eac:	d045      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	b2c0      	uxtb	r0, r0
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	05c0      	lsls	r0, r0, #23
 8000eb6:	4318      	orrs	r0, r3
 8000eb8:	07e4      	lsls	r4, r4, #31
 8000eba:	4320      	orrs	r0, r4
 8000ebc:	bcc0      	pop	{r6, r7}
 8000ebe:	46b9      	mov	r9, r7
 8000ec0:	46b0      	mov	r8, r6
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4051      	eors	r1, r2
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	d1ba      	bne.n	8000e42 <__aeabi_fsub+0x7e>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d010      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x114>
 8000ed6:	e098      	b.n	800100a <__aeabi_fsub+0x246>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e7bb      	b.n	8000e54 <__aeabi_fsub+0x90>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d034      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d06e      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d0b4      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000eea:	000a      	movs	r2, r1
 8000eec:	e79c      	b.n	8000e28 <__aeabi_fsub+0x64>
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ef2:	e088      	b.n	8001006 <__aeabi_fsub+0x242>
 8000ef4:	20fe      	movs	r0, #254	@ 0xfe
 8000ef6:	1c6a      	adds	r2, r5, #1
 8000ef8:	4210      	tst	r0, r2
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0x13a>
 8000efc:	e092      	b.n	8001024 <__aeabi_fsub+0x260>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x140>
 8000f02:	e0a4      	b.n	800104e <__aeabi_fsub+0x28a>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x146>
 8000f08:	e0cb      	b.n	80010a2 <__aeabi_fsub+0x2de>
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f0e:	e0ca      	b.n	80010a6 <__aeabi_fsub+0x2e2>
 8000f10:	2200      	movs	r2, #0
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	b2d0      	uxtb	r0, r2
 8000f1a:	e7cb      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f1c:	0031      	movs	r1, r6
 8000f1e:	2020      	movs	r0, #32
 8000f20:	40d1      	lsrs	r1, r2
 8000f22:	1a82      	subs	r2, r0, r2
 8000f24:	4096      	lsls	r6, r2
 8000f26:	0032      	movs	r2, r6
 8000f28:	1e50      	subs	r0, r2, #1
 8000f2a:	4182      	sbcs	r2, r0
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	d5ae      	bpl.n	8000e92 <__aeabi_fsub+0xce>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f38:	d14a      	bne.n	8000fd0 <__aeabi_fsub+0x20c>
 8000f3a:	20ff      	movs	r0, #255	@ 0xff
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e7b9      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f40:	22ff      	movs	r2, #255	@ 0xff
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d14b      	bne.n	8000fde <__aeabi_fsub+0x21a>
 8000f46:	000c      	movs	r4, r1
 8000f48:	0033      	movs	r3, r6
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	2aff      	cmp	r2, #255	@ 0xff
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x18e>
 8000f50:	e781      	b.n	8000e56 <__aeabi_fsub+0x92>
 8000f52:	e7df      	b.n	8000f14 <__aeabi_fsub+0x150>
 8000f54:	019f      	lsls	r7, r3, #6
 8000f56:	09bf      	lsrs	r7, r7, #6
 8000f58:	0038      	movs	r0, r7
 8000f5a:	f000 fd73 	bl	8001a44 <__clzsi2>
 8000f5e:	3805      	subs	r0, #5
 8000f60:	4087      	lsls	r7, r0
 8000f62:	4285      	cmp	r5, r0
 8000f64:	dc21      	bgt.n	8000faa <__aeabi_fsub+0x1e6>
 8000f66:	003b      	movs	r3, r7
 8000f68:	2120      	movs	r1, #32
 8000f6a:	1b42      	subs	r2, r0, r5
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	40d3      	lsrs	r3, r2
 8000f70:	1a8a      	subs	r2, r1, r2
 8000f72:	4097      	lsls	r7, r2
 8000f74:	1e7a      	subs	r2, r7, #1
 8000f76:	4197      	sbcs	r7, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	433b      	orrs	r3, r7
 8000f7c:	0759      	lsls	r1, r3, #29
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x1be>
 8000f80:	e78b      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000f82:	e78f      	b.n	8000ea4 <__aeabi_fsub+0xe0>
 8000f84:	20fe      	movs	r0, #254	@ 0xfe
 8000f86:	1c6a      	adds	r2, r5, #1
 8000f88:	4210      	tst	r0, r2
 8000f8a:	d112      	bne.n	8000fb2 <__aeabi_fsub+0x1ee>
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d152      	bne.n	8001036 <__aeabi_fsub+0x272>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d07c      	beq.n	800108e <__aeabi_fsub+0x2ca>
 8000f94:	2e00      	cmp	r6, #0
 8000f96:	d0bb      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f98:	1b9a      	subs	r2, r3, r6
 8000f9a:	0150      	lsls	r0, r2, #5
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fsub+0x1dc>
 8000f9e:	e08b      	b.n	80010b8 <__aeabi_fsub+0x2f4>
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	1af3      	subs	r3, r6, r3
 8000fa6:	400c      	ands	r4, r1
 8000fa8:	e7e8      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000faa:	4b56      	ldr	r3, [pc, #344]	@ (8001104 <__aeabi_fsub+0x340>)
 8000fac:	1a2a      	subs	r2, r5, r0
 8000fae:	403b      	ands	r3, r7
 8000fb0:	e7e4      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fb2:	1b9f      	subs	r7, r3, r6
 8000fb4:	017a      	lsls	r2, r7, #5
 8000fb6:	d446      	bmi.n	8001046 <__aeabi_fsub+0x282>
 8000fb8:	2f00      	cmp	r7, #0
 8000fba:	d1cd      	bne.n	8000f58 <__aeabi_fsub+0x194>
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e777      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000fc4:	199b      	adds	r3, r3, r6
 8000fc6:	2501      	movs	r5, #1
 8000fc8:	3201      	adds	r2, #1
 8000fca:	0159      	lsls	r1, r3, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x20c>
 8000fce:	e760      	b.n	8000e92 <__aeabi_fsub+0xce>
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	484d      	ldr	r0, [pc, #308]	@ (8001108 <__aeabi_fsub+0x344>)
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	4003      	ands	r3, r0
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	e7ce      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fde:	1e57      	subs	r7, r2, #1
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d05a      	beq.n	800109a <__aeabi_fsub+0x2d6>
 8000fe4:	000c      	movs	r4, r1
 8000fe6:	2aff      	cmp	r2, #255	@ 0xff
 8000fe8:	d033      	beq.n	8001052 <__aeabi_fsub+0x28e>
 8000fea:	2201      	movs	r2, #1
 8000fec:	2f1b      	cmp	r7, #27
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_fsub+0x23c>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	1bc9      	subs	r1, r1, r7
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	40fa      	lsrs	r2, r7
 8000ffa:	1e59      	subs	r1, r3, #1
 8000ffc:	418b      	sbcs	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	0005      	movs	r5, r0
 8001002:	1ab3      	subs	r3, r6, r2
 8001004:	e743      	b.n	8000e8e <__aeabi_fsub+0xca>
 8001006:	2d00      	cmp	r5, #0
 8001008:	d123      	bne.n	8001052 <__aeabi_fsub+0x28e>
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	2b00      	cmp	r3, #0
 800100e:	d09b      	beq.n	8000f48 <__aeabi_fsub+0x184>
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	2a01      	cmp	r2, #1
 8001014:	d0d6      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d01b      	beq.n	8001052 <__aeabi_fsub+0x28e>
 800101a:	291b      	cmp	r1, #27
 800101c:	dd2c      	ble.n	8001078 <__aeabi_fsub+0x2b4>
 800101e:	0002      	movs	r2, r0
 8001020:	1c73      	adds	r3, r6, #1
 8001022:	e73a      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001024:	2aff      	cmp	r2, #255	@ 0xff
 8001026:	d088      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8001028:	199b      	adds	r3, r3, r6
 800102a:	085b      	lsrs	r3, r3, #1
 800102c:	0759      	lsls	r1, r3, #29
 800102e:	d000      	beq.n	8001032 <__aeabi_fsub+0x26e>
 8001030:	e733      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	e76e      	b.n	8000f14 <__aeabi_fsub+0x150>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <__aeabi_fsub+0x298>
 800103a:	2e00      	cmp	r6, #0
 800103c:	d043      	beq.n	80010c6 <__aeabi_fsub+0x302>
 800103e:	2401      	movs	r4, #1
 8001040:	0033      	movs	r3, r6
 8001042:	400c      	ands	r4, r1
 8001044:	e706      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001046:	2401      	movs	r4, #1
 8001048:	1af7      	subs	r7, r6, r3
 800104a:	400c      	ands	r4, r1
 800104c:	e784      	b.n	8000f58 <__aeabi_fsub+0x194>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <__aeabi_fsub+0x298>
 8001052:	0033      	movs	r3, r6
 8001054:	e6fe      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001056:	2501      	movs	r5, #1
 8001058:	1b9b      	subs	r3, r3, r6
 800105a:	e718      	b.n	8000e8e <__aeabi_fsub+0xca>
 800105c:	2e00      	cmp	r6, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x29e>
 8001060:	e6f8      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	03d2      	lsls	r2, r2, #15
 8001066:	4297      	cmp	r7, r2
 8001068:	d304      	bcc.n	8001074 <__aeabi_fsub+0x2b0>
 800106a:	4594      	cmp	ip, r2
 800106c:	d202      	bcs.n	8001074 <__aeabi_fsub+0x2b0>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	e6f1      	b.n	8000e5c <__aeabi_fsub+0x98>
 8001078:	001a      	movs	r2, r3
 800107a:	2520      	movs	r5, #32
 800107c:	40ca      	lsrs	r2, r1
 800107e:	1a69      	subs	r1, r5, r1
 8001080:	408b      	lsls	r3, r1
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	418b      	sbcs	r3, r1
 8001086:	4313      	orrs	r3, r2
 8001088:	0005      	movs	r5, r0
 800108a:	199b      	adds	r3, r3, r6
 800108c:	e750      	b.n	8000f30 <__aeabi_fsub+0x16c>
 800108e:	2e00      	cmp	r6, #0
 8001090:	d094      	beq.n	8000fbc <__aeabi_fsub+0x1f8>
 8001092:	2401      	movs	r4, #1
 8001094:	0033      	movs	r3, r6
 8001096:	400c      	ands	r4, r1
 8001098:	e73a      	b.n	8000f10 <__aeabi_fsub+0x14c>
 800109a:	000c      	movs	r4, r1
 800109c:	2501      	movs	r5, #1
 800109e:	1af3      	subs	r3, r6, r3
 80010a0:	e6f5      	b.n	8000e8e <__aeabi_fsub+0xca>
 80010a2:	0033      	movs	r3, r6
 80010a4:	e734      	b.n	8000f10 <__aeabi_fsub+0x14c>
 80010a6:	199b      	adds	r3, r3, r6
 80010a8:	2200      	movs	r2, #0
 80010aa:	0159      	lsls	r1, r3, #5
 80010ac:	d5c1      	bpl.n	8001032 <__aeabi_fsub+0x26e>
 80010ae:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <__aeabi_fsub+0x340>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2201      	movs	r2, #1
 80010b6:	e72d      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x2fa>
 80010bc:	e77e      	b.n	8000fbc <__aeabi_fsub+0x1f8>
 80010be:	0013      	movs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	e726      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	2400      	movs	r4, #0
 80010ca:	20ff      	movs	r0, #255	@ 0xff
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	e6f1      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x312>
 80010d4:	e756      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 80010d6:	1b47      	subs	r7, r0, r5
 80010d8:	003a      	movs	r2, r7
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x31c>
 80010de:	e730      	b.n	8000f42 <__aeabi_fsub+0x17e>
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	04d2      	lsls	r2, r2, #19
 80010e4:	000c      	movs	r4, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	e77f      	b.n	8000fea <__aeabi_fsub+0x226>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x32c>
 80010ee:	e701      	b.n	8000ef4 <__aeabi_fsub+0x130>
 80010f0:	1b41      	subs	r1, r0, r5
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d101      	bne.n	80010fa <__aeabi_fsub+0x336>
 80010f6:	000a      	movs	r2, r1
 80010f8:	e788      	b.n	800100c <__aeabi_fsub+0x248>
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	04d2      	lsls	r2, r2, #19
 80010fe:	4313      	orrs	r3, r2
 8001100:	e78b      	b.n	800101a <__aeabi_fsub+0x256>
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	@ 0x7e
 800111a:	dd03      	ble.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	@ 0x9d
 800111e:	dd02      	ble.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	@ 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	@ 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	@ 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	@ 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_i2f>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	2800      	cmp	r0, #0
 8001150:	d013      	beq.n	800117a <__aeabi_i2f+0x2e>
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	18c5      	adds	r5, r0, r3
 8001156:	405d      	eors	r5, r3
 8001158:	0fc4      	lsrs	r4, r0, #31
 800115a:	0028      	movs	r0, r5
 800115c:	f000 fc72 	bl	8001a44 <__clzsi2>
 8001160:	239e      	movs	r3, #158	@ 0x9e
 8001162:	0001      	movs	r1, r0
 8001164:	1a1b      	subs	r3, r3, r0
 8001166:	2b96      	cmp	r3, #150	@ 0x96
 8001168:	dc0f      	bgt.n	800118a <__aeabi_i2f+0x3e>
 800116a:	2808      	cmp	r0, #8
 800116c:	d034      	beq.n	80011d8 <__aeabi_i2f+0x8c>
 800116e:	3908      	subs	r1, #8
 8001170:	408d      	lsls	r5, r1
 8001172:	026d      	lsls	r5, r5, #9
 8001174:	0a6d      	lsrs	r5, r5, #9
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	e002      	b.n	8001180 <__aeabi_i2f+0x34>
 800117a:	2400      	movs	r4, #0
 800117c:	2000      	movs	r0, #0
 800117e:	2500      	movs	r5, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4328      	orrs	r0, r5
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4320      	orrs	r0, r4
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	2b99      	cmp	r3, #153	@ 0x99
 800118c:	dc16      	bgt.n	80011bc <__aeabi_i2f+0x70>
 800118e:	1f42      	subs	r2, r0, #5
 8001190:	2805      	cmp	r0, #5
 8001192:	d000      	beq.n	8001196 <__aeabi_i2f+0x4a>
 8001194:	4095      	lsls	r5, r2
 8001196:	002a      	movs	r2, r5
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <__aeabi_i2f+0x94>)
 800119a:	4002      	ands	r2, r0
 800119c:	076e      	lsls	r6, r5, #29
 800119e:	d009      	beq.n	80011b4 <__aeabi_i2f+0x68>
 80011a0:	260f      	movs	r6, #15
 80011a2:	4035      	ands	r5, r6
 80011a4:	2d04      	cmp	r5, #4
 80011a6:	d005      	beq.n	80011b4 <__aeabi_i2f+0x68>
 80011a8:	3204      	adds	r2, #4
 80011aa:	0155      	lsls	r5, r2, #5
 80011ac:	d502      	bpl.n	80011b4 <__aeabi_i2f+0x68>
 80011ae:	239f      	movs	r3, #159	@ 0x9f
 80011b0:	4002      	ands	r2, r0
 80011b2:	1a5b      	subs	r3, r3, r1
 80011b4:	0192      	lsls	r2, r2, #6
 80011b6:	0a55      	lsrs	r5, r2, #9
 80011b8:	b2d8      	uxtb	r0, r3
 80011ba:	e7e1      	b.n	8001180 <__aeabi_i2f+0x34>
 80011bc:	2205      	movs	r2, #5
 80011be:	1a12      	subs	r2, r2, r0
 80011c0:	0028      	movs	r0, r5
 80011c2:	40d0      	lsrs	r0, r2
 80011c4:	0002      	movs	r2, r0
 80011c6:	0008      	movs	r0, r1
 80011c8:	301b      	adds	r0, #27
 80011ca:	4085      	lsls	r5, r0
 80011cc:	0028      	movs	r0, r5
 80011ce:	1e45      	subs	r5, r0, #1
 80011d0:	41a8      	sbcs	r0, r5
 80011d2:	4302      	orrs	r2, r0
 80011d4:	0015      	movs	r5, r2
 80011d6:	e7de      	b.n	8001196 <__aeabi_i2f+0x4a>
 80011d8:	026d      	lsls	r5, r5, #9
 80011da:	2096      	movs	r0, #150	@ 0x96
 80011dc:	0a6d      	lsrs	r5, r5, #9
 80011de:	e7cf      	b.n	8001180 <__aeabi_i2f+0x34>
 80011e0:	fbffffff 	.word	0xfbffffff

080011e4 <__aeabi_dadd>:
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	4657      	mov	r7, sl
 80011e8:	464e      	mov	r6, r9
 80011ea:	4645      	mov	r5, r8
 80011ec:	46de      	mov	lr, fp
 80011ee:	b5e0      	push	{r5, r6, r7, lr}
 80011f0:	b083      	sub	sp, #12
 80011f2:	9000      	str	r0, [sp, #0]
 80011f4:	9101      	str	r1, [sp, #4]
 80011f6:	030c      	lsls	r4, r1, #12
 80011f8:	004f      	lsls	r7, r1, #1
 80011fa:	0fce      	lsrs	r6, r1, #31
 80011fc:	0a61      	lsrs	r1, r4, #9
 80011fe:	9c00      	ldr	r4, [sp, #0]
 8001200:	031d      	lsls	r5, r3, #12
 8001202:	0f64      	lsrs	r4, r4, #29
 8001204:	430c      	orrs	r4, r1
 8001206:	9900      	ldr	r1, [sp, #0]
 8001208:	9200      	str	r2, [sp, #0]
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	00c8      	lsls	r0, r1, #3
 800120e:	0059      	lsls	r1, r3, #1
 8001210:	0d4b      	lsrs	r3, r1, #21
 8001212:	4699      	mov	r9, r3
 8001214:	9a00      	ldr	r2, [sp, #0]
 8001216:	9b01      	ldr	r3, [sp, #4]
 8001218:	0a6d      	lsrs	r5, r5, #9
 800121a:	0fd9      	lsrs	r1, r3, #31
 800121c:	0f53      	lsrs	r3, r2, #29
 800121e:	432b      	orrs	r3, r5
 8001220:	469a      	mov	sl, r3
 8001222:	9b00      	ldr	r3, [sp, #0]
 8001224:	0d7f      	lsrs	r7, r7, #21
 8001226:	00da      	lsls	r2, r3, #3
 8001228:	4694      	mov	ip, r2
 800122a:	464a      	mov	r2, r9
 800122c:	46b0      	mov	r8, r6
 800122e:	1aba      	subs	r2, r7, r2
 8001230:	428e      	cmp	r6, r1
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x52>
 8001234:	e0b0      	b.n	8001398 <__aeabi_dadd+0x1b4>
 8001236:	2a00      	cmp	r2, #0
 8001238:	dc00      	bgt.n	800123c <__aeabi_dadd+0x58>
 800123a:	e078      	b.n	800132e <__aeabi_dadd+0x14a>
 800123c:	4649      	mov	r1, r9
 800123e:	2900      	cmp	r1, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0x60>
 8001242:	e0e9      	b.n	8001418 <__aeabi_dadd+0x234>
 8001244:	49c9      	ldr	r1, [pc, #804]	@ (800156c <__aeabi_dadd+0x388>)
 8001246:	428f      	cmp	r7, r1
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x68>
 800124a:	e195      	b.n	8001578 <__aeabi_dadd+0x394>
 800124c:	2501      	movs	r5, #1
 800124e:	2a38      	cmp	r2, #56	@ 0x38
 8001250:	dc16      	bgt.n	8001280 <__aeabi_dadd+0x9c>
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	4653      	mov	r3, sl
 8001256:	0409      	lsls	r1, r1, #16
 8001258:	430b      	orrs	r3, r1
 800125a:	469a      	mov	sl, r3
 800125c:	2a1f      	cmp	r2, #31
 800125e:	dd00      	ble.n	8001262 <__aeabi_dadd+0x7e>
 8001260:	e1e7      	b.n	8001632 <__aeabi_dadd+0x44e>
 8001262:	2120      	movs	r1, #32
 8001264:	4655      	mov	r5, sl
 8001266:	1a8b      	subs	r3, r1, r2
 8001268:	4661      	mov	r1, ip
 800126a:	409d      	lsls	r5, r3
 800126c:	40d1      	lsrs	r1, r2
 800126e:	430d      	orrs	r5, r1
 8001270:	4661      	mov	r1, ip
 8001272:	4099      	lsls	r1, r3
 8001274:	1e4b      	subs	r3, r1, #1
 8001276:	4199      	sbcs	r1, r3
 8001278:	4653      	mov	r3, sl
 800127a:	40d3      	lsrs	r3, r2
 800127c:	430d      	orrs	r5, r1
 800127e:	1ae4      	subs	r4, r4, r3
 8001280:	1b45      	subs	r5, r0, r5
 8001282:	42a8      	cmp	r0, r5
 8001284:	4180      	sbcs	r0, r0
 8001286:	4240      	negs	r0, r0
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	0223      	lsls	r3, r4, #8
 800128c:	d400      	bmi.n	8001290 <__aeabi_dadd+0xac>
 800128e:	e10f      	b.n	80014b0 <__aeabi_dadd+0x2cc>
 8001290:	0264      	lsls	r4, r4, #9
 8001292:	0a64      	lsrs	r4, r4, #9
 8001294:	2c00      	cmp	r4, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0xb6>
 8001298:	e139      	b.n	800150e <__aeabi_dadd+0x32a>
 800129a:	0020      	movs	r0, r4
 800129c:	f000 fbd2 	bl	8001a44 <__clzsi2>
 80012a0:	0003      	movs	r3, r0
 80012a2:	3b08      	subs	r3, #8
 80012a4:	2120      	movs	r1, #32
 80012a6:	0028      	movs	r0, r5
 80012a8:	1aca      	subs	r2, r1, r3
 80012aa:	40d0      	lsrs	r0, r2
 80012ac:	409c      	lsls	r4, r3
 80012ae:	0002      	movs	r2, r0
 80012b0:	409d      	lsls	r5, r3
 80012b2:	4322      	orrs	r2, r4
 80012b4:	429f      	cmp	r7, r3
 80012b6:	dd00      	ble.n	80012ba <__aeabi_dadd+0xd6>
 80012b8:	e173      	b.n	80015a2 <__aeabi_dadd+0x3be>
 80012ba:	1bd8      	subs	r0, r3, r7
 80012bc:	3001      	adds	r0, #1
 80012be:	1a09      	subs	r1, r1, r0
 80012c0:	002c      	movs	r4, r5
 80012c2:	408d      	lsls	r5, r1
 80012c4:	40c4      	lsrs	r4, r0
 80012c6:	1e6b      	subs	r3, r5, #1
 80012c8:	419d      	sbcs	r5, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	40c2      	lsrs	r2, r0
 80012ce:	408b      	lsls	r3, r1
 80012d0:	4325      	orrs	r5, r4
 80012d2:	2700      	movs	r7, #0
 80012d4:	0014      	movs	r4, r2
 80012d6:	431d      	orrs	r5, r3
 80012d8:	076b      	lsls	r3, r5, #29
 80012da:	d009      	beq.n	80012f0 <__aeabi_dadd+0x10c>
 80012dc:	230f      	movs	r3, #15
 80012de:	402b      	ands	r3, r5
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d005      	beq.n	80012f0 <__aeabi_dadd+0x10c>
 80012e4:	1d2b      	adds	r3, r5, #4
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	41ad      	sbcs	r5, r5
 80012ea:	426d      	negs	r5, r5
 80012ec:	1964      	adds	r4, r4, r5
 80012ee:	001d      	movs	r5, r3
 80012f0:	0223      	lsls	r3, r4, #8
 80012f2:	d400      	bmi.n	80012f6 <__aeabi_dadd+0x112>
 80012f4:	e12d      	b.n	8001552 <__aeabi_dadd+0x36e>
 80012f6:	4a9d      	ldr	r2, [pc, #628]	@ (800156c <__aeabi_dadd+0x388>)
 80012f8:	3701      	adds	r7, #1
 80012fa:	4297      	cmp	r7, r2
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x11c>
 80012fe:	e0d3      	b.n	80014a8 <__aeabi_dadd+0x2c4>
 8001300:	4646      	mov	r6, r8
 8001302:	499b      	ldr	r1, [pc, #620]	@ (8001570 <__aeabi_dadd+0x38c>)
 8001304:	08ed      	lsrs	r5, r5, #3
 8001306:	4021      	ands	r1, r4
 8001308:	074a      	lsls	r2, r1, #29
 800130a:	432a      	orrs	r2, r5
 800130c:	057c      	lsls	r4, r7, #21
 800130e:	024d      	lsls	r5, r1, #9
 8001310:	0b2d      	lsrs	r5, r5, #12
 8001312:	0d64      	lsrs	r4, r4, #21
 8001314:	0524      	lsls	r4, r4, #20
 8001316:	432c      	orrs	r4, r5
 8001318:	07f6      	lsls	r6, r6, #31
 800131a:	4334      	orrs	r4, r6
 800131c:	0010      	movs	r0, r2
 800131e:	0021      	movs	r1, r4
 8001320:	b003      	add	sp, #12
 8001322:	bcf0      	pop	{r4, r5, r6, r7}
 8001324:	46bb      	mov	fp, r7
 8001326:	46b2      	mov	sl, r6
 8001328:	46a9      	mov	r9, r5
 800132a:	46a0      	mov	r8, r4
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	2a00      	cmp	r2, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x150>
 8001332:	e084      	b.n	800143e <__aeabi_dadd+0x25a>
 8001334:	464a      	mov	r2, r9
 8001336:	1bd2      	subs	r2, r2, r7
 8001338:	2f00      	cmp	r7, #0
 800133a:	d000      	beq.n	800133e <__aeabi_dadd+0x15a>
 800133c:	e16d      	b.n	800161a <__aeabi_dadd+0x436>
 800133e:	0025      	movs	r5, r4
 8001340:	4305      	orrs	r5, r0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x162>
 8001344:	e127      	b.n	8001596 <__aeabi_dadd+0x3b2>
 8001346:	1e56      	subs	r6, r2, #1
 8001348:	2a01      	cmp	r2, #1
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0x16a>
 800134c:	e23b      	b.n	80017c6 <__aeabi_dadd+0x5e2>
 800134e:	4d87      	ldr	r5, [pc, #540]	@ (800156c <__aeabi_dadd+0x388>)
 8001350:	42aa      	cmp	r2, r5
 8001352:	d100      	bne.n	8001356 <__aeabi_dadd+0x172>
 8001354:	e26a      	b.n	800182c <__aeabi_dadd+0x648>
 8001356:	2501      	movs	r5, #1
 8001358:	2e38      	cmp	r6, #56	@ 0x38
 800135a:	dc12      	bgt.n	8001382 <__aeabi_dadd+0x19e>
 800135c:	0032      	movs	r2, r6
 800135e:	2a1f      	cmp	r2, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x180>
 8001362:	e1f8      	b.n	8001756 <__aeabi_dadd+0x572>
 8001364:	2620      	movs	r6, #32
 8001366:	0025      	movs	r5, r4
 8001368:	1ab6      	subs	r6, r6, r2
 800136a:	0007      	movs	r7, r0
 800136c:	4653      	mov	r3, sl
 800136e:	40b0      	lsls	r0, r6
 8001370:	40d4      	lsrs	r4, r2
 8001372:	40b5      	lsls	r5, r6
 8001374:	40d7      	lsrs	r7, r2
 8001376:	1e46      	subs	r6, r0, #1
 8001378:	41b0      	sbcs	r0, r6
 800137a:	1b1b      	subs	r3, r3, r4
 800137c:	469a      	mov	sl, r3
 800137e:	433d      	orrs	r5, r7
 8001380:	4305      	orrs	r5, r0
 8001382:	4662      	mov	r2, ip
 8001384:	1b55      	subs	r5, r2, r5
 8001386:	45ac      	cmp	ip, r5
 8001388:	4192      	sbcs	r2, r2
 800138a:	4653      	mov	r3, sl
 800138c:	4252      	negs	r2, r2
 800138e:	000e      	movs	r6, r1
 8001390:	464f      	mov	r7, r9
 8001392:	4688      	mov	r8, r1
 8001394:	1a9c      	subs	r4, r3, r2
 8001396:	e778      	b.n	800128a <__aeabi_dadd+0xa6>
 8001398:	2a00      	cmp	r2, #0
 800139a:	dc00      	bgt.n	800139e <__aeabi_dadd+0x1ba>
 800139c:	e08e      	b.n	80014bc <__aeabi_dadd+0x2d8>
 800139e:	4649      	mov	r1, r9
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d175      	bne.n	8001490 <__aeabi_dadd+0x2ac>
 80013a4:	4661      	mov	r1, ip
 80013a6:	4653      	mov	r3, sl
 80013a8:	4319      	orrs	r1, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x1ca>
 80013ac:	e0f6      	b.n	800159c <__aeabi_dadd+0x3b8>
 80013ae:	1e51      	subs	r1, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x1d2>
 80013b4:	e191      	b.n	80016da <__aeabi_dadd+0x4f6>
 80013b6:	4d6d      	ldr	r5, [pc, #436]	@ (800156c <__aeabi_dadd+0x388>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x1da>
 80013bc:	e0dc      	b.n	8001578 <__aeabi_dadd+0x394>
 80013be:	2501      	movs	r5, #1
 80013c0:	2938      	cmp	r1, #56	@ 0x38
 80013c2:	dc14      	bgt.n	80013ee <__aeabi_dadd+0x20a>
 80013c4:	000a      	movs	r2, r1
 80013c6:	2a1f      	cmp	r2, #31
 80013c8:	dd00      	ble.n	80013cc <__aeabi_dadd+0x1e8>
 80013ca:	e1a2      	b.n	8001712 <__aeabi_dadd+0x52e>
 80013cc:	2120      	movs	r1, #32
 80013ce:	4653      	mov	r3, sl
 80013d0:	1a89      	subs	r1, r1, r2
 80013d2:	408b      	lsls	r3, r1
 80013d4:	001d      	movs	r5, r3
 80013d6:	4663      	mov	r3, ip
 80013d8:	40d3      	lsrs	r3, r2
 80013da:	431d      	orrs	r5, r3
 80013dc:	4663      	mov	r3, ip
 80013de:	408b      	lsls	r3, r1
 80013e0:	0019      	movs	r1, r3
 80013e2:	1e4b      	subs	r3, r1, #1
 80013e4:	4199      	sbcs	r1, r3
 80013e6:	4653      	mov	r3, sl
 80013e8:	40d3      	lsrs	r3, r2
 80013ea:	430d      	orrs	r5, r1
 80013ec:	18e4      	adds	r4, r4, r3
 80013ee:	182d      	adds	r5, r5, r0
 80013f0:	4285      	cmp	r5, r0
 80013f2:	4180      	sbcs	r0, r0
 80013f4:	4240      	negs	r0, r0
 80013f6:	1824      	adds	r4, r4, r0
 80013f8:	0223      	lsls	r3, r4, #8
 80013fa:	d559      	bpl.n	80014b0 <__aeabi_dadd+0x2cc>
 80013fc:	4b5b      	ldr	r3, [pc, #364]	@ (800156c <__aeabi_dadd+0x388>)
 80013fe:	3701      	adds	r7, #1
 8001400:	429f      	cmp	r7, r3
 8001402:	d051      	beq.n	80014a8 <__aeabi_dadd+0x2c4>
 8001404:	2101      	movs	r1, #1
 8001406:	4b5a      	ldr	r3, [pc, #360]	@ (8001570 <__aeabi_dadd+0x38c>)
 8001408:	086a      	lsrs	r2, r5, #1
 800140a:	401c      	ands	r4, r3
 800140c:	4029      	ands	r1, r5
 800140e:	430a      	orrs	r2, r1
 8001410:	07e5      	lsls	r5, r4, #31
 8001412:	4315      	orrs	r5, r2
 8001414:	0864      	lsrs	r4, r4, #1
 8001416:	e75f      	b.n	80012d8 <__aeabi_dadd+0xf4>
 8001418:	4661      	mov	r1, ip
 800141a:	4653      	mov	r3, sl
 800141c:	4319      	orrs	r1, r3
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x23e>
 8001420:	e0bc      	b.n	800159c <__aeabi_dadd+0x3b8>
 8001422:	1e51      	subs	r1, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x246>
 8001428:	e164      	b.n	80016f4 <__aeabi_dadd+0x510>
 800142a:	4d50      	ldr	r5, [pc, #320]	@ (800156c <__aeabi_dadd+0x388>)
 800142c:	42aa      	cmp	r2, r5
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x24e>
 8001430:	e16a      	b.n	8001708 <__aeabi_dadd+0x524>
 8001432:	2501      	movs	r5, #1
 8001434:	2938      	cmp	r1, #56	@ 0x38
 8001436:	dd00      	ble.n	800143a <__aeabi_dadd+0x256>
 8001438:	e722      	b.n	8001280 <__aeabi_dadd+0x9c>
 800143a:	000a      	movs	r2, r1
 800143c:	e70e      	b.n	800125c <__aeabi_dadd+0x78>
 800143e:	4a4d      	ldr	r2, [pc, #308]	@ (8001574 <__aeabi_dadd+0x390>)
 8001440:	1c7d      	adds	r5, r7, #1
 8001442:	4215      	tst	r5, r2
 8001444:	d000      	beq.n	8001448 <__aeabi_dadd+0x264>
 8001446:	e0d0      	b.n	80015ea <__aeabi_dadd+0x406>
 8001448:	0025      	movs	r5, r4
 800144a:	4662      	mov	r2, ip
 800144c:	4653      	mov	r3, sl
 800144e:	4305      	orrs	r5, r0
 8001450:	431a      	orrs	r2, r3
 8001452:	2f00      	cmp	r7, #0
 8001454:	d000      	beq.n	8001458 <__aeabi_dadd+0x274>
 8001456:	e137      	b.n	80016c8 <__aeabi_dadd+0x4e4>
 8001458:	2d00      	cmp	r5, #0
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x27a>
 800145c:	e1a8      	b.n	80017b0 <__aeabi_dadd+0x5cc>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d100      	bne.n	8001464 <__aeabi_dadd+0x280>
 8001462:	e16a      	b.n	800173a <__aeabi_dadd+0x556>
 8001464:	4663      	mov	r3, ip
 8001466:	1ac5      	subs	r5, r0, r3
 8001468:	4653      	mov	r3, sl
 800146a:	1ae2      	subs	r2, r4, r3
 800146c:	42a8      	cmp	r0, r5
 800146e:	419b      	sbcs	r3, r3
 8001470:	425b      	negs	r3, r3
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	021a      	lsls	r2, r3, #8
 8001476:	d400      	bmi.n	800147a <__aeabi_dadd+0x296>
 8001478:	e203      	b.n	8001882 <__aeabi_dadd+0x69e>
 800147a:	4663      	mov	r3, ip
 800147c:	1a1d      	subs	r5, r3, r0
 800147e:	45ac      	cmp	ip, r5
 8001480:	4192      	sbcs	r2, r2
 8001482:	4653      	mov	r3, sl
 8001484:	4252      	negs	r2, r2
 8001486:	1b1c      	subs	r4, r3, r4
 8001488:	000e      	movs	r6, r1
 800148a:	4688      	mov	r8, r1
 800148c:	1aa4      	subs	r4, r4, r2
 800148e:	e723      	b.n	80012d8 <__aeabi_dadd+0xf4>
 8001490:	4936      	ldr	r1, [pc, #216]	@ (800156c <__aeabi_dadd+0x388>)
 8001492:	428f      	cmp	r7, r1
 8001494:	d070      	beq.n	8001578 <__aeabi_dadd+0x394>
 8001496:	2501      	movs	r5, #1
 8001498:	2a38      	cmp	r2, #56	@ 0x38
 800149a:	dca8      	bgt.n	80013ee <__aeabi_dadd+0x20a>
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	4653      	mov	r3, sl
 80014a0:	0409      	lsls	r1, r1, #16
 80014a2:	430b      	orrs	r3, r1
 80014a4:	469a      	mov	sl, r3
 80014a6:	e78e      	b.n	80013c6 <__aeabi_dadd+0x1e2>
 80014a8:	003c      	movs	r4, r7
 80014aa:	2500      	movs	r5, #0
 80014ac:	2200      	movs	r2, #0
 80014ae:	e731      	b.n	8001314 <__aeabi_dadd+0x130>
 80014b0:	2307      	movs	r3, #7
 80014b2:	402b      	ands	r3, r5
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x2d6>
 80014b8:	e710      	b.n	80012dc <__aeabi_dadd+0xf8>
 80014ba:	e093      	b.n	80015e4 <__aeabi_dadd+0x400>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d074      	beq.n	80015aa <__aeabi_dadd+0x3c6>
 80014c0:	464a      	mov	r2, r9
 80014c2:	1bd2      	subs	r2, r2, r7
 80014c4:	2f00      	cmp	r7, #0
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x2e6>
 80014c8:	e0c7      	b.n	800165a <__aeabi_dadd+0x476>
 80014ca:	4928      	ldr	r1, [pc, #160]	@ (800156c <__aeabi_dadd+0x388>)
 80014cc:	4589      	cmp	r9, r1
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x2ee>
 80014d0:	e185      	b.n	80017de <__aeabi_dadd+0x5fa>
 80014d2:	2501      	movs	r5, #1
 80014d4:	2a38      	cmp	r2, #56	@ 0x38
 80014d6:	dc12      	bgt.n	80014fe <__aeabi_dadd+0x31a>
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	430c      	orrs	r4, r1
 80014de:	2a1f      	cmp	r2, #31
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_dadd+0x300>
 80014e2:	e1ab      	b.n	800183c <__aeabi_dadd+0x658>
 80014e4:	2120      	movs	r1, #32
 80014e6:	0025      	movs	r5, r4
 80014e8:	1a89      	subs	r1, r1, r2
 80014ea:	0007      	movs	r7, r0
 80014ec:	4088      	lsls	r0, r1
 80014ee:	408d      	lsls	r5, r1
 80014f0:	40d7      	lsrs	r7, r2
 80014f2:	1e41      	subs	r1, r0, #1
 80014f4:	4188      	sbcs	r0, r1
 80014f6:	40d4      	lsrs	r4, r2
 80014f8:	433d      	orrs	r5, r7
 80014fa:	4305      	orrs	r5, r0
 80014fc:	44a2      	add	sl, r4
 80014fe:	4465      	add	r5, ip
 8001500:	4565      	cmp	r5, ip
 8001502:	4192      	sbcs	r2, r2
 8001504:	4252      	negs	r2, r2
 8001506:	4452      	add	r2, sl
 8001508:	0014      	movs	r4, r2
 800150a:	464f      	mov	r7, r9
 800150c:	e774      	b.n	80013f8 <__aeabi_dadd+0x214>
 800150e:	0028      	movs	r0, r5
 8001510:	f000 fa98 	bl	8001a44 <__clzsi2>
 8001514:	0003      	movs	r3, r0
 8001516:	3318      	adds	r3, #24
 8001518:	2b1f      	cmp	r3, #31
 800151a:	dc00      	bgt.n	800151e <__aeabi_dadd+0x33a>
 800151c:	e6c2      	b.n	80012a4 <__aeabi_dadd+0xc0>
 800151e:	002a      	movs	r2, r5
 8001520:	3808      	subs	r0, #8
 8001522:	4082      	lsls	r2, r0
 8001524:	429f      	cmp	r7, r3
 8001526:	dd00      	ble.n	800152a <__aeabi_dadd+0x346>
 8001528:	e0a9      	b.n	800167e <__aeabi_dadd+0x49a>
 800152a:	1bdb      	subs	r3, r3, r7
 800152c:	1c58      	adds	r0, r3, #1
 800152e:	281f      	cmp	r0, #31
 8001530:	dc00      	bgt.n	8001534 <__aeabi_dadd+0x350>
 8001532:	e1ac      	b.n	800188e <__aeabi_dadd+0x6aa>
 8001534:	0015      	movs	r5, r2
 8001536:	3b1f      	subs	r3, #31
 8001538:	40dd      	lsrs	r5, r3
 800153a:	2820      	cmp	r0, #32
 800153c:	d005      	beq.n	800154a <__aeabi_dadd+0x366>
 800153e:	2340      	movs	r3, #64	@ 0x40
 8001540:	1a1b      	subs	r3, r3, r0
 8001542:	409a      	lsls	r2, r3
 8001544:	1e53      	subs	r3, r2, #1
 8001546:	419a      	sbcs	r2, r3
 8001548:	4315      	orrs	r5, r2
 800154a:	2307      	movs	r3, #7
 800154c:	2700      	movs	r7, #0
 800154e:	402b      	ands	r3, r5
 8001550:	e7b0      	b.n	80014b4 <__aeabi_dadd+0x2d0>
 8001552:	08ed      	lsrs	r5, r5, #3
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <__aeabi_dadd+0x388>)
 8001556:	0762      	lsls	r2, r4, #29
 8001558:	432a      	orrs	r2, r5
 800155a:	08e4      	lsrs	r4, r4, #3
 800155c:	429f      	cmp	r7, r3
 800155e:	d00f      	beq.n	8001580 <__aeabi_dadd+0x39c>
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	0b25      	lsrs	r5, r4, #12
 8001564:	057c      	lsls	r4, r7, #21
 8001566:	0d64      	lsrs	r4, r4, #21
 8001568:	e6d4      	b.n	8001314 <__aeabi_dadd+0x130>
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	000007ff 	.word	0x000007ff
 8001570:	ff7fffff 	.word	0xff7fffff
 8001574:	000007fe 	.word	0x000007fe
 8001578:	08c0      	lsrs	r0, r0, #3
 800157a:	0762      	lsls	r2, r4, #29
 800157c:	4302      	orrs	r2, r0
 800157e:	08e4      	lsrs	r4, r4, #3
 8001580:	0013      	movs	r3, r2
 8001582:	4323      	orrs	r3, r4
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x3a4>
 8001586:	e186      	b.n	8001896 <__aeabi_dadd+0x6b2>
 8001588:	2580      	movs	r5, #128	@ 0x80
 800158a:	032d      	lsls	r5, r5, #12
 800158c:	4325      	orrs	r5, r4
 800158e:	032d      	lsls	r5, r5, #12
 8001590:	4cc3      	ldr	r4, [pc, #780]	@ (80018a0 <__aeabi_dadd+0x6bc>)
 8001592:	0b2d      	lsrs	r5, r5, #12
 8001594:	e6be      	b.n	8001314 <__aeabi_dadd+0x130>
 8001596:	4660      	mov	r0, ip
 8001598:	4654      	mov	r4, sl
 800159a:	000e      	movs	r6, r1
 800159c:	0017      	movs	r7, r2
 800159e:	08c5      	lsrs	r5, r0, #3
 80015a0:	e7d8      	b.n	8001554 <__aeabi_dadd+0x370>
 80015a2:	4cc0      	ldr	r4, [pc, #768]	@ (80018a4 <__aeabi_dadd+0x6c0>)
 80015a4:	1aff      	subs	r7, r7, r3
 80015a6:	4014      	ands	r4, r2
 80015a8:	e696      	b.n	80012d8 <__aeabi_dadd+0xf4>
 80015aa:	4abf      	ldr	r2, [pc, #764]	@ (80018a8 <__aeabi_dadd+0x6c4>)
 80015ac:	1c79      	adds	r1, r7, #1
 80015ae:	4211      	tst	r1, r2
 80015b0:	d16b      	bne.n	800168a <__aeabi_dadd+0x4a6>
 80015b2:	0022      	movs	r2, r4
 80015b4:	4302      	orrs	r2, r0
 80015b6:	2f00      	cmp	r7, #0
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x3d8>
 80015ba:	e0db      	b.n	8001774 <__aeabi_dadd+0x590>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x3de>
 80015c0:	e12d      	b.n	800181e <__aeabi_dadd+0x63a>
 80015c2:	4662      	mov	r2, ip
 80015c4:	4653      	mov	r3, sl
 80015c6:	431a      	orrs	r2, r3
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x3e8>
 80015ca:	e0b6      	b.n	800173a <__aeabi_dadd+0x556>
 80015cc:	4663      	mov	r3, ip
 80015ce:	18c5      	adds	r5, r0, r3
 80015d0:	4285      	cmp	r5, r0
 80015d2:	4180      	sbcs	r0, r0
 80015d4:	4454      	add	r4, sl
 80015d6:	4240      	negs	r0, r0
 80015d8:	1824      	adds	r4, r4, r0
 80015da:	0223      	lsls	r3, r4, #8
 80015dc:	d502      	bpl.n	80015e4 <__aeabi_dadd+0x400>
 80015de:	000f      	movs	r7, r1
 80015e0:	4bb0      	ldr	r3, [pc, #704]	@ (80018a4 <__aeabi_dadd+0x6c0>)
 80015e2:	401c      	ands	r4, r3
 80015e4:	003a      	movs	r2, r7
 80015e6:	0028      	movs	r0, r5
 80015e8:	e7d8      	b.n	800159c <__aeabi_dadd+0x3b8>
 80015ea:	4662      	mov	r2, ip
 80015ec:	1a85      	subs	r5, r0, r2
 80015ee:	42a8      	cmp	r0, r5
 80015f0:	4192      	sbcs	r2, r2
 80015f2:	4653      	mov	r3, sl
 80015f4:	4252      	negs	r2, r2
 80015f6:	4691      	mov	r9, r2
 80015f8:	1ae3      	subs	r3, r4, r3
 80015fa:	001a      	movs	r2, r3
 80015fc:	464b      	mov	r3, r9
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4691      	mov	r9, r2
 8001604:	021a      	lsls	r2, r3, #8
 8001606:	d454      	bmi.n	80016b2 <__aeabi_dadd+0x4ce>
 8001608:	464a      	mov	r2, r9
 800160a:	464c      	mov	r4, r9
 800160c:	432a      	orrs	r2, r5
 800160e:	d000      	beq.n	8001612 <__aeabi_dadd+0x42e>
 8001610:	e640      	b.n	8001294 <__aeabi_dadd+0xb0>
 8001612:	2600      	movs	r6, #0
 8001614:	2400      	movs	r4, #0
 8001616:	2500      	movs	r5, #0
 8001618:	e67c      	b.n	8001314 <__aeabi_dadd+0x130>
 800161a:	4da1      	ldr	r5, [pc, #644]	@ (80018a0 <__aeabi_dadd+0x6bc>)
 800161c:	45a9      	cmp	r9, r5
 800161e:	d100      	bne.n	8001622 <__aeabi_dadd+0x43e>
 8001620:	e090      	b.n	8001744 <__aeabi_dadd+0x560>
 8001622:	2501      	movs	r5, #1
 8001624:	2a38      	cmp	r2, #56	@ 0x38
 8001626:	dd00      	ble.n	800162a <__aeabi_dadd+0x446>
 8001628:	e6ab      	b.n	8001382 <__aeabi_dadd+0x19e>
 800162a:	2580      	movs	r5, #128	@ 0x80
 800162c:	042d      	lsls	r5, r5, #16
 800162e:	432c      	orrs	r4, r5
 8001630:	e695      	b.n	800135e <__aeabi_dadd+0x17a>
 8001632:	0011      	movs	r1, r2
 8001634:	4655      	mov	r5, sl
 8001636:	3920      	subs	r1, #32
 8001638:	40cd      	lsrs	r5, r1
 800163a:	46a9      	mov	r9, r5
 800163c:	2a20      	cmp	r2, #32
 800163e:	d006      	beq.n	800164e <__aeabi_dadd+0x46a>
 8001640:	2140      	movs	r1, #64	@ 0x40
 8001642:	4653      	mov	r3, sl
 8001644:	1a8a      	subs	r2, r1, r2
 8001646:	4093      	lsls	r3, r2
 8001648:	4662      	mov	r2, ip
 800164a:	431a      	orrs	r2, r3
 800164c:	4694      	mov	ip, r2
 800164e:	4665      	mov	r5, ip
 8001650:	1e6b      	subs	r3, r5, #1
 8001652:	419d      	sbcs	r5, r3
 8001654:	464b      	mov	r3, r9
 8001656:	431d      	orrs	r5, r3
 8001658:	e612      	b.n	8001280 <__aeabi_dadd+0x9c>
 800165a:	0021      	movs	r1, r4
 800165c:	4301      	orrs	r1, r0
 800165e:	d100      	bne.n	8001662 <__aeabi_dadd+0x47e>
 8001660:	e0c4      	b.n	80017ec <__aeabi_dadd+0x608>
 8001662:	1e51      	subs	r1, r2, #1
 8001664:	2a01      	cmp	r2, #1
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0x486>
 8001668:	e0fb      	b.n	8001862 <__aeabi_dadd+0x67e>
 800166a:	4d8d      	ldr	r5, [pc, #564]	@ (80018a0 <__aeabi_dadd+0x6bc>)
 800166c:	42aa      	cmp	r2, r5
 800166e:	d100      	bne.n	8001672 <__aeabi_dadd+0x48e>
 8001670:	e0b5      	b.n	80017de <__aeabi_dadd+0x5fa>
 8001672:	2501      	movs	r5, #1
 8001674:	2938      	cmp	r1, #56	@ 0x38
 8001676:	dd00      	ble.n	800167a <__aeabi_dadd+0x496>
 8001678:	e741      	b.n	80014fe <__aeabi_dadd+0x31a>
 800167a:	000a      	movs	r2, r1
 800167c:	e72f      	b.n	80014de <__aeabi_dadd+0x2fa>
 800167e:	4c89      	ldr	r4, [pc, #548]	@ (80018a4 <__aeabi_dadd+0x6c0>)
 8001680:	1aff      	subs	r7, r7, r3
 8001682:	4014      	ands	r4, r2
 8001684:	0762      	lsls	r2, r4, #29
 8001686:	08e4      	lsrs	r4, r4, #3
 8001688:	e76a      	b.n	8001560 <__aeabi_dadd+0x37c>
 800168a:	4a85      	ldr	r2, [pc, #532]	@ (80018a0 <__aeabi_dadd+0x6bc>)
 800168c:	4291      	cmp	r1, r2
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x4ae>
 8001690:	e0e3      	b.n	800185a <__aeabi_dadd+0x676>
 8001692:	4663      	mov	r3, ip
 8001694:	18c2      	adds	r2, r0, r3
 8001696:	4282      	cmp	r2, r0
 8001698:	4180      	sbcs	r0, r0
 800169a:	0023      	movs	r3, r4
 800169c:	4240      	negs	r0, r0
 800169e:	4453      	add	r3, sl
 80016a0:	181b      	adds	r3, r3, r0
 80016a2:	07dd      	lsls	r5, r3, #31
 80016a4:	085c      	lsrs	r4, r3, #1
 80016a6:	2307      	movs	r3, #7
 80016a8:	0852      	lsrs	r2, r2, #1
 80016aa:	4315      	orrs	r5, r2
 80016ac:	000f      	movs	r7, r1
 80016ae:	402b      	ands	r3, r5
 80016b0:	e700      	b.n	80014b4 <__aeabi_dadd+0x2d0>
 80016b2:	4663      	mov	r3, ip
 80016b4:	1a1d      	subs	r5, r3, r0
 80016b6:	45ac      	cmp	ip, r5
 80016b8:	4192      	sbcs	r2, r2
 80016ba:	4653      	mov	r3, sl
 80016bc:	4252      	negs	r2, r2
 80016be:	1b1c      	subs	r4, r3, r4
 80016c0:	000e      	movs	r6, r1
 80016c2:	4688      	mov	r8, r1
 80016c4:	1aa4      	subs	r4, r4, r2
 80016c6:	e5e5      	b.n	8001294 <__aeabi_dadd+0xb0>
 80016c8:	2d00      	cmp	r5, #0
 80016ca:	d000      	beq.n	80016ce <__aeabi_dadd+0x4ea>
 80016cc:	e091      	b.n	80017f2 <__aeabi_dadd+0x60e>
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d138      	bne.n	8001744 <__aeabi_dadd+0x560>
 80016d2:	2480      	movs	r4, #128	@ 0x80
 80016d4:	2600      	movs	r6, #0
 80016d6:	0324      	lsls	r4, r4, #12
 80016d8:	e756      	b.n	8001588 <__aeabi_dadd+0x3a4>
 80016da:	4663      	mov	r3, ip
 80016dc:	18c5      	adds	r5, r0, r3
 80016de:	4285      	cmp	r5, r0
 80016e0:	4180      	sbcs	r0, r0
 80016e2:	4454      	add	r4, sl
 80016e4:	4240      	negs	r0, r0
 80016e6:	1824      	adds	r4, r4, r0
 80016e8:	2701      	movs	r7, #1
 80016ea:	0223      	lsls	r3, r4, #8
 80016ec:	d400      	bmi.n	80016f0 <__aeabi_dadd+0x50c>
 80016ee:	e6df      	b.n	80014b0 <__aeabi_dadd+0x2cc>
 80016f0:	2702      	movs	r7, #2
 80016f2:	e687      	b.n	8001404 <__aeabi_dadd+0x220>
 80016f4:	4663      	mov	r3, ip
 80016f6:	1ac5      	subs	r5, r0, r3
 80016f8:	42a8      	cmp	r0, r5
 80016fa:	4180      	sbcs	r0, r0
 80016fc:	4653      	mov	r3, sl
 80016fe:	4240      	negs	r0, r0
 8001700:	1ae4      	subs	r4, r4, r3
 8001702:	2701      	movs	r7, #1
 8001704:	1a24      	subs	r4, r4, r0
 8001706:	e5c0      	b.n	800128a <__aeabi_dadd+0xa6>
 8001708:	0762      	lsls	r2, r4, #29
 800170a:	08c0      	lsrs	r0, r0, #3
 800170c:	4302      	orrs	r2, r0
 800170e:	08e4      	lsrs	r4, r4, #3
 8001710:	e736      	b.n	8001580 <__aeabi_dadd+0x39c>
 8001712:	0011      	movs	r1, r2
 8001714:	4653      	mov	r3, sl
 8001716:	3920      	subs	r1, #32
 8001718:	40cb      	lsrs	r3, r1
 800171a:	4699      	mov	r9, r3
 800171c:	2a20      	cmp	r2, #32
 800171e:	d006      	beq.n	800172e <__aeabi_dadd+0x54a>
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	4653      	mov	r3, sl
 8001724:	1a8a      	subs	r2, r1, r2
 8001726:	4093      	lsls	r3, r2
 8001728:	4662      	mov	r2, ip
 800172a:	431a      	orrs	r2, r3
 800172c:	4694      	mov	ip, r2
 800172e:	4665      	mov	r5, ip
 8001730:	1e6b      	subs	r3, r5, #1
 8001732:	419d      	sbcs	r5, r3
 8001734:	464b      	mov	r3, r9
 8001736:	431d      	orrs	r5, r3
 8001738:	e659      	b.n	80013ee <__aeabi_dadd+0x20a>
 800173a:	0762      	lsls	r2, r4, #29
 800173c:	08c0      	lsrs	r0, r0, #3
 800173e:	4302      	orrs	r2, r0
 8001740:	08e4      	lsrs	r4, r4, #3
 8001742:	e70d      	b.n	8001560 <__aeabi_dadd+0x37c>
 8001744:	4653      	mov	r3, sl
 8001746:	075a      	lsls	r2, r3, #29
 8001748:	4663      	mov	r3, ip
 800174a:	08d8      	lsrs	r0, r3, #3
 800174c:	4653      	mov	r3, sl
 800174e:	000e      	movs	r6, r1
 8001750:	4302      	orrs	r2, r0
 8001752:	08dc      	lsrs	r4, r3, #3
 8001754:	e714      	b.n	8001580 <__aeabi_dadd+0x39c>
 8001756:	0015      	movs	r5, r2
 8001758:	0026      	movs	r6, r4
 800175a:	3d20      	subs	r5, #32
 800175c:	40ee      	lsrs	r6, r5
 800175e:	2a20      	cmp	r2, #32
 8001760:	d003      	beq.n	800176a <__aeabi_dadd+0x586>
 8001762:	2540      	movs	r5, #64	@ 0x40
 8001764:	1aaa      	subs	r2, r5, r2
 8001766:	4094      	lsls	r4, r2
 8001768:	4320      	orrs	r0, r4
 800176a:	1e42      	subs	r2, r0, #1
 800176c:	4190      	sbcs	r0, r2
 800176e:	0005      	movs	r5, r0
 8001770:	4335      	orrs	r5, r6
 8001772:	e606      	b.n	8001382 <__aeabi_dadd+0x19e>
 8001774:	2a00      	cmp	r2, #0
 8001776:	d07c      	beq.n	8001872 <__aeabi_dadd+0x68e>
 8001778:	4662      	mov	r2, ip
 800177a:	4653      	mov	r3, sl
 800177c:	08c0      	lsrs	r0, r0, #3
 800177e:	431a      	orrs	r2, r3
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x5a0>
 8001782:	e6fa      	b.n	800157a <__aeabi_dadd+0x396>
 8001784:	0762      	lsls	r2, r4, #29
 8001786:	4310      	orrs	r0, r2
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	08e4      	lsrs	r4, r4, #3
 800178c:	0312      	lsls	r2, r2, #12
 800178e:	4214      	tst	r4, r2
 8001790:	d008      	beq.n	80017a4 <__aeabi_dadd+0x5c0>
 8001792:	08d9      	lsrs	r1, r3, #3
 8001794:	4211      	tst	r1, r2
 8001796:	d105      	bne.n	80017a4 <__aeabi_dadd+0x5c0>
 8001798:	4663      	mov	r3, ip
 800179a:	08d8      	lsrs	r0, r3, #3
 800179c:	4653      	mov	r3, sl
 800179e:	000c      	movs	r4, r1
 80017a0:	075b      	lsls	r3, r3, #29
 80017a2:	4318      	orrs	r0, r3
 80017a4:	0f42      	lsrs	r2, r0, #29
 80017a6:	00c0      	lsls	r0, r0, #3
 80017a8:	08c0      	lsrs	r0, r0, #3
 80017aa:	0752      	lsls	r2, r2, #29
 80017ac:	4302      	orrs	r2, r0
 80017ae:	e6e7      	b.n	8001580 <__aeabi_dadd+0x39c>
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dadd+0x5d2>
 80017b4:	e72d      	b.n	8001612 <__aeabi_dadd+0x42e>
 80017b6:	4663      	mov	r3, ip
 80017b8:	08d8      	lsrs	r0, r3, #3
 80017ba:	4653      	mov	r3, sl
 80017bc:	075a      	lsls	r2, r3, #29
 80017be:	000e      	movs	r6, r1
 80017c0:	4302      	orrs	r2, r0
 80017c2:	08dc      	lsrs	r4, r3, #3
 80017c4:	e6cc      	b.n	8001560 <__aeabi_dadd+0x37c>
 80017c6:	4663      	mov	r3, ip
 80017c8:	1a1d      	subs	r5, r3, r0
 80017ca:	45ac      	cmp	ip, r5
 80017cc:	4192      	sbcs	r2, r2
 80017ce:	4653      	mov	r3, sl
 80017d0:	4252      	negs	r2, r2
 80017d2:	1b1c      	subs	r4, r3, r4
 80017d4:	000e      	movs	r6, r1
 80017d6:	4688      	mov	r8, r1
 80017d8:	1aa4      	subs	r4, r4, r2
 80017da:	3701      	adds	r7, #1
 80017dc:	e555      	b.n	800128a <__aeabi_dadd+0xa6>
 80017de:	4663      	mov	r3, ip
 80017e0:	08d9      	lsrs	r1, r3, #3
 80017e2:	4653      	mov	r3, sl
 80017e4:	075a      	lsls	r2, r3, #29
 80017e6:	430a      	orrs	r2, r1
 80017e8:	08dc      	lsrs	r4, r3, #3
 80017ea:	e6c9      	b.n	8001580 <__aeabi_dadd+0x39c>
 80017ec:	4660      	mov	r0, ip
 80017ee:	4654      	mov	r4, sl
 80017f0:	e6d4      	b.n	800159c <__aeabi_dadd+0x3b8>
 80017f2:	08c0      	lsrs	r0, r0, #3
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d100      	bne.n	80017fa <__aeabi_dadd+0x616>
 80017f8:	e6bf      	b.n	800157a <__aeabi_dadd+0x396>
 80017fa:	0762      	lsls	r2, r4, #29
 80017fc:	4310      	orrs	r0, r2
 80017fe:	2280      	movs	r2, #128	@ 0x80
 8001800:	08e4      	lsrs	r4, r4, #3
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	4214      	tst	r4, r2
 8001806:	d0cd      	beq.n	80017a4 <__aeabi_dadd+0x5c0>
 8001808:	08dd      	lsrs	r5, r3, #3
 800180a:	4215      	tst	r5, r2
 800180c:	d1ca      	bne.n	80017a4 <__aeabi_dadd+0x5c0>
 800180e:	4663      	mov	r3, ip
 8001810:	08d8      	lsrs	r0, r3, #3
 8001812:	4653      	mov	r3, sl
 8001814:	075b      	lsls	r3, r3, #29
 8001816:	000e      	movs	r6, r1
 8001818:	002c      	movs	r4, r5
 800181a:	4318      	orrs	r0, r3
 800181c:	e7c2      	b.n	80017a4 <__aeabi_dadd+0x5c0>
 800181e:	4663      	mov	r3, ip
 8001820:	08d9      	lsrs	r1, r3, #3
 8001822:	4653      	mov	r3, sl
 8001824:	075a      	lsls	r2, r3, #29
 8001826:	430a      	orrs	r2, r1
 8001828:	08dc      	lsrs	r4, r3, #3
 800182a:	e699      	b.n	8001560 <__aeabi_dadd+0x37c>
 800182c:	4663      	mov	r3, ip
 800182e:	08d8      	lsrs	r0, r3, #3
 8001830:	4653      	mov	r3, sl
 8001832:	075a      	lsls	r2, r3, #29
 8001834:	000e      	movs	r6, r1
 8001836:	4302      	orrs	r2, r0
 8001838:	08dc      	lsrs	r4, r3, #3
 800183a:	e6a1      	b.n	8001580 <__aeabi_dadd+0x39c>
 800183c:	0011      	movs	r1, r2
 800183e:	0027      	movs	r7, r4
 8001840:	3920      	subs	r1, #32
 8001842:	40cf      	lsrs	r7, r1
 8001844:	2a20      	cmp	r2, #32
 8001846:	d003      	beq.n	8001850 <__aeabi_dadd+0x66c>
 8001848:	2140      	movs	r1, #64	@ 0x40
 800184a:	1a8a      	subs	r2, r1, r2
 800184c:	4094      	lsls	r4, r2
 800184e:	4320      	orrs	r0, r4
 8001850:	1e42      	subs	r2, r0, #1
 8001852:	4190      	sbcs	r0, r2
 8001854:	0005      	movs	r5, r0
 8001856:	433d      	orrs	r5, r7
 8001858:	e651      	b.n	80014fe <__aeabi_dadd+0x31a>
 800185a:	000c      	movs	r4, r1
 800185c:	2500      	movs	r5, #0
 800185e:	2200      	movs	r2, #0
 8001860:	e558      	b.n	8001314 <__aeabi_dadd+0x130>
 8001862:	4460      	add	r0, ip
 8001864:	4560      	cmp	r0, ip
 8001866:	4192      	sbcs	r2, r2
 8001868:	4454      	add	r4, sl
 800186a:	4252      	negs	r2, r2
 800186c:	0005      	movs	r5, r0
 800186e:	18a4      	adds	r4, r4, r2
 8001870:	e73a      	b.n	80016e8 <__aeabi_dadd+0x504>
 8001872:	4653      	mov	r3, sl
 8001874:	075a      	lsls	r2, r3, #29
 8001876:	4663      	mov	r3, ip
 8001878:	08d9      	lsrs	r1, r3, #3
 800187a:	4653      	mov	r3, sl
 800187c:	430a      	orrs	r2, r1
 800187e:	08dc      	lsrs	r4, r3, #3
 8001880:	e67e      	b.n	8001580 <__aeabi_dadd+0x39c>
 8001882:	001a      	movs	r2, r3
 8001884:	001c      	movs	r4, r3
 8001886:	432a      	orrs	r2, r5
 8001888:	d000      	beq.n	800188c <__aeabi_dadd+0x6a8>
 800188a:	e6ab      	b.n	80015e4 <__aeabi_dadd+0x400>
 800188c:	e6c1      	b.n	8001612 <__aeabi_dadd+0x42e>
 800188e:	2120      	movs	r1, #32
 8001890:	2500      	movs	r5, #0
 8001892:	1a09      	subs	r1, r1, r0
 8001894:	e519      	b.n	80012ca <__aeabi_dadd+0xe6>
 8001896:	2200      	movs	r2, #0
 8001898:	2500      	movs	r5, #0
 800189a:	4c01      	ldr	r4, [pc, #4]	@ (80018a0 <__aeabi_dadd+0x6bc>)
 800189c:	e53a      	b.n	8001314 <__aeabi_dadd+0x130>
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff
 80018a4:	ff7fffff 	.word	0xff7fffff
 80018a8:	000007fe 	.word	0x000007fe

080018ac <__aeabi_f2d>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	0242      	lsls	r2, r0, #9
 80018b0:	0043      	lsls	r3, r0, #1
 80018b2:	0fc4      	lsrs	r4, r0, #31
 80018b4:	20fe      	movs	r0, #254	@ 0xfe
 80018b6:	0e1b      	lsrs	r3, r3, #24
 80018b8:	1c59      	adds	r1, r3, #1
 80018ba:	0a55      	lsrs	r5, r2, #9
 80018bc:	4208      	tst	r0, r1
 80018be:	d00c      	beq.n	80018da <__aeabi_f2d+0x2e>
 80018c0:	21e0      	movs	r1, #224	@ 0xe0
 80018c2:	0089      	lsls	r1, r1, #2
 80018c4:	468c      	mov	ip, r1
 80018c6:	076d      	lsls	r5, r5, #29
 80018c8:	0b12      	lsrs	r2, r2, #12
 80018ca:	4463      	add	r3, ip
 80018cc:	051b      	lsls	r3, r3, #20
 80018ce:	4313      	orrs	r3, r2
 80018d0:	07e4      	lsls	r4, r4, #31
 80018d2:	4323      	orrs	r3, r4
 80018d4:	0028      	movs	r0, r5
 80018d6:	0019      	movs	r1, r3
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d114      	bne.n	8001908 <__aeabi_f2d+0x5c>
 80018de:	2d00      	cmp	r5, #0
 80018e0:	d01b      	beq.n	800191a <__aeabi_f2d+0x6e>
 80018e2:	0028      	movs	r0, r5
 80018e4:	f000 f8ae 	bl	8001a44 <__clzsi2>
 80018e8:	280a      	cmp	r0, #10
 80018ea:	dc1c      	bgt.n	8001926 <__aeabi_f2d+0x7a>
 80018ec:	230b      	movs	r3, #11
 80018ee:	002a      	movs	r2, r5
 80018f0:	1a1b      	subs	r3, r3, r0
 80018f2:	40da      	lsrs	r2, r3
 80018f4:	0003      	movs	r3, r0
 80018f6:	3315      	adds	r3, #21
 80018f8:	409d      	lsls	r5, r3
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <__aeabi_f2d+0x88>)
 80018fc:	0312      	lsls	r2, r2, #12
 80018fe:	1a1b      	subs	r3, r3, r0
 8001900:	055b      	lsls	r3, r3, #21
 8001902:	0b12      	lsrs	r2, r2, #12
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	e7e1      	b.n	80018cc <__aeabi_f2d+0x20>
 8001908:	2d00      	cmp	r5, #0
 800190a:	d009      	beq.n	8001920 <__aeabi_f2d+0x74>
 800190c:	0b13      	lsrs	r3, r2, #12
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	0312      	lsls	r2, r2, #12
 8001912:	431a      	orrs	r2, r3
 8001914:	076d      	lsls	r5, r5, #29
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <__aeabi_f2d+0x8c>)
 8001918:	e7d8      	b.n	80018cc <__aeabi_f2d+0x20>
 800191a:	2300      	movs	r3, #0
 800191c:	2200      	movs	r2, #0
 800191e:	e7d5      	b.n	80018cc <__aeabi_f2d+0x20>
 8001920:	2200      	movs	r2, #0
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <__aeabi_f2d+0x8c>)
 8001924:	e7d2      	b.n	80018cc <__aeabi_f2d+0x20>
 8001926:	0003      	movs	r3, r0
 8001928:	002a      	movs	r2, r5
 800192a:	3b0b      	subs	r3, #11
 800192c:	409a      	lsls	r2, r3
 800192e:	2500      	movs	r5, #0
 8001930:	e7e3      	b.n	80018fa <__aeabi_f2d+0x4e>
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	00000389 	.word	0x00000389
 8001938:	000007ff 	.word	0x000007ff

0800193c <__aeabi_d2f>:
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	004b      	lsls	r3, r1, #1
 8001940:	030f      	lsls	r7, r1, #12
 8001942:	0d5b      	lsrs	r3, r3, #21
 8001944:	4c3b      	ldr	r4, [pc, #236]	@ (8001a34 <__aeabi_d2f+0xf8>)
 8001946:	0f45      	lsrs	r5, r0, #29
 8001948:	b083      	sub	sp, #12
 800194a:	0a7f      	lsrs	r7, r7, #9
 800194c:	1c5e      	adds	r6, r3, #1
 800194e:	432f      	orrs	r7, r5
 8001950:	9000      	str	r0, [sp, #0]
 8001952:	9101      	str	r1, [sp, #4]
 8001954:	0fca      	lsrs	r2, r1, #31
 8001956:	00c5      	lsls	r5, r0, #3
 8001958:	4226      	tst	r6, r4
 800195a:	d00b      	beq.n	8001974 <__aeabi_d2f+0x38>
 800195c:	4936      	ldr	r1, [pc, #216]	@ (8001a38 <__aeabi_d2f+0xfc>)
 800195e:	185c      	adds	r4, r3, r1
 8001960:	2cfe      	cmp	r4, #254	@ 0xfe
 8001962:	dd13      	ble.n	800198c <__aeabi_d2f+0x50>
 8001964:	20ff      	movs	r0, #255	@ 0xff
 8001966:	2300      	movs	r3, #0
 8001968:	05c0      	lsls	r0, r0, #23
 800196a:	4318      	orrs	r0, r3
 800196c:	07d2      	lsls	r2, r2, #31
 800196e:	4310      	orrs	r0, r2
 8001970:	b003      	add	sp, #12
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <__aeabi_d2f+0x42>
 8001978:	2000      	movs	r0, #0
 800197a:	2300      	movs	r3, #0
 800197c:	e7f4      	b.n	8001968 <__aeabi_d2f+0x2c>
 800197e:	433d      	orrs	r5, r7
 8001980:	d0f0      	beq.n	8001964 <__aeabi_d2f+0x28>
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	03db      	lsls	r3, r3, #15
 8001986:	20ff      	movs	r0, #255	@ 0xff
 8001988:	433b      	orrs	r3, r7
 800198a:	e7ed      	b.n	8001968 <__aeabi_d2f+0x2c>
 800198c:	2c00      	cmp	r4, #0
 800198e:	dd14      	ble.n	80019ba <__aeabi_d2f+0x7e>
 8001990:	9b00      	ldr	r3, [sp, #0]
 8001992:	00ff      	lsls	r7, r7, #3
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	4183      	sbcs	r3, r0
 800199a:	0f69      	lsrs	r1, r5, #29
 800199c:	433b      	orrs	r3, r7
 800199e:	430b      	orrs	r3, r1
 80019a0:	0759      	lsls	r1, r3, #29
 80019a2:	d041      	beq.n	8001a28 <__aeabi_d2f+0xec>
 80019a4:	210f      	movs	r1, #15
 80019a6:	4019      	ands	r1, r3
 80019a8:	2904      	cmp	r1, #4
 80019aa:	d028      	beq.n	80019fe <__aeabi_d2f+0xc2>
 80019ac:	3304      	adds	r3, #4
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	d525      	bpl.n	80019fe <__aeabi_d2f+0xc2>
 80019b2:	3401      	adds	r4, #1
 80019b4:	2300      	movs	r3, #0
 80019b6:	b2e0      	uxtb	r0, r4
 80019b8:	e7d6      	b.n	8001968 <__aeabi_d2f+0x2c>
 80019ba:	0021      	movs	r1, r4
 80019bc:	3117      	adds	r1, #23
 80019be:	dbdb      	blt.n	8001978 <__aeabi_d2f+0x3c>
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	201e      	movs	r0, #30
 80019c4:	0409      	lsls	r1, r1, #16
 80019c6:	4339      	orrs	r1, r7
 80019c8:	1b00      	subs	r0, r0, r4
 80019ca:	281f      	cmp	r0, #31
 80019cc:	dd1b      	ble.n	8001a06 <__aeabi_d2f+0xca>
 80019ce:	2602      	movs	r6, #2
 80019d0:	4276      	negs	r6, r6
 80019d2:	1b34      	subs	r4, r6, r4
 80019d4:	000e      	movs	r6, r1
 80019d6:	40e6      	lsrs	r6, r4
 80019d8:	0034      	movs	r4, r6
 80019da:	2820      	cmp	r0, #32
 80019dc:	d004      	beq.n	80019e8 <__aeabi_d2f+0xac>
 80019de:	4817      	ldr	r0, [pc, #92]	@ (8001a3c <__aeabi_d2f+0x100>)
 80019e0:	4684      	mov	ip, r0
 80019e2:	4463      	add	r3, ip
 80019e4:	4099      	lsls	r1, r3
 80019e6:	430d      	orrs	r5, r1
 80019e8:	002b      	movs	r3, r5
 80019ea:	1e59      	subs	r1, r3, #1
 80019ec:	418b      	sbcs	r3, r1
 80019ee:	4323      	orrs	r3, r4
 80019f0:	0759      	lsls	r1, r3, #29
 80019f2:	d015      	beq.n	8001a20 <__aeabi_d2f+0xe4>
 80019f4:	210f      	movs	r1, #15
 80019f6:	2400      	movs	r4, #0
 80019f8:	4019      	ands	r1, r3
 80019fa:	2904      	cmp	r1, #4
 80019fc:	d117      	bne.n	8001a2e <__aeabi_d2f+0xf2>
 80019fe:	019b      	lsls	r3, r3, #6
 8001a00:	0a5b      	lsrs	r3, r3, #9
 8001a02:	b2e0      	uxtb	r0, r4
 8001a04:	e7b0      	b.n	8001968 <__aeabi_d2f+0x2c>
 8001a06:	4c0e      	ldr	r4, [pc, #56]	@ (8001a40 <__aeabi_d2f+0x104>)
 8001a08:	191c      	adds	r4, r3, r4
 8001a0a:	002b      	movs	r3, r5
 8001a0c:	40a5      	lsls	r5, r4
 8001a0e:	40c3      	lsrs	r3, r0
 8001a10:	40a1      	lsls	r1, r4
 8001a12:	1e68      	subs	r0, r5, #1
 8001a14:	4185      	sbcs	r5, r0
 8001a16:	4329      	orrs	r1, r5
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	0759      	lsls	r1, r3, #29
 8001a1e:	d1c1      	bne.n	80019a4 <__aeabi_d2f+0x68>
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	2000      	movs	r0, #0
 8001a24:	0a5b      	lsrs	r3, r3, #9
 8001a26:	e79f      	b.n	8001968 <__aeabi_d2f+0x2c>
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	b2e0      	uxtb	r0, r4
 8001a2c:	e79c      	b.n	8001968 <__aeabi_d2f+0x2c>
 8001a2e:	3304      	adds	r3, #4
 8001a30:	e7e5      	b.n	80019fe <__aeabi_d2f+0xc2>
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	000007fe 	.word	0x000007fe
 8001a38:	fffffc80 	.word	0xfffffc80
 8001a3c:	fffffca2 	.word	0xfffffca2
 8001a40:	fffffc82 	.word	0xfffffc82

08001a44 <__clzsi2>:
 8001a44:	211c      	movs	r1, #28
 8001a46:	2301      	movs	r3, #1
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	4298      	cmp	r0, r3
 8001a4c:	d301      	bcc.n	8001a52 <__clzsi2+0xe>
 8001a4e:	0c00      	lsrs	r0, r0, #16
 8001a50:	3910      	subs	r1, #16
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d301      	bcc.n	8001a5c <__clzsi2+0x18>
 8001a58:	0a00      	lsrs	r0, r0, #8
 8001a5a:	3908      	subs	r1, #8
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	4298      	cmp	r0, r3
 8001a60:	d301      	bcc.n	8001a66 <__clzsi2+0x22>
 8001a62:	0900      	lsrs	r0, r0, #4
 8001a64:	3904      	subs	r1, #4
 8001a66:	a202      	add	r2, pc, #8	@ (adr r2, 8001a70 <__clzsi2+0x2c>)
 8001a68:	5c10      	ldrb	r0, [r2, r0]
 8001a6a:	1840      	adds	r0, r0, r1
 8001a6c:	4770      	bx	lr
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	02020304 	.word	0x02020304
 8001a74:	01010101 	.word	0x01010101
	...

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a86:	f000 fe66 	bl	8002756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8a:	f000 f873 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8e:	f000 f9b3 	bl	8001df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a92:	f000 f993 	bl	8001dbc <MX_DMA_Init>
  MX_TIM3_Init();
 8001a96:	f000 f8b5 	bl	8001c04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a9a:	f000 f939 	bl	8001d10 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, data, 6);
 8001a9e:	4924      	ldr	r1, [pc, #144]	@ (8001b30 <main+0xb0>)
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <main+0xb4>)
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f003 fbf1 	bl	800528c <HAL_UART_Receive_IT>
  while (1)
  {
	  if (new_value) {
 8001aaa:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <main+0xb8>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0fb      	beq.n	8001aaa <main+0x2a>
		  new_value = 0;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <main+0xb8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
		  for (float i = 0; i < 1.0; i += 0.02) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	e02e      	b.n	8001b1c <main+0x9c>
			  for (int j = 0; j < NUM_LEDS; j++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	e010      	b.n	8001ae6 <main+0x66>
				  send_data_hue(j, 0, 1.0, 1.0 - i);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2dc      	uxtb	r4, r3
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	20fe      	movs	r0, #254	@ 0xfe
 8001acc:	0580      	lsls	r0, r0, #22
 8001ace:	f7ff f979 	bl	8000dc4 <__aeabi_fsub>
 8001ad2:	1c03      	adds	r3, r0, #0
 8001ad4:	22fe      	movs	r2, #254	@ 0xfe
 8001ad6:	0592      	lsls	r2, r2, #22
 8001ad8:	2100      	movs	r1, #0
 8001ada:	0020      	movs	r0, r4
 8001adc:	f000 fb4a 	bl	8002174 <send_data_hue>
			  for (int j = 0; j < NUM_LEDS; j++) {
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	ddeb      	ble.n	8001ac4 <main+0x44>
			  }
			  show_leds();
 8001aec:	f000 fd9a 	bl	8002624 <show_leds>
			  if (new_value) break;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <main+0xb8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d119      	bne.n	8001b2c <main+0xac>
			  HAL_Delay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f000 fea9 	bl	8002850 <HAL_Delay>
		  for (float i = 0; i < 1.0; i += 0.02) {
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fed4 	bl	80018ac <__aeabi_f2d>
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <main+0xbc>)
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <main+0xc0>)
 8001b08:	f7ff fb6c 	bl	80011e4 <__aeabi_dadd>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	000b      	movs	r3, r1
 8001b10:	0010      	movs	r0, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	f7ff ff12 	bl	800193c <__aeabi_d2f>
 8001b18:	1c03      	adds	r3, r0, #0
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	21fe      	movs	r1, #254	@ 0xfe
 8001b1e:	0589      	lsls	r1, r1, #22
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fc79 	bl	8000418 <__aeabi_fcmplt>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d1c9      	bne.n	8001abe <main+0x3e>
 8001b2a:	e7be      	b.n	8001aaa <main+0x2a>
			  if (new_value) break;
 8001b2c:	46c0      	nop			@ (mov r8, r8)
	  if (new_value) {
 8001b2e:	e7bc      	b.n	8001aaa <main+0x2a>
 8001b30:	20000000 	.word	0x20000000
 8001b34:	200000d8 	.word	0x200000d8
 8001b38:	2000016c 	.word	0x2000016c
 8001b3c:	47ae147b 	.word	0x47ae147b
 8001b40:	3f947ae1 	.word	0x3f947ae1

08001b44 <HAL_UART_RxCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	new_value = 1;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_UART_RxCpltCallback+0x24>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, data, 6);
 8001b52:	4906      	ldr	r1, [pc, #24]	@ (8001b6c <HAL_UART_RxCpltCallback+0x28>)
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_UART_RxCpltCallback+0x2c>)
 8001b56:	2206      	movs	r2, #6
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f003 fb97 	bl	800528c <HAL_UART_Receive_IT>
}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	2000016c 	.word	0x2000016c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	200000d8 	.word	0x200000d8

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b08d      	sub	sp, #52	@ 0x34
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	2414      	movs	r4, #20
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	0018      	movs	r0, r3
 8001b80:	231c      	movs	r3, #28
 8001b82:	001a      	movs	r2, r3
 8001b84:	2100      	movs	r1, #0
 8001b86:	f005 fa7b 	bl	8007080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8a:	003b      	movs	r3, r7
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2314      	movs	r3, #20
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f005 fa74 	bl	8007080 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <SystemClock_Config+0x8c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <SystemClock_Config+0x8c>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	0252      	lsls	r2, r2, #9
 8001bb6:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	193b      	adds	r3, r7, r4
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f001 fc0a 	bl	80033d4 <HAL_RCC_OscConfig>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001bc4:	f000 f97c 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	003b      	movs	r3, r7
 8001bca:	2207      	movs	r2, #7
 8001bcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001bda:	003b      	movs	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001be0:	003b      	movs	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be6:	003b      	movs	r3, r7
 8001be8:	2101      	movs	r1, #1
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 fdd6 	bl	800379c <HAL_RCC_ClockConfig>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001bf4:	f000 f964 	bl	8001ec0 <Error_Handler>
  }
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b00d      	add	sp, #52	@ 0x34
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	40022000 	.word	0x40022000

08001c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	@ 0x38
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	2328      	movs	r3, #40	@ 0x28
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2310      	movs	r3, #16
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f005 fa33 	bl	8007080 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	231c      	movs	r3, #28
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	0018      	movs	r0, r3
 8001c20:	230c      	movs	r3, #12
 8001c22:	001a      	movs	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f005 fa2b 	bl	8007080 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	231c      	movs	r3, #28
 8001c30:	001a      	movs	r2, r3
 8001c32:	2100      	movs	r1, #0
 8001c34:	f005 fa24 	bl	8007080 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c38:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c3a:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <MX_TIM3_Init+0x108>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c3e:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b30      	ldr	r3, [pc, #192]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60-1;
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c4c:	223b      	movs	r2, #59	@ 0x3b
 8001c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f001 fffe 	bl	8003c60 <HAL_TIM_Base_Init>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c68:	f000 f92a 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	2128      	movs	r1, #40	@ 0x28
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	0152      	lsls	r2, r2, #5
 8001c74:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c76:	187a      	adds	r2, r7, r1
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f002 fcc5 	bl	800460c <HAL_TIM_ConfigClockSource>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c86:	f000 f91b 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 f885 	bl	8003d9c <HAL_TIM_PWM_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001c96:	f000 f913 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	211c      	movs	r1, #28
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca8:	187a      	adds	r2, r7, r1
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 fa34 	bl	800511c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001cb8:	f000 f902 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	2260      	movs	r2, #96	@ 0x60
 8001cc0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cc2:	003b      	movs	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	003b      	movs	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cce:	003b      	movs	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd4:	0039      	movs	r1, r7
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f002 fb96 	bl	800440c <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001ce4:	f000 f8ec 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f002 f810 	bl	8003d10 <HAL_TIM_Base_Start>
 8001cf0:	1e03      	subs	r3, r0, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM3_Init+0xf4>
    {
     	Error_Handler();
 8001cf4:	f000 f8e4 	bl	8001ec0 <Error_Handler>
    }
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <MX_TIM3_Init+0x104>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f000 f958 	bl	8001fb0 <HAL_TIM_MspPostInit>

}
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b00e      	add	sp, #56	@ 0x38
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d16:	4a28      	ldr	r2, [pc, #160]	@ (8001db8 <MX_USART1_UART_Init+0xa8>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d1c:	2296      	movs	r2, #150	@ 0x96
 8001d1e:	0192      	lsls	r2, r2, #6
 8001d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d36:	2204      	movs	r2, #4
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d58:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f003 fa40 	bl	80051e0 <HAL_UART_Init>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d64:	f000 f8ac 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f005 f8a7 	bl	8006ec0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d76:	f000 f8a3 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f005 f8de 	bl	8006f40 <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f000 f89a 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_USART1_UART_Init+0xa4>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f005 f85c 	bl	8006e4c <HAL_UARTEx_DisableFifoMode>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f892 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	201b      	movs	r0, #27
 8001da2:	f000 fe25 	bl	80029f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da6:	201b      	movs	r0, #27
 8001da8:	f000 fe37 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	200000d8 	.word	0x200000d8
 8001db8:	40013800 	.word	0x40013800

08001dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_DMA_Init+0x38>)
 8001dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_DMA_Init+0x38>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_DMA_Init+0x38>)
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	200a      	movs	r0, #10
 8001de0:	f000 fe06 	bl	80029f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001de4:	200a      	movs	r0, #10
 8001de6:	f000 fe18 	bl	8002a1a <HAL_NVIC_EnableIRQ>

}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	240c      	movs	r4, #12
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	0018      	movs	r0, r3
 8001e04:	2314      	movs	r3, #20
 8001e06:	001a      	movs	r2, r3
 8001e08:	2100      	movs	r1, #0
 8001e0a:	f005 f939 	bl	8007080 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e12:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e14:	2104      	movs	r1, #4
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1a:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1e:	2204      	movs	r2, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e2a:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e36:	2220      	movs	r2, #32
 8001e38:	4013      	ands	r3, r2
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_GPIO_Init+0xbc>)
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001e56:	23a0      	movs	r3, #160	@ 0xa0
 8001e58:	05db      	lsls	r3, r3, #23
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f001 fa9a 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	0192      	lsls	r2, r2, #6
 8001e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e6c:	193b      	adds	r3, r7, r4
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <MX_GPIO_Init+0xc0>)
 8001e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <MX_GPIO_Init+0xc4>)
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0010      	movs	r0, r2
 8001e80:	f001 f918 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001e84:	0021      	movs	r1, r4
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	2220      	movs	r2, #32
 8001e8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2201      	movs	r2, #1
 8001e90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	187a      	adds	r2, r7, r1
 8001ea0:	23a0      	movs	r3, #160	@ 0xa0
 8001ea2:	05db      	lsls	r3, r3, #23
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f001 f904 	bl	80030b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b009      	add	sp, #36	@ 0x24
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	10110000 	.word	0x10110000
 8001ebc:	50000800 	.word	0x50000800

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	e7fd      	b.n	8001ec8 <Error_Handler+0x8>

08001ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_MspInit+0x44>)
 8001eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	0549      	lsls	r1, r1, #21
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_MspInit+0x44>)
 8001efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	055b      	lsls	r3, r3, #21
 8001f00:	4013      	ands	r3, r2
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x8c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d137      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f26:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x90>)
 8001f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x90>)
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x90>)
 8001f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel2;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f40:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <HAL_TIM_Base_MspInit+0x98>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f46:	2220      	movs	r2, #32
 8001f48:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f64:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	0192      	lsls	r2, r2, #6
 8001f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 fd69 	bl	8002a54 <HAL_DMA_Init>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001f86:	f7ff ff9b 	bl	8001ec0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	2000007c 	.word	0x2000007c
 8001fac:	4002001c 	.word	0x4002001c

08001fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	240c      	movs	r4, #12
 8001fba:	193b      	adds	r3, r7, r4
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	2314      	movs	r3, #20
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f005 f85c 	bl	8007080 <memset>
  if(htim->Instance==TIM3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <HAL_TIM_MspPostInit+0x70>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_TIM_MspPostInit+0x74>)
 8001fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd6:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <HAL_TIM_MspPostInit+0x74>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_TIM_MspPostInit+0x74>)
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = WS2812b_Data_Pin_Pin;
 8001fea:	0021      	movs	r1, r4
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2201      	movs	r2, #1
 8002008:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WS2812b_Data_Pin_GPIO_Port, &GPIO_InitStruct);
 800200a:	187a      	adds	r2, r7, r1
 800200c:	23a0      	movs	r3, #160	@ 0xa0
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	0011      	movs	r1, r2
 8002012:	0018      	movs	r0, r3
 8002014:	f001 f84e 	bl	80030b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b009      	add	sp, #36	@ 0x24
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	40000400 	.word	0x40000400
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b091      	sub	sp, #68	@ 0x44
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	232c      	movs	r3, #44	@ 0x2c
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	0018      	movs	r0, r3
 8002036:	2314      	movs	r3, #20
 8002038:	001a      	movs	r2, r3
 800203a:	2100      	movs	r1, #0
 800203c:	f005 f820 	bl	8007080 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002040:	2410      	movs	r4, #16
 8002042:	193b      	adds	r3, r7, r4
 8002044:	0018      	movs	r0, r3
 8002046:	231c      	movs	r3, #28
 8002048:	001a      	movs	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	f005 f818 	bl	8007080 <memset>
  if(huart->Instance==USART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a26      	ldr	r2, [pc, #152]	@ (80020f0 <HAL_UART_MspInit+0xc8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d146      	bne.n	80020e8 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800205a:	193b      	adds	r3, r7, r4
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002060:	193b      	adds	r3, r7, r4
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002066:	193b      	adds	r3, r7, r4
 8002068:	0018      	movs	r0, r3
 800206a:	f001 fd0d 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002072:	f7ff ff25 	bl	8001ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002076:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 8002078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	01c9      	lsls	r1, r1, #7
 8002080:	430a      	orrs	r2, r1
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 8002086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	01db      	lsls	r3, r3, #7
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 8002094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002096:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	@ 0x34
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_UART_MspInit+0xcc>)
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020aa:	212c      	movs	r1, #44	@ 0x2c
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2203      	movs	r2, #3
 80020b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2202      	movs	r2, #2
 80020b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2204      	movs	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	187a      	adds	r2, r7, r1
 80020cc:	23a0      	movs	r3, #160	@ 0xa0
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 ffee 	bl	80030b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	201b      	movs	r0, #27
 80020de:	f000 fc87 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e2:	201b      	movs	r0, #27
 80020e4:	f000 fc99 	bl	8002a1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b011      	add	sp, #68	@ 0x44
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40021000 	.word	0x40021000

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	e7fd      	b.n	80020fc <NMI_Handler+0x4>

08002100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	e7fd      	b.n	8002104 <HardFault_Handler+0x4>

08002108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 fb7a 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	46c0      	nop			@ (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fe7c 	bl	8002e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	2000007c 	.word	0x2000007c

08002144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <USART1_IRQHandler+0x14>)
 800214a:	0018      	movs	r0, r3
 800214c:	f003 f8f6 	bl	800533c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	200000d8 	.word	0x200000d8

0800215c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <SystemInit+0x14>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0512      	lsls	r2, r2, #20
 8002166:	609a      	str	r2, [r3, #8]
#endif
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <send_data_hue>:
 * @param saturation Saturation value 0 to 1.0
 * @param value Value value 0 to 1.0
 *
 * @retval None
 */
void send_data_hue(uint8_t led, uint16_t hue, float saturation, float value) {
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b08b      	sub	sp, #44	@ 0x2c
 8002178:	af00      	add	r7, sp, #0
 800217a:	60ba      	str	r2, [r7, #8]
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	240f      	movs	r4, #15
 8002180:	193b      	adds	r3, r7, r4
 8002182:	1c02      	adds	r2, r0, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	230c      	movs	r3, #12
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	1c0a      	adds	r2, r1, #0
 800218c:	801a      	strh	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 800218e:	193b      	adds	r3, r7, r4
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d901      	bls.n	800219a <send_data_hue+0x26>
		Error_Handler();
 8002196:	f7ff fe93 	bl	8001ec0 <Error_Handler>
	}

	float max_RGB = value;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
	float rgb_range = saturation * value;
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	68b8      	ldr	r0, [r7, #8]
 80021a2:	f7fe fcd1 	bl	8000b48 <__aeabi_fmul>
 80021a6:	1c03      	adds	r3, r0, #0
 80021a8:	623b      	str	r3, [r7, #32]
	float min_RGB = max_RGB - rgb_range;
 80021aa:	6a39      	ldr	r1, [r7, #32]
 80021ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021ae:	f7fe fe09 	bl	8000dc4 <__aeabi_fsub>
 80021b2:	1c03      	adds	r3, r0, #0
 80021b4:	61fb      	str	r3, [r7, #28]

	RGB_Value rgb = {0,0,0};
 80021b6:	2510      	movs	r5, #16
 80021b8:	197b      	adds	r3, r7, r5
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	197b      	adds	r3, r7, r5
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	197b      	adds	r3, r7, r5
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]

	if (hue >= 0 && hue < 60) {
 80021ca:	260c      	movs	r6, #12
 80021cc:	19bb      	adds	r3, r7, r6
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80021d2:	d83c      	bhi.n	800224e <send_data_hue+0xda>
	    rgb.R = 255 * max_RGB;
 80021d4:	49b7      	ldr	r1, [pc, #732]	@ (80024b4 <send_data_hue+0x340>)
 80021d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021d8:	f7fe fcb6 	bl	8000b48 <__aeabi_fmul>
 80021dc:	1c03      	adds	r3, r0, #0
 80021de:	1c18      	adds	r0, r3, #0
 80021e0:	f7fe ff94 	bl	800110c <__aeabi_f2iz>
 80021e4:	0002      	movs	r2, r0
 80021e6:	197b      	adds	r3, r7, r5
 80021e8:	601a      	str	r2, [r3, #0]
	    rgb.G = ((max_RGB - min_RGB) / 60 * hue + min_RGB) * 255;
 80021ea:	69f9      	ldr	r1, [r7, #28]
 80021ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021ee:	f7fe fde9 	bl	8000dc4 <__aeabi_fsub>
 80021f2:	1c03      	adds	r3, r0, #0
 80021f4:	49b0      	ldr	r1, [pc, #704]	@ (80024b8 <send_data_hue+0x344>)
 80021f6:	1c18      	adds	r0, r3, #0
 80021f8:	f7fe fac0 	bl	800077c <__aeabi_fdiv>
 80021fc:	1c03      	adds	r3, r0, #0
 80021fe:	1c1c      	adds	r4, r3, #0
 8002200:	19bb      	adds	r3, r7, r6
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe ffa1 	bl	800114c <__aeabi_i2f>
 800220a:	1c03      	adds	r3, r0, #0
 800220c:	1c19      	adds	r1, r3, #0
 800220e:	1c20      	adds	r0, r4, #0
 8002210:	f7fe fc9a 	bl	8000b48 <__aeabi_fmul>
 8002214:	1c03      	adds	r3, r0, #0
 8002216:	69f9      	ldr	r1, [r7, #28]
 8002218:	1c18      	adds	r0, r3, #0
 800221a:	f7fe f925 	bl	8000468 <__aeabi_fadd>
 800221e:	1c03      	adds	r3, r0, #0
 8002220:	49a4      	ldr	r1, [pc, #656]	@ (80024b4 <send_data_hue+0x340>)
 8002222:	1c18      	adds	r0, r3, #0
 8002224:	f7fe fc90 	bl	8000b48 <__aeabi_fmul>
 8002228:	1c03      	adds	r3, r0, #0
 800222a:	1c18      	adds	r0, r3, #0
 800222c:	f7fe ff6e 	bl	800110c <__aeabi_f2iz>
 8002230:	0002      	movs	r2, r0
 8002232:	197b      	adds	r3, r7, r5
 8002234:	605a      	str	r2, [r3, #4]
	    rgb.B = min_RGB * 255;
 8002236:	499f      	ldr	r1, [pc, #636]	@ (80024b4 <send_data_hue+0x340>)
 8002238:	69f8      	ldr	r0, [r7, #28]
 800223a:	f7fe fc85 	bl	8000b48 <__aeabi_fmul>
 800223e:	1c03      	adds	r3, r0, #0
 8002240:	1c18      	adds	r0, r3, #0
 8002242:	f7fe ff63 	bl	800110c <__aeabi_f2iz>
 8002246:	0002      	movs	r2, r0
 8002248:	197b      	adds	r3, r7, r5
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e189      	b.n	8002562 <send_data_hue+0x3ee>
	}
	else if (hue >= 60 && hue < 120) {
 800224e:	250c      	movs	r5, #12
 8002250:	197b      	adds	r3, r7, r5
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2b3b      	cmp	r3, #59	@ 0x3b
 8002256:	d946      	bls.n	80022e6 <send_data_hue+0x172>
 8002258:	197b      	adds	r3, r7, r5
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	2b77      	cmp	r3, #119	@ 0x77
 800225e:	d842      	bhi.n	80022e6 <send_data_hue+0x172>
	    rgb.R = ((max_RGB - min_RGB) / 60 * (120.0f - hue) + min_RGB) * 255;
 8002260:	69f9      	ldr	r1, [r7, #28]
 8002262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002264:	f7fe fdae 	bl	8000dc4 <__aeabi_fsub>
 8002268:	1c03      	adds	r3, r0, #0
 800226a:	4993      	ldr	r1, [pc, #588]	@ (80024b8 <send_data_hue+0x344>)
 800226c:	1c18      	adds	r0, r3, #0
 800226e:	f7fe fa85 	bl	800077c <__aeabi_fdiv>
 8002272:	1c03      	adds	r3, r0, #0
 8002274:	1c1c      	adds	r4, r3, #0
 8002276:	197b      	adds	r3, r7, r5
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	0018      	movs	r0, r3
 800227c:	f7fe ff66 	bl	800114c <__aeabi_i2f>
 8002280:	1c03      	adds	r3, r0, #0
 8002282:	1c19      	adds	r1, r3, #0
 8002284:	488d      	ldr	r0, [pc, #564]	@ (80024bc <send_data_hue+0x348>)
 8002286:	f7fe fd9d 	bl	8000dc4 <__aeabi_fsub>
 800228a:	1c03      	adds	r3, r0, #0
 800228c:	1c19      	adds	r1, r3, #0
 800228e:	1c20      	adds	r0, r4, #0
 8002290:	f7fe fc5a 	bl	8000b48 <__aeabi_fmul>
 8002294:	1c03      	adds	r3, r0, #0
 8002296:	69f9      	ldr	r1, [r7, #28]
 8002298:	1c18      	adds	r0, r3, #0
 800229a:	f7fe f8e5 	bl	8000468 <__aeabi_fadd>
 800229e:	1c03      	adds	r3, r0, #0
 80022a0:	4984      	ldr	r1, [pc, #528]	@ (80024b4 <send_data_hue+0x340>)
 80022a2:	1c18      	adds	r0, r3, #0
 80022a4:	f7fe fc50 	bl	8000b48 <__aeabi_fmul>
 80022a8:	1c03      	adds	r3, r0, #0
 80022aa:	1c18      	adds	r0, r3, #0
 80022ac:	f7fe ff2e 	bl	800110c <__aeabi_f2iz>
 80022b0:	0002      	movs	r2, r0
 80022b2:	2410      	movs	r4, #16
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	601a      	str	r2, [r3, #0]
	    rgb.G = 255 * max_RGB;
 80022b8:	497e      	ldr	r1, [pc, #504]	@ (80024b4 <send_data_hue+0x340>)
 80022ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022bc:	f7fe fc44 	bl	8000b48 <__aeabi_fmul>
 80022c0:	1c03      	adds	r3, r0, #0
 80022c2:	1c18      	adds	r0, r3, #0
 80022c4:	f7fe ff22 	bl	800110c <__aeabi_f2iz>
 80022c8:	0002      	movs	r2, r0
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	605a      	str	r2, [r3, #4]
	    rgb.B = min_RGB * 255;
 80022ce:	4979      	ldr	r1, [pc, #484]	@ (80024b4 <send_data_hue+0x340>)
 80022d0:	69f8      	ldr	r0, [r7, #28]
 80022d2:	f7fe fc39 	bl	8000b48 <__aeabi_fmul>
 80022d6:	1c03      	adds	r3, r0, #0
 80022d8:	1c18      	adds	r0, r3, #0
 80022da:	f7fe ff17 	bl	800110c <__aeabi_f2iz>
 80022de:	0002      	movs	r2, r0
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	e13d      	b.n	8002562 <send_data_hue+0x3ee>
	}
	else if (hue >= 120 && hue < 180) {
 80022e6:	250c      	movs	r5, #12
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2b77      	cmp	r3, #119	@ 0x77
 80022ee:	d946      	bls.n	800237e <send_data_hue+0x20a>
 80022f0:	197b      	adds	r3, r7, r5
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	2bb3      	cmp	r3, #179	@ 0xb3
 80022f6:	d842      	bhi.n	800237e <send_data_hue+0x20a>
	    rgb.R = min_RGB * 255;
 80022f8:	496e      	ldr	r1, [pc, #440]	@ (80024b4 <send_data_hue+0x340>)
 80022fa:	69f8      	ldr	r0, [r7, #28]
 80022fc:	f7fe fc24 	bl	8000b48 <__aeabi_fmul>
 8002300:	1c03      	adds	r3, r0, #0
 8002302:	1c18      	adds	r0, r3, #0
 8002304:	f7fe ff02 	bl	800110c <__aeabi_f2iz>
 8002308:	0002      	movs	r2, r0
 800230a:	2610      	movs	r6, #16
 800230c:	19bb      	adds	r3, r7, r6
 800230e:	601a      	str	r2, [r3, #0]
	    rgb.G = 255 * max_RGB;
 8002310:	4968      	ldr	r1, [pc, #416]	@ (80024b4 <send_data_hue+0x340>)
 8002312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002314:	f7fe fc18 	bl	8000b48 <__aeabi_fmul>
 8002318:	1c03      	adds	r3, r0, #0
 800231a:	1c18      	adds	r0, r3, #0
 800231c:	f7fe fef6 	bl	800110c <__aeabi_f2iz>
 8002320:	0002      	movs	r2, r0
 8002322:	19bb      	adds	r3, r7, r6
 8002324:	605a      	str	r2, [r3, #4]
	    rgb.B = ((max_RGB - min_RGB) / 60 * (hue - 120.0f) + min_RGB) * 255;
 8002326:	69f9      	ldr	r1, [r7, #28]
 8002328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800232a:	f7fe fd4b 	bl	8000dc4 <__aeabi_fsub>
 800232e:	1c03      	adds	r3, r0, #0
 8002330:	4961      	ldr	r1, [pc, #388]	@ (80024b8 <send_data_hue+0x344>)
 8002332:	1c18      	adds	r0, r3, #0
 8002334:	f7fe fa22 	bl	800077c <__aeabi_fdiv>
 8002338:	1c03      	adds	r3, r0, #0
 800233a:	1c1c      	adds	r4, r3, #0
 800233c:	197b      	adds	r3, r7, r5
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	0018      	movs	r0, r3
 8002342:	f7fe ff03 	bl	800114c <__aeabi_i2f>
 8002346:	1c03      	adds	r3, r0, #0
 8002348:	495c      	ldr	r1, [pc, #368]	@ (80024bc <send_data_hue+0x348>)
 800234a:	1c18      	adds	r0, r3, #0
 800234c:	f7fe fd3a 	bl	8000dc4 <__aeabi_fsub>
 8002350:	1c03      	adds	r3, r0, #0
 8002352:	1c19      	adds	r1, r3, #0
 8002354:	1c20      	adds	r0, r4, #0
 8002356:	f7fe fbf7 	bl	8000b48 <__aeabi_fmul>
 800235a:	1c03      	adds	r3, r0, #0
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	1c18      	adds	r0, r3, #0
 8002360:	f7fe f882 	bl	8000468 <__aeabi_fadd>
 8002364:	1c03      	adds	r3, r0, #0
 8002366:	4953      	ldr	r1, [pc, #332]	@ (80024b4 <send_data_hue+0x340>)
 8002368:	1c18      	adds	r0, r3, #0
 800236a:	f7fe fbed 	bl	8000b48 <__aeabi_fmul>
 800236e:	1c03      	adds	r3, r0, #0
 8002370:	1c18      	adds	r0, r3, #0
 8002372:	f7fe fecb 	bl	800110c <__aeabi_f2iz>
 8002376:	0002      	movs	r2, r0
 8002378:	19bb      	adds	r3, r7, r6
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e0f1      	b.n	8002562 <send_data_hue+0x3ee>
	}
	else if (hue >= 180 && hue < 240) {
 800237e:	250c      	movs	r5, #12
 8002380:	197b      	adds	r3, r7, r5
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	2bb3      	cmp	r3, #179	@ 0xb3
 8002386:	d946      	bls.n	8002416 <send_data_hue+0x2a2>
 8002388:	197b      	adds	r3, r7, r5
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2bef      	cmp	r3, #239	@ 0xef
 800238e:	d842      	bhi.n	8002416 <send_data_hue+0x2a2>
	    rgb.R = min_RGB * 255;
 8002390:	4948      	ldr	r1, [pc, #288]	@ (80024b4 <send_data_hue+0x340>)
 8002392:	69f8      	ldr	r0, [r7, #28]
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_fmul>
 8002398:	1c03      	adds	r3, r0, #0
 800239a:	1c18      	adds	r0, r3, #0
 800239c:	f7fe feb6 	bl	800110c <__aeabi_f2iz>
 80023a0:	0002      	movs	r2, r0
 80023a2:	2610      	movs	r6, #16
 80023a4:	19bb      	adds	r3, r7, r6
 80023a6:	601a      	str	r2, [r3, #0]
	    rgb.G = ((max_RGB - min_RGB) / 60 * (240.0f - hue) + min_RGB) * 255;
 80023a8:	69f9      	ldr	r1, [r7, #28]
 80023aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023ac:	f7fe fd0a 	bl	8000dc4 <__aeabi_fsub>
 80023b0:	1c03      	adds	r3, r0, #0
 80023b2:	4941      	ldr	r1, [pc, #260]	@ (80024b8 <send_data_hue+0x344>)
 80023b4:	1c18      	adds	r0, r3, #0
 80023b6:	f7fe f9e1 	bl	800077c <__aeabi_fdiv>
 80023ba:	1c03      	adds	r3, r0, #0
 80023bc:	1c1c      	adds	r4, r3, #0
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7fe fec2 	bl	800114c <__aeabi_i2f>
 80023c8:	1c03      	adds	r3, r0, #0
 80023ca:	1c19      	adds	r1, r3, #0
 80023cc:	483c      	ldr	r0, [pc, #240]	@ (80024c0 <send_data_hue+0x34c>)
 80023ce:	f7fe fcf9 	bl	8000dc4 <__aeabi_fsub>
 80023d2:	1c03      	adds	r3, r0, #0
 80023d4:	1c19      	adds	r1, r3, #0
 80023d6:	1c20      	adds	r0, r4, #0
 80023d8:	f7fe fbb6 	bl	8000b48 <__aeabi_fmul>
 80023dc:	1c03      	adds	r3, r0, #0
 80023de:	69f9      	ldr	r1, [r7, #28]
 80023e0:	1c18      	adds	r0, r3, #0
 80023e2:	f7fe f841 	bl	8000468 <__aeabi_fadd>
 80023e6:	1c03      	adds	r3, r0, #0
 80023e8:	4932      	ldr	r1, [pc, #200]	@ (80024b4 <send_data_hue+0x340>)
 80023ea:	1c18      	adds	r0, r3, #0
 80023ec:	f7fe fbac 	bl	8000b48 <__aeabi_fmul>
 80023f0:	1c03      	adds	r3, r0, #0
 80023f2:	1c18      	adds	r0, r3, #0
 80023f4:	f7fe fe8a 	bl	800110c <__aeabi_f2iz>
 80023f8:	0002      	movs	r2, r0
 80023fa:	19bb      	adds	r3, r7, r6
 80023fc:	605a      	str	r2, [r3, #4]
	    rgb.B = 255 * max_RGB;
 80023fe:	492d      	ldr	r1, [pc, #180]	@ (80024b4 <send_data_hue+0x340>)
 8002400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002402:	f7fe fba1 	bl	8000b48 <__aeabi_fmul>
 8002406:	1c03      	adds	r3, r0, #0
 8002408:	1c18      	adds	r0, r3, #0
 800240a:	f7fe fe7f 	bl	800110c <__aeabi_f2iz>
 800240e:	0002      	movs	r2, r0
 8002410:	19bb      	adds	r3, r7, r6
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e0a5      	b.n	8002562 <send_data_hue+0x3ee>
	}
	else if (hue >= 240 && hue < 300) {
 8002416:	250c      	movs	r5, #12
 8002418:	197b      	adds	r3, r7, r5
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	2bef      	cmp	r3, #239	@ 0xef
 800241e:	d951      	bls.n	80024c4 <send_data_hue+0x350>
 8002420:	197b      	adds	r3, r7, r5
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	2396      	movs	r3, #150	@ 0x96
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	429a      	cmp	r2, r3
 800242a:	d24b      	bcs.n	80024c4 <send_data_hue+0x350>
	    rgb.R = ((max_RGB - min_RGB) / 60 * (hue - 240.0f) + min_RGB) * 255;
 800242c:	69f9      	ldr	r1, [r7, #28]
 800242e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002430:	f7fe fcc8 	bl	8000dc4 <__aeabi_fsub>
 8002434:	1c03      	adds	r3, r0, #0
 8002436:	4920      	ldr	r1, [pc, #128]	@ (80024b8 <send_data_hue+0x344>)
 8002438:	1c18      	adds	r0, r3, #0
 800243a:	f7fe f99f 	bl	800077c <__aeabi_fdiv>
 800243e:	1c03      	adds	r3, r0, #0
 8002440:	1c1c      	adds	r4, r3, #0
 8002442:	197b      	adds	r3, r7, r5
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	f7fe fe80 	bl	800114c <__aeabi_i2f>
 800244c:	1c03      	adds	r3, r0, #0
 800244e:	491c      	ldr	r1, [pc, #112]	@ (80024c0 <send_data_hue+0x34c>)
 8002450:	1c18      	adds	r0, r3, #0
 8002452:	f7fe fcb7 	bl	8000dc4 <__aeabi_fsub>
 8002456:	1c03      	adds	r3, r0, #0
 8002458:	1c19      	adds	r1, r3, #0
 800245a:	1c20      	adds	r0, r4, #0
 800245c:	f7fe fb74 	bl	8000b48 <__aeabi_fmul>
 8002460:	1c03      	adds	r3, r0, #0
 8002462:	69f9      	ldr	r1, [r7, #28]
 8002464:	1c18      	adds	r0, r3, #0
 8002466:	f7fd ffff 	bl	8000468 <__aeabi_fadd>
 800246a:	1c03      	adds	r3, r0, #0
 800246c:	4911      	ldr	r1, [pc, #68]	@ (80024b4 <send_data_hue+0x340>)
 800246e:	1c18      	adds	r0, r3, #0
 8002470:	f7fe fb6a 	bl	8000b48 <__aeabi_fmul>
 8002474:	1c03      	adds	r3, r0, #0
 8002476:	1c18      	adds	r0, r3, #0
 8002478:	f7fe fe48 	bl	800110c <__aeabi_f2iz>
 800247c:	0002      	movs	r2, r0
 800247e:	2410      	movs	r4, #16
 8002480:	193b      	adds	r3, r7, r4
 8002482:	601a      	str	r2, [r3, #0]
	    rgb.G = min_RGB * 255;
 8002484:	490b      	ldr	r1, [pc, #44]	@ (80024b4 <send_data_hue+0x340>)
 8002486:	69f8      	ldr	r0, [r7, #28]
 8002488:	f7fe fb5e 	bl	8000b48 <__aeabi_fmul>
 800248c:	1c03      	adds	r3, r0, #0
 800248e:	1c18      	adds	r0, r3, #0
 8002490:	f7fe fe3c 	bl	800110c <__aeabi_f2iz>
 8002494:	0002      	movs	r2, r0
 8002496:	193b      	adds	r3, r7, r4
 8002498:	605a      	str	r2, [r3, #4]
	    rgb.B = 255 * max_RGB;
 800249a:	4906      	ldr	r1, [pc, #24]	@ (80024b4 <send_data_hue+0x340>)
 800249c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800249e:	f7fe fb53 	bl	8000b48 <__aeabi_fmul>
 80024a2:	1c03      	adds	r3, r0, #0
 80024a4:	1c18      	adds	r0, r3, #0
 80024a6:	f7fe fe31 	bl	800110c <__aeabi_f2iz>
 80024aa:	0002      	movs	r2, r0
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e057      	b.n	8002562 <send_data_hue+0x3ee>
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	437f0000 	.word	0x437f0000
 80024b8:	42700000 	.word	0x42700000
 80024bc:	42f00000 	.word	0x42f00000
 80024c0:	43700000 	.word	0x43700000
	}
	else if (hue >= 300 && hue < 360) {
 80024c4:	250c      	movs	r5, #12
 80024c6:	197b      	adds	r3, r7, r5
 80024c8:	881a      	ldrh	r2, [r3, #0]
 80024ca:	2396      	movs	r3, #150	@ 0x96
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d347      	bcc.n	8002562 <send_data_hue+0x3ee>
 80024d2:	197b      	adds	r3, r7, r5
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	23b4      	movs	r3, #180	@ 0xb4
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	429a      	cmp	r2, r3
 80024dc:	d241      	bcs.n	8002562 <send_data_hue+0x3ee>
	    rgb.R = 255 * max_RGB;
 80024de:	4928      	ldr	r1, [pc, #160]	@ (8002580 <send_data_hue+0x40c>)
 80024e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024e2:	f7fe fb31 	bl	8000b48 <__aeabi_fmul>
 80024e6:	1c03      	adds	r3, r0, #0
 80024e8:	1c18      	adds	r0, r3, #0
 80024ea:	f7fe fe0f 	bl	800110c <__aeabi_f2iz>
 80024ee:	0002      	movs	r2, r0
 80024f0:	2610      	movs	r6, #16
 80024f2:	19bb      	adds	r3, r7, r6
 80024f4:	601a      	str	r2, [r3, #0]
	    rgb.G = min_RGB * 255;
 80024f6:	4922      	ldr	r1, [pc, #136]	@ (8002580 <send_data_hue+0x40c>)
 80024f8:	69f8      	ldr	r0, [r7, #28]
 80024fa:	f7fe fb25 	bl	8000b48 <__aeabi_fmul>
 80024fe:	1c03      	adds	r3, r0, #0
 8002500:	1c18      	adds	r0, r3, #0
 8002502:	f7fe fe03 	bl	800110c <__aeabi_f2iz>
 8002506:	0002      	movs	r2, r0
 8002508:	19bb      	adds	r3, r7, r6
 800250a:	605a      	str	r2, [r3, #4]
	    rgb.B = ((max_RGB - min_RGB) / 60 * (360.0f - hue) + min_RGB) * 255;
 800250c:	69f9      	ldr	r1, [r7, #28]
 800250e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002510:	f7fe fc58 	bl	8000dc4 <__aeabi_fsub>
 8002514:	1c03      	adds	r3, r0, #0
 8002516:	491b      	ldr	r1, [pc, #108]	@ (8002584 <send_data_hue+0x410>)
 8002518:	1c18      	adds	r0, r3, #0
 800251a:	f7fe f92f 	bl	800077c <__aeabi_fdiv>
 800251e:	1c03      	adds	r3, r0, #0
 8002520:	1c1c      	adds	r4, r3, #0
 8002522:	197b      	adds	r3, r7, r5
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	0018      	movs	r0, r3
 8002528:	f7fe fe10 	bl	800114c <__aeabi_i2f>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	1c19      	adds	r1, r3, #0
 8002530:	4815      	ldr	r0, [pc, #84]	@ (8002588 <send_data_hue+0x414>)
 8002532:	f7fe fc47 	bl	8000dc4 <__aeabi_fsub>
 8002536:	1c03      	adds	r3, r0, #0
 8002538:	1c19      	adds	r1, r3, #0
 800253a:	1c20      	adds	r0, r4, #0
 800253c:	f7fe fb04 	bl	8000b48 <__aeabi_fmul>
 8002540:	1c03      	adds	r3, r0, #0
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	1c18      	adds	r0, r3, #0
 8002546:	f7fd ff8f 	bl	8000468 <__aeabi_fadd>
 800254a:	1c03      	adds	r3, r0, #0
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <send_data_hue+0x40c>)
 800254e:	1c18      	adds	r0, r3, #0
 8002550:	f7fe fafa 	bl	8000b48 <__aeabi_fmul>
 8002554:	1c03      	adds	r3, r0, #0
 8002556:	1c18      	adds	r0, r3, #0
 8002558:	f7fe fdd8 	bl	800110c <__aeabi_f2iz>
 800255c:	0002      	movs	r2, r0
 800255e:	19bb      	adds	r3, r7, r6
 8002560:	609a      	str	r2, [r3, #8]
	}

	send_data_rgb(led, rgb);
 8002562:	2310      	movs	r3, #16
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	220f      	movs	r2, #15
 8002568:	18ba      	adds	r2, r7, r2
 800256a:	7810      	ldrb	r0, [r2, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f000 f879 	bl	8002668 <send_data_rgb>
}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b00b      	add	sp, #44	@ 0x2c
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	437f0000 	.word	0x437f0000
 8002584:	42700000 	.word	0x42700000
 8002588:	43b40000 	.word	0x43b40000

0800258c <send_data_color_value>:
 * @param color_value Color data 24 bits comprising of leftmost 8 bits not used, then 8 bits R value, 8 bits G value, then 8 bits B value
 *
 * @retval None
 */
void send_data_color_value(uint8_t led, uint32_t color_value)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	0002      	movs	r2, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	701a      	strb	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d901      	bls.n	80025a6 <send_data_color_value+0x1a>
			Error_Handler();
 80025a2:	f7ff fc8d 	bl	8001ec0 <Error_Handler>
	}

	for (int i = 0; i < 24; i++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e02d      	b.n	8002608 <send_data_color_value+0x7c>
		char bit = color_value & 0x1;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	200b      	movs	r0, #11
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	2101      	movs	r1, #1
 80025b6:	400a      	ands	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
		if (bit == 1) {
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10e      	bne.n	80025e0 <send_data_color_value+0x54>
			pwm_data[23 + led * 24 - i] = 40;
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	0013      	movs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	3317      	adds	r3, #23
 80025d0:	001a      	movs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <send_data_color_value+0x94>)
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	2128      	movs	r1, #40	@ 0x28
 80025dc:	50d1      	str	r1, [r2, r3]
 80025de:	e00d      	b.n	80025fc <send_data_color_value+0x70>
		}
		else {
			pwm_data[23 + led * 24 - i] = 20;
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	0013      	movs	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3317      	adds	r3, #23
 80025ee:	001a      	movs	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad2      	subs	r2, r2, r3
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <send_data_color_value+0x94>)
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	2114      	movs	r1, #20
 80025fa:	50d1      	str	r1, [r2, r3]
		}
		color_value = color_value >> 1;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 24; i++) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3301      	adds	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b17      	cmp	r3, #23
 800260c:	ddce      	ble.n	80025ac <send_data_color_value+0x20>
	}
	pwm_data[RGB_DATA_SIZE * NUM_LEDS] = 0;
 800260e:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <send_data_color_value+0x94>)
 8002610:	23c0      	movs	r3, #192	@ 0xc0
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	2100      	movs	r1, #0
 8002616:	50d1      	str	r1, [r2, r3]
}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000170 	.word	0x20000170

08002624 <show_leds>:
 *
 * @param None
 *
 * @retval None
 */
void show_leds() {
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	while (dma_in_progress) {};
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <show_leds+0x38>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1fb      	bne.n	800262a <show_leds+0x6>
	dma_in_progress = 1;
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <show_leds+0x38>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
	if (HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, pwm_data, sizeof(pwm_data)/sizeof(uint32_t) + 1) != HAL_OK) {
 8002638:	23c1      	movs	r3, #193	@ 0xc1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <show_leds+0x3c>)
 800263e:	4809      	ldr	r0, [pc, #36]	@ (8002664 <show_leds+0x40>)
 8002640:	2100      	movs	r1, #0
 8002642:	f001 fc0b 	bl	8003e5c <HAL_TIM_PWM_Start_DMA>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <show_leds+0x2a>
			Error_Handler();
 800264a:	f7ff fc39 	bl	8001ec0 <Error_Handler>
	}
	HAL_Delay(1);
 800264e:	2001      	movs	r0, #1
 8002650:	f000 f8fe 	bl	8002850 <HAL_Delay>
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	20000774 	.word	0x20000774
 8002660:	20000170 	.word	0x20000170
 8002664:	20000030 	.word	0x20000030

08002668 <send_data_rgb>:
 * @param rgb RGB struct that contains RGB value
 *
 * @retval None
 */
void send_data_rgb(uint8_t led, RGB_Value rgb)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	0004      	movs	r4, r0
 8002670:	0038      	movs	r0, r7
 8002672:	6001      	str	r1, [r0, #0]
 8002674:	6042      	str	r2, [r0, #4]
 8002676:	6083      	str	r3, [r0, #8]
 8002678:	210f      	movs	r1, #15
 800267a:	187b      	adds	r3, r7, r1
 800267c:	1c22      	adds	r2, r4, #0
 800267e:	701a      	strb	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 8002680:	187b      	adds	r3, r7, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d901      	bls.n	800268c <send_data_rgb+0x24>
			Error_Handler();
 8002688:	f7ff fc1a 	bl	8001ec0 <Error_Handler>
	}

	//GRB format
	uint32_t color_value = rgb.G << 16 | rgb.R << 8 | rgb.B;
 800268c:	003b      	movs	r3, r7
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	003b      	movs	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	431a      	orrs	r2, r3
 800269a:	003b      	movs	r3, r7
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
	send_data_color_value(led, color_value);
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	230f      	movs	r3, #15
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	0011      	movs	r1, r2
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff ff6d 	bl	800258c <send_data_color_value>

}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b007      	add	sp, #28
 80026b8:	bd90      	pop	{r4, r7, pc}
	...

080026bc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2100      	movs	r1, #0
 80026c8:	0018      	movs	r0, r3
 80026ca:	f001 fdb5 	bl	8004238 <HAL_TIM_PWM_Stop_DMA>
  if (htim->hdma[TIM_DMA_ID_CC1]->State == HAL_DMA_STATE_READY)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	2225      	movs	r2, #37	@ 0x25
 80026d4:	5c9b      	ldrb	r3, [r3, r2]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d109      	bne.n	80026f0 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
  {
      __HAL_UNLOCK(htim->hdma[TIM_DMA_ID_CC1]);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	2224      	movs	r2, #36	@ 0x24
 80026e2:	2100      	movs	r1, #0
 80026e4:	5499      	strb	r1, [r3, r2]
      htim->hdma[TIM_DMA_ID_CC1]->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	2225      	movs	r2, #37	@ 0x25
 80026ec:	2101      	movs	r1, #1
 80026ee:	5499      	strb	r1, [r3, r2]
  }
  dma_in_progress = 0;
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000774 	.word	0x20000774

08002704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002706:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002708:	f7ff fd28 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800270c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800270e:	e003      	b.n	8002718 <LoopCopyDataInit>

08002710 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002712:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002714:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002716:	3104      	adds	r1, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002718:	480a      	ldr	r0, [pc, #40]	@ (8002744 <LoopForever+0xa>)
  ldr r3, =_edata
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <LoopForever+0xe>)
  adds r2, r0, r1
 800271c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800271e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002720:	d3f6      	bcc.n	8002710 <CopyDataInit>
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <LoopForever+0x12>)
  b LoopFillZerobss
 8002724:	e002      	b.n	800272c <LoopFillZerobss>

08002726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  str  r3, [r2]
 8002728:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272a:	3204      	adds	r2, #4

0800272c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <LoopForever+0x16>)
  cmp r2, r3
 800272e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002730:	d3f9      	bcc.n	8002726 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002732:	f004 fcad 	bl	8007090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002736:	f7ff f9a3 	bl	8001a80 <main>

0800273a <LoopForever>:

LoopForever:
    b LoopForever
 800273a:	e7fe      	b.n	800273a <LoopForever>
  ldr   r0, =_estack
 800273c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002740:	08007250 	.word	0x08007250
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002748:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800274c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8002750:	2000077c 	.word	0x2000077c

08002754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_IRQHandler>

08002756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002762:	2003      	movs	r0, #3
 8002764:	f000 f80e 	bl	8002784 <HAL_InitTick>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d003      	beq.n	8002774 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e001      	b.n	8002778 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002774:	f7ff fbaa 	bl	8001ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800278c:	230f      	movs	r3, #15
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <HAL_InitTick+0x88>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02b      	beq.n	80027f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800279c:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_InitTick+0x8c>)
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <HAL_InitTick+0x88>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	0019      	movs	r1, r3
 80027a6:	23fa      	movs	r3, #250	@ 0xfa
 80027a8:	0098      	lsls	r0, r3, #2
 80027aa:	f7fd fcad 	bl	8000108 <__udivsi3>
 80027ae:	0003      	movs	r3, r0
 80027b0:	0019      	movs	r1, r3
 80027b2:	0020      	movs	r0, r4
 80027b4:	f7fd fca8 	bl	8000108 <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f93d 	bl	8002a3a <HAL_SYSTICK_Config>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d112      	bne.n	80027ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d80a      	bhi.n	80027e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	2301      	movs	r3, #1
 80027ce:	425b      	negs	r3, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f90c 	bl	80029f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_InitTick+0x90>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00d      	b.n	80027fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027e0:	230f      	movs	r3, #15
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e008      	b.n	80027fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e003      	b.n	80027fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b005      	add	sp, #20
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	20000010 	.word	0x20000010
 8002810:	20000008 	.word	0x20000008
 8002814:	2000000c 	.word	0x2000000c

08002818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x1c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	001a      	movs	r2, r3
 8002822:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_IncTick+0x20>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	18d2      	adds	r2, r2, r3
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_IncTick+0x20>)
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	20000010 	.word	0x20000010
 8002838:	20000778 	.word	0x20000778

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b02      	ldr	r3, [pc, #8]	@ (800284c <HAL_GetTick+0x10>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	20000778 	.word	0x20000778

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff fff0 	bl	800283c <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3301      	adds	r3, #1
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	001a      	movs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	189b      	adds	r3, r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	f7ff ffe0 	bl	800283c <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	20000010 	.word	0x20000010

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	0002      	movs	r2, r0
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80028aa:	d809      	bhi.n	80028c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	001a      	movs	r2, r3
 80028b2:	231f      	movs	r3, #31
 80028b4:	401a      	ands	r2, r3
 80028b6:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <__NVIC_EnableIRQ+0x30>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	4091      	lsls	r1, r2
 80028bc:	000a      	movs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	0002      	movs	r2, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b7f      	cmp	r3, #127	@ 0x7f
 80028e0:	d828      	bhi.n	8002934 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e2:	4a2f      	ldr	r2, [pc, #188]	@ (80029a0 <__NVIC_SetPriority+0xd4>)
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	33c0      	adds	r3, #192	@ 0xc0
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	589b      	ldr	r3, [r3, r2]
 80028f2:	1dfa      	adds	r2, r7, #7
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	0011      	movs	r1, r2
 80028f8:	2203      	movs	r2, #3
 80028fa:	400a      	ands	r2, r1
 80028fc:	00d2      	lsls	r2, r2, #3
 80028fe:	21ff      	movs	r1, #255	@ 0xff
 8002900:	4091      	lsls	r1, r2
 8002902:	000a      	movs	r2, r1
 8002904:	43d2      	mvns	r2, r2
 8002906:	401a      	ands	r2, r3
 8002908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	22ff      	movs	r2, #255	@ 0xff
 8002910:	401a      	ands	r2, r3
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	0018      	movs	r0, r3
 8002918:	2303      	movs	r3, #3
 800291a:	4003      	ands	r3, r0
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002920:	481f      	ldr	r0, [pc, #124]	@ (80029a0 <__NVIC_SetPriority+0xd4>)
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b25b      	sxtb	r3, r3
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	430a      	orrs	r2, r1
 800292c:	33c0      	adds	r3, #192	@ 0xc0
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002932:	e031      	b.n	8002998 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	4a1b      	ldr	r2, [pc, #108]	@ (80029a4 <__NVIC_SetPriority+0xd8>)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	0019      	movs	r1, r3
 800293c:	230f      	movs	r3, #15
 800293e:	400b      	ands	r3, r1
 8002940:	3b08      	subs	r3, #8
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3306      	adds	r3, #6
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	3304      	adds	r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1dfa      	adds	r2, r7, #7
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	0011      	movs	r1, r2
 8002954:	2203      	movs	r2, #3
 8002956:	400a      	ands	r2, r1
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	21ff      	movs	r1, #255	@ 0xff
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	43d2      	mvns	r2, r2
 8002962:	401a      	ands	r2, r3
 8002964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	22ff      	movs	r2, #255	@ 0xff
 800296c:	401a      	ands	r2, r3
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0018      	movs	r0, r3
 8002974:	2303      	movs	r3, #3
 8002976:	4003      	ands	r3, r0
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800297c:	4809      	ldr	r0, [pc, #36]	@ (80029a4 <__NVIC_SetPriority+0xd8>)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	001c      	movs	r4, r3
 8002984:	230f      	movs	r3, #15
 8002986:	4023      	ands	r3, r4
 8002988:	3b08      	subs	r3, #8
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	430a      	orrs	r2, r1
 800298e:	3306      	adds	r3, #6
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	18c3      	adds	r3, r0, r3
 8002994:	3304      	adds	r3, #4
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b003      	add	sp, #12
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	045b      	lsls	r3, r3, #17
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d301      	bcc.n	80029c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029bc:	2301      	movs	r3, #1
 80029be:	e010      	b.n	80029e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <SysTick_Config+0x44>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	3a01      	subs	r2, #1
 80029c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c8:	2301      	movs	r3, #1
 80029ca:	425b      	negs	r3, r3
 80029cc:	2103      	movs	r1, #3
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7ff ff7c 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <SysTick_Config+0x44>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <SysTick_Config+0x44>)
 80029dc:	2207      	movs	r2, #7
 80029de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	210f      	movs	r1, #15
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	1c02      	adds	r2, r0, #0
 8002a00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	0002      	movs	r2, r0
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ff33 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff ffaf 	bl	80029a8 <SysTick_Config>
 8002a4a:	0003      	movs	r3, r0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e077      	b.n	8002b56 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <HAL_DMA_Init+0x10c>)
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	4463      	add	r3, ip
 8002a70:	2114      	movs	r1, #20
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7fd fb48 	bl	8000108 <__udivsi3>
 8002a78:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002a7a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2225      	movs	r2, #37	@ 0x25
 8002a84:	2102      	movs	r1, #2
 8002a86:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4934      	ldr	r1, [pc, #208]	@ (8002b64 <HAL_DMA_Init+0x110>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fa9f 	bl	8003014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	01db      	lsls	r3, r3, #7
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	21ff      	movs	r1, #255	@ 0xff
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002afe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_DMA_Init+0xd8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d80d      	bhi.n	8002b2c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 faaa 	bl	800306c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e008      	b.n	8002b3e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2225      	movs	r2, #37	@ 0x25
 8002b48:	2101      	movs	r1, #1
 8002b4a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	bffdfff8 	.word	0xbffdfff8
 8002b64:	ffff800f 	.word	0xffff800f

08002b68 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2317      	movs	r3, #23
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2224      	movs	r2, #36	@ 0x24
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_DMA_Start_IT+0x24>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e070      	b.n	8002c6e <HAL_DMA_Start_IT+0x106>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	2101      	movs	r1, #1
 8002b92:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2225      	movs	r2, #37	@ 0x25
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d157      	bne.n	8002c50 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2225      	movs	r2, #37	@ 0x25
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	438a      	bics	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f9e5 	bl	8002f94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	210e      	movs	r1, #14
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e00f      	b.n	8002c04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2104      	movs	r1, #4
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	210a      	movs	r1, #10
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	025b      	lsls	r3, r3, #9
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d008      	beq.n	8002c24 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	0049      	lsls	r1, r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	0049      	lsls	r1, r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e007      	b.n	8002c60 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2224      	movs	r2, #36	@ 0x24
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c58:	2317      	movs	r3, #23
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2224      	movs	r2, #36	@ 0x24
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]

  return status;
 8002c68:	2317      	movs	r3, #23
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b006      	add	sp, #24
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e050      	b.n	8002d2c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2225      	movs	r2, #37	@ 0x25
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d008      	beq.n	8002ca8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	@ 0x24
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e041      	b.n	8002d2c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	210e      	movs	r1, #14
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	491c      	ldr	r1, [pc, #112]	@ (8002d34 <HAL_DMA_Abort+0xbc>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <HAL_DMA_Abort+0xc0>)
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	221c      	movs	r2, #28
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_DMA_Abort+0xc0>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cf6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0a:	490a      	ldr	r1, [pc, #40]	@ (8002d34 <HAL_DMA_Abort+0xbc>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2225      	movs	r2, #37	@ 0x25
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2224      	movs	r2, #36	@ 0x24
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fffffeff 	.word	0xfffffeff
 8002d38:	40020000 	.word	0x40020000

08002d3c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	230f      	movs	r3, #15
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_DMA_Abort_IT+0x26>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e05e      	b.n	8002e20 <HAL_DMA_Abort_IT+0xe4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2224      	movs	r2, #36	@ 0x24
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2225      	movs	r2, #37	@ 0x25
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d007      	beq.n	8002d86 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e049      	b.n	8002e1a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	210e      	movs	r1, #14
 8002d92:	438a      	bics	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	438a      	bics	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	491d      	ldr	r1, [pc, #116]	@ (8002e28 <HAL_DMA_Abort_IT+0xec>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002db6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_DMA_Abort_IT+0xf0>)
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	221c      	movs	r2, #28
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_DMA_Abort_IT+0xf0>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	490f      	ldr	r1, [pc, #60]	@ (8002e28 <HAL_DMA_Abort_IT+0xec>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002df6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2225      	movs	r2, #37	@ 0x25
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	@ 0x24
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	0010      	movs	r0, r2
 8002e18:	4798      	blx	r3
    }
  }
  return status;
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	fffffeff 	.word	0xfffffeff
 8002e2c:	40020000 	.word	0x40020000

08002e30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002e38:	4b55      	ldr	r3, [pc, #340]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	221c      	movs	r2, #28
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	0013      	movs	r3, r2
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x7a>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d023      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d107      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2104      	movs	r1, #4
 8002e7a:	438a      	bics	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002e7e:	4b44      	ldr	r3, [pc, #272]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	221c      	movs	r2, #28
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d100      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x6e>
 8002e9c:	e073      	b.n	8002f86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ea8:	e06d      	b.n	8002f86 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	221c      	movs	r2, #28
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d02e      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xec>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d02a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d10b      	bne.n	8002eea <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	210a      	movs	r1, #10
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2225      	movs	r2, #37	@ 0x25
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	221c      	movs	r2, #28
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	@ 0x24
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d03a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	0010      	movs	r0, r2
 8002f18:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f1a:	e034      	b.n	8002f86 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	221c      	movs	r2, #28
 8002f22:	4013      	ands	r3, r2
 8002f24:	2208      	movs	r2, #8
 8002f26:	409a      	lsls	r2, r3
 8002f28:	0013      	movs	r3, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d02b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x158>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
 8002f36:	d027      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	210e      	movs	r1, #14
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	221c      	movs	r2, #28
 8002f52:	4013      	ands	r3, r2
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <HAL_DMA_IRQHandler+0x160>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2225      	movs	r2, #37	@ 0x25
 8002f68:	2101      	movs	r1, #1
 8002f6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	@ 0x24
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	0010      	movs	r0, r2
 8002f84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46c0      	nop			@ (mov r8, r8)
}
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40020000 	.word	0x40020000

08002f94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002faa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <DMA_SetConfig+0x7c>)
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	221c      	movs	r2, #28
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2201      	movs	r2, #1
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <DMA_SetConfig+0x7c>)
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d108      	bne.n	8002ff6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ff4:	e007      	b.n	8003006 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	40020000 	.word	0x40020000

08003014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	001a      	movs	r2, r3
 8003022:	23ff      	movs	r3, #255	@ 0xff
 8003024:	4013      	ands	r3, r2
 8003026:	3b08      	subs	r3, #8
 8003028:	2114      	movs	r1, #20
 800302a:	0018      	movs	r0, r3
 800302c:	f7fd f86c 	bl	8000108 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800303a:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800303c:	4694      	mov	ip, r2
 800303e:	4463      	add	r3, ip
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	001a      	movs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800304c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	221c      	movs	r2, #28
 8003052:	4013      	ands	r3, r2
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	10008200 	.word	0x10008200
 8003068:	40020880 	.word	0x40020880

0800306c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	22ff      	movs	r2, #255	@ 0xff
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003082:	4694      	mov	ip, r2
 8003084:	4463      	add	r3, ip
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	001a      	movs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a07      	ldr	r2, [pc, #28]	@ (80030b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b01      	subs	r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	4013      	ands	r3, r2
 800309c:	2201      	movs	r2, #1
 800309e:	409a      	lsls	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	1000823f 	.word	0x1000823f
 80030b0:	40020940 	.word	0x40020940

080030b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030c2:	e153      	b.n	800336c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4091      	lsls	r1, r2
 80030ce:	000a      	movs	r2, r1
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d100      	bne.n	80030dc <HAL_GPIO_Init+0x28>
 80030da:	e144      	b.n	8003366 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x38>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b12      	cmp	r3, #18
 80030ea:	d125      	bne.n	8003138 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	58d3      	ldr	r3, [r2, r3]
 80030f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2207      	movs	r2, #7
 80030fe:	4013      	ands	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	409a      	lsls	r2, r3
 8003106:	0013      	movs	r3, r2
 8003108:	43da      	mvns	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	220f      	movs	r2, #15
 8003116:	401a      	ands	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2107      	movs	r1, #7
 800311c:	400b      	ands	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	409a      	lsls	r2, r3
 8003122:	0013      	movs	r3, r2
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	43da      	mvns	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	401a      	ands	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d00b      	beq.n	800318c <HAL_GPIO_Init+0xd8>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003180:	2b11      	cmp	r3, #17
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b12      	cmp	r3, #18
 800318a:	d130      	bne.n	80031ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	409a      	lsls	r2, r3
 800319a:	0013      	movs	r3, r2
 800319c:	43da      	mvns	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	409a      	lsls	r2, r3
 80031ae:	0013      	movs	r3, r2
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c2:	2201      	movs	r2, #1
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	43da      	mvns	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4013      	ands	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	2201      	movs	r2, #1
 80031da:	401a      	ands	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	409a      	lsls	r2, r3
 80031e0:	0013      	movs	r3, r2
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d017      	beq.n	8003226 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	409a      	lsls	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	43da      	mvns	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4013      	ands	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	055b      	lsls	r3, r3, #21
 800322e:	4013      	ands	r3, r2
 8003230:	d100      	bne.n	8003234 <HAL_GPIO_Init+0x180>
 8003232:	e098      	b.n	8003366 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003234:	4a53      	ldr	r2, [pc, #332]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3318      	adds	r3, #24
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	589b      	ldr	r3, [r3, r2]
 8003240:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2203      	movs	r2, #3
 8003246:	4013      	ands	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	220f      	movs	r2, #15
 800324c:	409a      	lsls	r2, r3
 800324e:	0013      	movs	r3, r2
 8003250:	43da      	mvns	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	23a0      	movs	r3, #160	@ 0xa0
 800325c:	05db      	lsls	r3, r3, #23
 800325e:	429a      	cmp	r2, r3
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x1e2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a48      	ldr	r2, [pc, #288]	@ (8003388 <HAL_GPIO_Init+0x2d4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x1de>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a47      	ldr	r2, [pc, #284]	@ (800338c <HAL_GPIO_Init+0x2d8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x1da>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a46      	ldr	r2, [pc, #280]	@ (8003390 <HAL_GPIO_Init+0x2dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x1d6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a45      	ldr	r2, [pc, #276]	@ (8003394 <HAL_GPIO_Init+0x2e0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x1d2>
 8003282:	2305      	movs	r3, #5
 8003284:	e008      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003286:	2306      	movs	r3, #6
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 800328a:	2303      	movs	r3, #3
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003296:	2300      	movs	r3, #0
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	2103      	movs	r1, #3
 800329c:	400a      	ands	r2, r1
 800329e:	00d2      	lsls	r2, r2, #3
 80032a0:	4093      	lsls	r3, r2
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80032a8:	4936      	ldr	r1, [pc, #216]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3318      	adds	r3, #24
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80032b6:	4a33      	ldr	r2, [pc, #204]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	58d3      	ldr	r3, [r2, r3]
 80032bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43da      	mvns	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	025b      	lsls	r3, r3, #9
 80032d0:	4013      	ands	r3, r2
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032dc:	4929      	ldr	r1, [pc, #164]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80032e4:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 80032e6:	2384      	movs	r3, #132	@ 0x84
 80032e8:	58d3      	ldr	r3, [r2, r3]
 80032ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	4013      	ands	r3, r2
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800330a:	491e      	ldr	r1, [pc, #120]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 800330c:	2284      	movs	r2, #132	@ 0x84
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003312:	4b1c      	ldr	r3, [pc, #112]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	4013      	ands	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	@ 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	039b      	lsls	r3, r3, #14
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003360:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <HAL_GPIO_Init+0x2d0>)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3301      	adds	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	40da      	lsrs	r2, r3
 8003374:	1e13      	subs	r3, r2, #0
 8003376:	d000      	beq.n	800337a <HAL_GPIO_Init+0x2c6>
 8003378:	e6a4      	b.n	80030c4 <HAL_GPIO_Init+0x10>
  }
}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b006      	add	sp, #24
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021800 	.word	0x40021800
 8003388:	50000400 	.word	0x50000400
 800338c:	50000800 	.word	0x50000800
 8003390:	50000c00 	.word	0x50000c00
 8003394:	50001400 	.word	0x50001400

08003398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	0008      	movs	r0, r1
 80033a2:	0011      	movs	r1, r2
 80033a4:	1cbb      	adds	r3, r7, #2
 80033a6:	1c02      	adds	r2, r0, #0
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	1c7b      	adds	r3, r7, #1
 80033ac:	1c0a      	adds	r2, r1, #0
 80033ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b0:	1c7b      	adds	r3, r7, #1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	881a      	ldrh	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c2:	1cbb      	adds	r3, r7, #2
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1d0      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d100      	bne.n	80033f2 <HAL_RCC_OscConfig+0x1e>
 80033f0:	e069      	b.n	80034c6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4bc8      	ldr	r3, [pc, #800]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2238      	movs	r2, #56	@ 0x38
 80033f8:	4013      	ands	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d105      	bne.n	800340e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d15d      	bne.n	80034c6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1bc      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	025b      	lsls	r3, r3, #9
 8003416:	429a      	cmp	r2, r3
 8003418:	d107      	bne.n	800342a <HAL_RCC_OscConfig+0x56>
 800341a:	4bbe      	ldr	r3, [pc, #760]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	4bbd      	ldr	r3, [pc, #756]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003420:	2180      	movs	r1, #128	@ 0x80
 8003422:	0249      	lsls	r1, r1, #9
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e020      	b.n	800346c <HAL_RCC_OscConfig+0x98>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	23a0      	movs	r3, #160	@ 0xa0
 8003430:	02db      	lsls	r3, r3, #11
 8003432:	429a      	cmp	r2, r3
 8003434:	d10e      	bne.n	8003454 <HAL_RCC_OscConfig+0x80>
 8003436:	4bb7      	ldr	r3, [pc, #732]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4bb6      	ldr	r3, [pc, #728]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800343c:	2180      	movs	r1, #128	@ 0x80
 800343e:	02c9      	lsls	r1, r1, #11
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4bb3      	ldr	r3, [pc, #716]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4bb2      	ldr	r3, [pc, #712]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800344a:	2180      	movs	r1, #128	@ 0x80
 800344c:	0249      	lsls	r1, r1, #9
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x98>
 8003454:	4baf      	ldr	r3, [pc, #700]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4bae      	ldr	r3, [pc, #696]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800345a:	49af      	ldr	r1, [pc, #700]	@ (8003718 <HAL_RCC_OscConfig+0x344>)
 800345c:	400a      	ands	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4bac      	ldr	r3, [pc, #688]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4bab      	ldr	r3, [pc, #684]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003466:	49ad      	ldr	r1, [pc, #692]	@ (800371c <HAL_RCC_OscConfig+0x348>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d014      	beq.n	800349e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff f9e2 	bl	800283c <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800347e:	f7ff f9dd 	bl	800283c <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e17b      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003490:	4ba0      	ldr	r3, [pc, #640]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0xaa>
 800349c:	e013      	b.n	80034c6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7ff f9cd 	bl	800283c <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80034a8:	f7ff f9c8 	bl	800283c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e166      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	4013      	ands	r3, r2
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	d100      	bne.n	80034d2 <HAL_RCC_OscConfig+0xfe>
 80034d0:	e086      	b.n	80035e0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	4b90      	ldr	r3, [pc, #576]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2238      	movs	r2, #56	@ 0x38
 80034d8:	4013      	ands	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d12f      	bne.n	8003542 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e14c      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b89      	ldr	r3, [pc, #548]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003720 <HAL_RCC_OscConfig+0x34c>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	021a      	lsls	r2, r3, #8
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d112      	bne.n	8003530 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800350a:	4b82      	ldr	r3, [pc, #520]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a85      	ldr	r2, [pc, #532]	@ (8003724 <HAL_RCC_OscConfig+0x350>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	4b7e      	ldr	r3, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800351e:	4b7d      	ldr	r3, [pc, #500]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0adb      	lsrs	r3, r3, #11
 8003524:	2207      	movs	r2, #7
 8003526:	4013      	ands	r3, r2
 8003528:	4a7f      	ldr	r2, [pc, #508]	@ (8003728 <HAL_RCC_OscConfig+0x354>)
 800352a:	40da      	lsrs	r2, r3
 800352c:	4b7f      	ldr	r3, [pc, #508]	@ (800372c <HAL_RCC_OscConfig+0x358>)
 800352e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003530:	4b7f      	ldr	r3, [pc, #508]	@ (8003730 <HAL_RCC_OscConfig+0x35c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff f925 	bl	8002784 <HAL_InitTick>
 800353a:	1e03      	subs	r3, r0, #0
 800353c:	d050      	beq.n	80035e0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e122      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d030      	beq.n	80035ac <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800354a:	4b72      	ldr	r3, [pc, #456]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x350>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	4b6e      	ldr	r3, [pc, #440]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800355e:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	0049      	lsls	r1, r1, #1
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7ff f966 	bl	800283c <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003576:	f7ff f961 	bl	800283c <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0ff      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003588:	4b62      	ldr	r3, [pc, #392]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4013      	ands	r3, r2
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b5f      	ldr	r3, [pc, #380]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a61      	ldr	r2, [pc, #388]	@ (8003720 <HAL_RCC_OscConfig+0x34c>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e019      	b.n	80035e0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b58      	ldr	r3, [pc, #352]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80035b2:	4960      	ldr	r1, [pc, #384]	@ (8003734 <HAL_RCC_OscConfig+0x360>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff f940 	bl	800283c <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80035c2:	f7ff f93b 	bl	800283c <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0d9      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4013      	ands	r3, r2
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	4013      	ands	r3, r2
 80035e8:	d042      	beq.n	8003670 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2238      	movs	r2, #56	@ 0x38
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d138      	bne.n	8003670 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0c2      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d019      	beq.n	800363e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800360a:	4b42      	ldr	r3, [pc, #264]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 800360c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003610:	2101      	movs	r1, #1
 8003612:	430a      	orrs	r2, r1
 8003614:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7ff f911 	bl	800283c <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003620:	f7ff f90c 	bl	800283c <HAL_GetTick>
 8003624:	0002      	movs	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0aa      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003632:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d0f1      	beq.n	8003620 <HAL_RCC_OscConfig+0x24c>
 800363c:	e018      	b.n	8003670 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800363e:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003640:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003642:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003644:	2101      	movs	r1, #1
 8003646:	438a      	bics	r2, r1
 8003648:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7ff f8f7 	bl	800283c <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003654:	f7ff f8f2 	bl	800283c <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e090      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003666:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d1f1      	bne.n	8003654 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d100      	bne.n	800367c <HAL_RCC_OscConfig+0x2a8>
 800367a:	e084      	b.n	8003786 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003684:	4b23      	ldr	r3, [pc, #140]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2238      	movs	r2, #56	@ 0x38
 800368a:	4013      	ands	r3, r2
 800368c:	2b20      	cmp	r3, #32
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d000      	beq.n	800369a <HAL_RCC_OscConfig+0x2c6>
 8003698:	e075      	b.n	8003786 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e074      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2e0>
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	430a      	orrs	r2, r1
 80036b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036b2:	e01c      	b.n	80036ee <HAL_RCC_OscConfig+0x31a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x302>
 80036bc:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036c2:	2104      	movs	r1, #4
 80036c4:	430a      	orrs	r2, r1
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036ce:	2101      	movs	r1, #1
 80036d0:	430a      	orrs	r2, r1
 80036d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036d4:	e00b      	b.n	80036ee <HAL_RCC_OscConfig+0x31a>
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036da:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036dc:	2101      	movs	r1, #1
 80036de:	438a      	bics	r2, r1
 80036e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_OscConfig+0x340>)
 80036e8:	2104      	movs	r1, #4
 80036ea:	438a      	bics	r2, r1
 80036ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d028      	beq.n	8003748 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff f8a1 	bl	800283c <HAL_GetTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80036fe:	e01d      	b.n	800373c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7ff f89c 	bl	800283c <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	4a0b      	ldr	r2, [pc, #44]	@ (8003738 <HAL_RCC_OscConfig+0x364>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d915      	bls.n	800373c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e039      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
 8003714:	40021000 	.word	0x40021000
 8003718:	fffeffff 	.word	0xfffeffff
 800371c:	fffbffff 	.word	0xfffbffff
 8003720:	ffff80ff 	.word	0xffff80ff
 8003724:	ffffc7ff 	.word	0xffffc7ff
 8003728:	02dc6c00 	.word	0x02dc6c00
 800372c:	20000008 	.word	0x20000008
 8003730:	2000000c 	.word	0x2000000c
 8003734:	fffffeff 	.word	0xfffffeff
 8003738:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <HAL_RCC_OscConfig+0x3bc>)
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	2202      	movs	r2, #2
 8003742:	4013      	ands	r3, r2
 8003744:	d0dc      	beq.n	8003700 <HAL_RCC_OscConfig+0x32c>
 8003746:	e013      	b.n	8003770 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7ff f878 	bl	800283c <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003750:	e009      	b.n	8003766 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7ff f873 	bl	800283c <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <HAL_RCC_OscConfig+0x3c0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e010      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_RCC_OscConfig+0x3bc>)
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_RCC_OscConfig+0x3bc>)
 800377c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <HAL_RCC_OscConfig+0x3bc>)
 8003780:	4905      	ldr	r1, [pc, #20]	@ (8003798 <HAL_RCC_OscConfig+0x3c4>)
 8003782:	400a      	ands	r2, r1
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b006      	add	sp, #24
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	00001388 	.word	0x00001388
 8003798:	efffffff 	.word	0xefffffff

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0df      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b71      	ldr	r3, [pc, #452]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2207      	movs	r2, #7
 80037b6:	4013      	ands	r3, r2
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d91e      	bls.n	80037fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b6e      	ldr	r3, [pc, #440]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2207      	movs	r2, #7
 80037c4:	4393      	bics	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037d0:	f7ff f834 	bl	800283c <HAL_GetTick>
 80037d4:	0003      	movs	r3, r0
 80037d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037d8:	e009      	b.n	80037ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037da:	f7ff f82f 	bl	800283c <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	4a65      	ldr	r2, [pc, #404]	@ (800397c <HAL_RCC_ClockConfig+0x1e0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0c0      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037ee:	4b62      	ldr	r3, [pc, #392]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2207      	movs	r2, #7
 80037f4:	4013      	ands	r3, r2
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1ee      	bne.n	80037da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2202      	movs	r2, #2
 8003802:	4013      	ands	r3, r2
 8003804:	d017      	beq.n	8003836 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003810:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a5b      	ldr	r2, [pc, #364]	@ (8003984 <HAL_RCC_ClockConfig+0x1e8>)
 8003816:	401a      	ands	r2, r3
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 800381a:	21b0      	movs	r1, #176	@ 0xb0
 800381c:	0109      	lsls	r1, r1, #4
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003822:	4b57      	ldr	r3, [pc, #348]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a58      	ldr	r2, [pc, #352]	@ (8003988 <HAL_RCC_ClockConfig+0x1ec>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d04b      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003848:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	4013      	ands	r3, r2
 8003852:	d11f      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e08b      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4013      	ands	r3, r2
 800386a:	d113      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e07f      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d106      	bne.n	8003886 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003878:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d108      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e074      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003886:	4b3e      	ldr	r3, [pc, #248]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e06d      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003894:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2207      	movs	r2, #7
 800389a:	4393      	bics	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4b37      	ldr	r3, [pc, #220]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fe ffc8 	bl	800283c <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fe ffc3 	bl	800283c <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	4a2f      	ldr	r2, [pc, #188]	@ (800397c <HAL_RCC_ClockConfig+0x1e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e054      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2238      	movs	r2, #56	@ 0x38
 80038cc:	401a      	ands	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1ec      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2207      	movs	r2, #7
 80038de:	4013      	ands	r3, r2
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d21e      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b24      	ldr	r3, [pc, #144]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2207      	movs	r2, #7
 80038ec:	4393      	bics	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f8:	f7fe ffa0 	bl	800283c <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003900:	e009      	b.n	8003916 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fe ff9b 	bl	800283c <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <HAL_RCC_ClockConfig+0x1e0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e02c      	b.n	8003970 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003916:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <HAL_RCC_ClockConfig+0x1dc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2207      	movs	r2, #7
 800391c:	4013      	ands	r3, r2
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d1ee      	bne.n	8003902 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2204      	movs	r2, #4
 800392a:	4013      	ands	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800392e:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a16      	ldr	r2, [pc, #88]	@ (800398c <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003942:	f000 f82b 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003946:	0001      	movs	r1, r0
 8003948:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <HAL_RCC_ClockConfig+0x1e4>)
 800394a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	220f      	movs	r2, #15
 8003950:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003952:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <HAL_RCC_ClockConfig+0x1f4>)
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003958:	221f      	movs	r2, #31
 800395a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800395c:	000a      	movs	r2, r1
 800395e:	40da      	lsrs	r2, r3
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <HAL_RCC_ClockConfig+0x1f8>)
 8003962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <HAL_RCC_ClockConfig+0x1fc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0018      	movs	r0, r3
 800396a:	f7fe ff0b 	bl	8002784 <HAL_InitTick>
 800396e:	0003      	movs	r3, r0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40022000 	.word	0x40022000
 800397c:	00001388 	.word	0x00001388
 8003980:	40021000 	.word	0x40021000
 8003984:	ffff84ff 	.word	0xffff84ff
 8003988:	fffff0ff 	.word	0xfffff0ff
 800398c:	ffff8fff 	.word	0xffff8fff
 8003990:	0800716c 	.word	0x0800716c
 8003994:	20000008 	.word	0x20000008
 8003998:	2000000c 	.word	0x2000000c

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x78>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2238      	movs	r2, #56	@ 0x38
 80039a8:	4013      	ands	r3, r2
 80039aa:	d10f      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x78>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0adb      	lsrs	r3, r3, #11
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	0013      	movs	r3, r2
 80039bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	4815      	ldr	r0, [pc, #84]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x7c>)
 80039c2:	f7fc fba1 	bl	8000108 <__udivsi3>
 80039c6:	0003      	movs	r3, r0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	e01e      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x78>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2238      	movs	r2, #56	@ 0x38
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d102      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x7c>)
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x78>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2238      	movs	r2, #56	@ 0x38
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d103      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x78>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2238      	movs	r2, #56	@ 0x38
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b18      	cmp	r3, #24
 80039fc:	d103      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039fe:	23fa      	movs	r3, #250	@ 0xfa
 8003a00:	01db      	lsls	r3, r3, #7
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	e001      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003a0a:	687b      	ldr	r3, [r7, #4]
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	02dc6c00 	.word	0x02dc6c00

08003a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003a20:	f7ff ffbc 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003a24:	0001      	movs	r1, r0
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x30>)
 8003a28:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003a30:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <HAL_RCC_GetHCLKFreq+0x34>)
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a36:	221f      	movs	r2, #31
 8003a38:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003a3a:	000a      	movs	r2, r1
 8003a3c:	40da      	lsrs	r2, r3
 8003a3e:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <HAL_RCC_GetHCLKFreq+0x38>)
 8003a40:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <HAL_RCC_GetHCLKFreq+0x38>)
 8003a44:	681b      	ldr	r3, [r3, #0]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800716c 	.word	0x0800716c
 8003a54:	20000008 	.word	0x20000008

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003a5c:	f7ff ffde 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a60:	0001      	movs	r1, r0
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0b1b      	lsrs	r3, r3, #12
 8003a68:	2207      	movs	r2, #7
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	58d3      	ldr	r3, [r2, r3]
 8003a72:	221f      	movs	r2, #31
 8003a74:	4013      	ands	r3, r2
 8003a76:	40d9      	lsrs	r1, r3
 8003a78:	000b      	movs	r3, r1
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	080071ac 	.word	0x080071ac

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a90:	2313      	movs	r3, #19
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a98:	2312      	movs	r3, #18
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2240      	movs	r2, #64	@ 0x40
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d100      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003aaa:	e079      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aac:	2011      	movs	r0, #17
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab4:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	055b      	lsls	r3, r3, #21
 8003abc:	4013      	ands	r3, r2
 8003abe:	d110      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b60      	ldr	r3, [pc, #384]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	0549      	lsls	r1, r1, #21
 8003aca:	430a      	orrs	r2, r1
 8003acc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ace:	4b5d      	ldr	r3, [pc, #372]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	055b      	lsls	r3, r3, #21
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003ae2:	4b58      	ldr	r3, [pc, #352]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ae4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ae6:	23c0      	movs	r3, #192	@ 0xc0
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d019      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d014      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003afe:	4b51      	ldr	r3, [pc, #324]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b02:	4a51      	ldr	r2, [pc, #324]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b08:	4b4e      	ldr	r3, [pc, #312]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b0e:	2180      	movs	r1, #128	@ 0x80
 8003b10:	0249      	lsls	r1, r1, #9
 8003b12:	430a      	orrs	r2, r1
 8003b14:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	4b4b      	ldr	r3, [pc, #300]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b1c:	494b      	ldr	r1, [pc, #300]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003b22:	4b48      	ldr	r3, [pc, #288]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d016      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe fe84 	bl	800283c <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003b38:	e00c      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fe7f 	bl	800283c <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a42      	ldr	r2, [pc, #264]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d904      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003b4a:	2313      	movs	r3, #19
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2203      	movs	r2, #3
 8003b50:	701a      	strb	r2, [r3, #0]
          break;
 8003b52:	e004      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003b54:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	2202      	movs	r2, #2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d0ed      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003b5e:	2313      	movs	r3, #19
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b68:	4b36      	ldr	r3, [pc, #216]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6c:	4a36      	ldr	r2, [pc, #216]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b7c:	e005      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	2312      	movs	r3, #18
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2213      	movs	r2, #19
 8003b84:	18ba      	adds	r2, r7, r2
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8a:	2311      	movs	r3, #17
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b98:	4b2a      	ldr	r3, [pc, #168]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b9a:	492e      	ldr	r1, [pc, #184]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003baa:	4b26      	ldr	r3, [pc, #152]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	2203      	movs	r2, #3
 8003bb0:	4393      	bics	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b22      	ldr	r3, [pc, #136]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2220      	movs	r2, #32
 8003be2:	4013      	ands	r3, r2
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be6:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	0899      	lsrs	r1, r3, #2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	4b14      	ldr	r3, [pc, #80]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	4a15      	ldr	r2, [pc, #84]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c12:	430a      	orrs	r2, r1
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2280      	movs	r2, #128	@ 0x80
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003c20:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	22e0      	movs	r2, #224	@ 0xe0
 8003c26:	4393      	bics	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003c34:	2312      	movs	r3, #18
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	781b      	ldrb	r3, [r3, #0]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b006      	add	sp, #24
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	40021000 	.word	0x40021000
 8003c48:	fffffcff 	.word	0xfffffcff
 8003c4c:	fffeffff 	.word	0xfffeffff
 8003c50:	00001388 	.word	0x00001388
 8003c54:	efffffff 	.word	0xefffffff
 8003c58:	ffffcfff 	.word	0xffffcfff
 8003c5c:	ffff3fff 	.word	0xffff3fff

08003c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e04a      	b.n	8003d08 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223d      	movs	r2, #61	@ 0x3d
 8003c76:	5c9b      	ldrb	r3, [r3, r2]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	223c      	movs	r2, #60	@ 0x3c
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fe f943 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	223d      	movs	r2, #61	@ 0x3d
 8003c92:	2102      	movs	r1, #2
 8003c94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	f000 fe6d 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2248      	movs	r2, #72	@ 0x48
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223e      	movs	r2, #62	@ 0x3e
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223f      	movs	r2, #63	@ 0x3f
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2240      	movs	r2, #64	@ 0x40
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2241      	movs	r2, #65	@ 0x41
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2242      	movs	r2, #66	@ 0x42
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2243      	movs	r2, #67	@ 0x43
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2244      	movs	r2, #68	@ 0x44
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2245      	movs	r2, #69	@ 0x45
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2246      	movs	r2, #70	@ 0x46
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2247      	movs	r2, #71	@ 0x47
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223d      	movs	r2, #61	@ 0x3d
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	223d      	movs	r2, #61	@ 0x3d
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d001      	beq.n	8003d28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e02f      	b.n	8003d88 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	223d      	movs	r2, #61	@ 0x3d
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <HAL_TIM_Base_Start+0x80>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_Base_Start+0x34>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <HAL_TIM_Base_Start+0x84>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d116      	bne.n	8003d72 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <HAL_TIM_Base_Start+0x88>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d016      	beq.n	8003d84 <HAL_TIM_Base_Start+0x74>
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	025b      	lsls	r3, r3, #9
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d011      	beq.n	8003d84 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	e008      	b.n	8003d84 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e000      	b.n	8003d86 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d84:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	00010007 	.word	0x00010007

08003d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e04a      	b.n	8003e44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	223d      	movs	r2, #61	@ 0x3d
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	223c      	movs	r2, #60	@ 0x3c
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f841 	bl	8003e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	223d      	movs	r2, #61	@ 0x3d
 8003dce:	2102      	movs	r1, #2
 8003dd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	0019      	movs	r1, r3
 8003ddc:	0010      	movs	r0, r2
 8003dde:	f000 fdcf 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2248      	movs	r2, #72	@ 0x48
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223e      	movs	r2, #62	@ 0x3e
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223f      	movs	r2, #63	@ 0x3f
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2240      	movs	r2, #64	@ 0x40
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2241      	movs	r2, #65	@ 0x41
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2242      	movs	r2, #66	@ 0x42
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2243      	movs	r2, #67	@ 0x43
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2244      	movs	r2, #68	@ 0x44
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2245      	movs	r2, #69	@ 0x45
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2246      	movs	r2, #70	@ 0x46
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2247      	movs	r2, #71	@ 0x47
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223d      	movs	r2, #61	@ 0x3d
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	001a      	movs	r2, r3
 8003e6a:	1cbb      	adds	r3, r7, #2
 8003e6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2317      	movs	r3, #23
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <HAL_TIM_PWM_Start_DMA+0x32>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	223e      	movs	r2, #62	@ 0x3e
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3b02      	subs	r3, #2
 8003e86:	425a      	negs	r2, r3
 8003e88:	4153      	adcs	r3, r2
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e037      	b.n	8003efe <HAL_TIM_PWM_Start_DMA+0xa2>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d108      	bne.n	8003ea6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	223f      	movs	r2, #63	@ 0x3f
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	425a      	negs	r2, r3
 8003ea0:	4153      	adcs	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e02b      	b.n	8003efe <HAL_TIM_PWM_Start_DMA+0xa2>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d108      	bne.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x62>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2240      	movs	r2, #64	@ 0x40
 8003eb0:	5c9b      	ldrb	r3, [r3, r2]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3b02      	subs	r3, #2
 8003eb6:	425a      	negs	r2, r3
 8003eb8:	4153      	adcs	r3, r2
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e01f      	b.n	8003efe <HAL_TIM_PWM_Start_DMA+0xa2>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d108      	bne.n	8003ed6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2241      	movs	r2, #65	@ 0x41
 8003ec8:	5c9b      	ldrb	r3, [r3, r2]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3b02      	subs	r3, #2
 8003ece:	425a      	negs	r2, r3
 8003ed0:	4153      	adcs	r3, r2
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	e013      	b.n	8003efe <HAL_TIM_PWM_Start_DMA+0xa2>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d108      	bne.n	8003eee <HAL_TIM_PWM_Start_DMA+0x92>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2242      	movs	r2, #66	@ 0x42
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3b02      	subs	r3, #2
 8003ee6:	425a      	negs	r2, r3
 8003ee8:	4153      	adcs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e007      	b.n	8003efe <HAL_TIM_PWM_Start_DMA+0xa2>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2243      	movs	r2, #67	@ 0x43
 8003ef2:	5c9b      	ldrb	r3, [r3, r2]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	3b02      	subs	r3, #2
 8003ef8:	425a      	negs	r2, r3
 8003efa:	4153      	adcs	r3, r2
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	e183      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <HAL_TIM_PWM_Start_DMA+0xc2>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	223e      	movs	r2, #62	@ 0x3e
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	425a      	negs	r2, r3
 8003f18:	4153      	adcs	r3, r2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e037      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x132>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d108      	bne.n	8003f36 <HAL_TIM_PWM_Start_DMA+0xda>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	223f      	movs	r2, #63	@ 0x3f
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	425a      	negs	r2, r3
 8003f30:	4153      	adcs	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e02b      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x132>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIM_PWM_Start_DMA+0xf2>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	@ 0x40
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	425a      	negs	r2, r3
 8003f48:	4153      	adcs	r3, r2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e01f      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x132>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d108      	bne.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2241      	movs	r2, #65	@ 0x41
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	425a      	negs	r2, r3
 8003f60:	4153      	adcs	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e013      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x132>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d108      	bne.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x122>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2242      	movs	r2, #66	@ 0x42
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	425a      	negs	r2, r3
 8003f78:	4153      	adcs	r3, r2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e007      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x132>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2243      	movs	r2, #67	@ 0x43
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	425a      	negs	r2, r3
 8003f8a:	4153      	adcs	r3, r2
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d035      	beq.n	8003ffe <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0x144>
 8003f98:	1cbb      	adds	r3, r7, #2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e134      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_TIM_PWM_Start_DMA+0x158>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	223e      	movs	r2, #62	@ 0x3e
 8003fae:	2102      	movs	r1, #2
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	e026      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d104      	bne.n	8003fc4 <HAL_TIM_PWM_Start_DMA+0x168>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	223f      	movs	r2, #63	@ 0x3f
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	e01e      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d104      	bne.n	8003fd4 <HAL_TIM_PWM_Start_DMA+0x178>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2240      	movs	r2, #64	@ 0x40
 8003fce:	2102      	movs	r1, #2
 8003fd0:	5499      	strb	r1, [r3, r2]
 8003fd2:	e016      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d104      	bne.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x188>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2241      	movs	r2, #65	@ 0x41
 8003fde:	2102      	movs	r1, #2
 8003fe0:	5499      	strb	r1, [r3, r2]
 8003fe2:	e00e      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d104      	bne.n	8003ff4 <HAL_TIM_PWM_Start_DMA+0x198>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2242      	movs	r2, #66	@ 0x42
 8003fee:	2102      	movs	r1, #2
 8003ff0:	5499      	strb	r1, [r3, r2]
 8003ff2:	e006      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2243      	movs	r2, #67	@ 0x43
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	5499      	strb	r1, [r3, r2]
 8003ffc:	e001      	b.n	8004002 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e105      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d100      	bne.n	800400a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8004008:	e080      	b.n	800410c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d900      	bls.n	8004012 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8004010:	e0a1      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d054      	beq.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x266>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d900      	bls.n	8004020 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800401e:	e09a      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d025      	beq.n	8004078 <HAL_TIM_PWM_Start_DMA+0x21c>
 800402c:	e093      	b.n	8004156 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	4a79      	ldr	r2, [pc, #484]	@ (8004218 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004034:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	4a78      	ldr	r2, [pc, #480]	@ (800421c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	4a77      	ldr	r2, [pc, #476]	@ (8004220 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004044:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3334      	adds	r3, #52	@ 0x34
 8004052:	001a      	movs	r2, r3
 8004054:	1cbb      	adds	r3, r7, #2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f7fe fd86 	bl	8002b68 <HAL_DMA_Start_IT>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d001      	beq.n	8004064 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d4      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	0089      	lsls	r1, r1, #2
 8004072:	430a      	orrs	r2, r1
 8004074:	60da      	str	r2, [r3, #12]
      break;
 8004076:	e073      	b.n	8004160 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	4a66      	ldr	r2, [pc, #408]	@ (8004218 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800407e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	4a65      	ldr	r2, [pc, #404]	@ (800421c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	4a64      	ldr	r2, [pc, #400]	@ (8004220 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800408e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3338      	adds	r3, #56	@ 0x38
 800409c:	001a      	movs	r2, r3
 800409e:	1cbb      	adds	r3, r7, #2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	f7fe fd61 	bl	8002b68 <HAL_DMA_Start_IT>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d001      	beq.n	80040ae <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0af      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2180      	movs	r1, #128	@ 0x80
 80040ba:	00c9      	lsls	r1, r1, #3
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]
      break;
 80040c0:	e04e      	b.n	8004160 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4a54      	ldr	r2, [pc, #336]	@ (8004218 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4a53      	ldr	r2, [pc, #332]	@ (800421c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80040d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	333c      	adds	r3, #60	@ 0x3c
 80040e6:	001a      	movs	r2, r3
 80040e8:	1cbb      	adds	r3, r7, #2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	f7fe fd3c 	bl	8002b68 <HAL_DMA_Start_IT>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e08a      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2180      	movs	r1, #128	@ 0x80
 8004104:	0109      	lsls	r1, r1, #4
 8004106:	430a      	orrs	r2, r1
 8004108:	60da      	str	r2, [r3, #12]
      break;
 800410a:	e029      	b.n	8004160 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	4a41      	ldr	r2, [pc, #260]	@ (8004218 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004112:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	4a40      	ldr	r2, [pc, #256]	@ (800421c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	4a3f      	ldr	r2, [pc, #252]	@ (8004220 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3340      	adds	r3, #64	@ 0x40
 8004130:	001a      	movs	r2, r3
 8004132:	1cbb      	adds	r3, r7, #2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	f7fe fd17 	bl	8002b68 <HAL_DMA_Start_IT>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d001      	beq.n	8004142 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e065      	b.n	800420e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	0149      	lsls	r1, r1, #5
 8004150:	430a      	orrs	r2, r1
 8004152:	60da      	str	r2, [r3, #12]
      break;
 8004154:	e004      	b.n	8004160 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8004156:	2317      	movs	r3, #23
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
      break;
 800415e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004160:	2317      	movs	r3, #23
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d14e      	bne.n	8004208 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	2201      	movs	r2, #1
 8004172:	0018      	movs	r0, r3
 8004174:	f000 ffae 	bl	80050d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a29      	ldr	r2, [pc, #164]	@ (8004224 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_TIM_PWM_Start_DMA+0x33a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIM_PWM_Start_DMA+0x33a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a26      	ldr	r2, [pc, #152]	@ (800422c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_TIM_PWM_Start_DMA+0x33e>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_TIM_PWM_Start_DMA+0x340>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2180      	movs	r1, #128	@ 0x80
 80041ac:	0209      	lsls	r1, r1, #8
 80041ae:	430a      	orrs	r2, r1
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d116      	bne.n	80041f4 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d016      	beq.n	8004206 <HAL_TIM_PWM_Start_DMA+0x3aa>
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	429a      	cmp	r2, r3
 80041e0:	d011      	beq.n	8004206 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2101      	movs	r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f2:	e008      	b.n	8004206 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2101      	movs	r1, #1
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e000      	b.n	8004208 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004208:	2317      	movs	r3, #23
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	781b      	ldrb	r3, [r3, #0]
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b006      	add	sp, #24
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	0800486d 	.word	0x0800486d
 800421c:	08004917 	.word	0x08004917
 8004220:	080047d9 	.word	0x080047d9
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800
 8004230:	40000400 	.word	0x40000400
 8004234:	00010007 	.word	0x00010007

08004238 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	230f      	movs	r3, #15
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d039      	beq.n	80042c4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d844      	bhi.n	80042e0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d025      	beq.n	80042a8 <HAL_TIM_PWM_Stop_DMA+0x70>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d83e      	bhi.n	80042e0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x38>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00e      	beq.n	800428c <HAL_TIM_PWM_Stop_DMA+0x54>
 800426e:	e037      	b.n	80042e0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	495a      	ldr	r1, [pc, #360]	@ (80043e4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800427c:	400a      	ands	r2, r1
 800427e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	0018      	movs	r0, r3
 8004286:	f7fe fd59 	bl	8002d3c <HAL_DMA_Abort_IT>
      break;
 800428a:	e02e      	b.n	80042ea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4954      	ldr	r1, [pc, #336]	@ (80043e8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8004298:	400a      	ands	r2, r1
 800429a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fd4b 	bl	8002d3c <HAL_DMA_Abort_IT>
      break;
 80042a6:	e020      	b.n	80042ea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	494e      	ldr	r1, [pc, #312]	@ (80043ec <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	0018      	movs	r0, r3
 80042be:	f7fe fd3d 	bl	8002d3c <HAL_DMA_Abort_IT>
      break;
 80042c2:	e012      	b.n	80042ea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4948      	ldr	r1, [pc, #288]	@ (80043f0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fe fd2f 	bl	8002d3c <HAL_DMA_Abort_IT>
      break;
 80042de:	e004      	b.n	80042ea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80042e0:	230f      	movs	r3, #15
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
      break;
 80042e8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80042ea:	230f      	movs	r3, #15
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d000      	beq.n	80042f6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80042f4:	e06e      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fee8 	bl	80050d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3a      	ldr	r2, [pc, #232]	@ (80043f4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIM_PWM_Stop_DMA+0xea>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a39      	ldr	r2, [pc, #228]	@ (80043f8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_PWM_Stop_DMA+0xea>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a37      	ldr	r2, [pc, #220]	@ (80043fc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004334:	4013      	ands	r3, r2
 8004336:	d10d      	bne.n	8004354 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a31      	ldr	r2, [pc, #196]	@ (8004404 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004340:	4013      	ands	r3, r2
 8004342:	d107      	bne.n	8004354 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	492e      	ldr	r1, [pc, #184]	@ (8004408 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004350:	400a      	ands	r2, r1
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4a29      	ldr	r2, [pc, #164]	@ (8004400 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800435c:	4013      	ands	r3, r2
 800435e:	d10d      	bne.n	800437c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a27      	ldr	r2, [pc, #156]	@ (8004404 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004368:	4013      	ands	r3, r2
 800436a:	d107      	bne.n	800437c <HAL_TIM_PWM_Stop_DMA+0x144>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_TIM_PWM_Stop_DMA+0x154>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	223e      	movs	r2, #62	@ 0x3e
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]
 800438a:	e023      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d104      	bne.n	800439c <HAL_TIM_PWM_Stop_DMA+0x164>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223f      	movs	r2, #63	@ 0x3f
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
 800439a:	e01b      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_PWM_Stop_DMA+0x174>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2240      	movs	r2, #64	@ 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]
 80043aa:	e013      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d104      	bne.n	80043bc <HAL_TIM_PWM_Stop_DMA+0x184>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2241      	movs	r2, #65	@ 0x41
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]
 80043ba:	e00b      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d104      	bne.n	80043cc <HAL_TIM_PWM_Stop_DMA+0x194>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2242      	movs	r2, #66	@ 0x42
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2243      	movs	r2, #67	@ 0x43
 80043d0:	2101      	movs	r1, #1
 80043d2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80043d4:	230f      	movs	r3, #15
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	781b      	ldrb	r3, [r3, #0]
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b004      	add	sp, #16
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	fffffdff 	.word	0xfffffdff
 80043e8:	fffffbff 	.word	0xfffffbff
 80043ec:	fffff7ff 	.word	0xfffff7ff
 80043f0:	ffffefff 	.word	0xffffefff
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	00001111 	.word	0x00001111
 8004404:	00000444 	.word	0x00000444
 8004408:	ffff7fff 	.word	0xffff7fff

0800440c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2317      	movs	r3, #23
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	223c      	movs	r2, #60	@ 0x3c
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_TIM_PWM_ConfigChannel+0x22>
 800442a:	2302      	movs	r3, #2
 800442c:	e0e5      	b.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	223c      	movs	r2, #60	@ 0x3c
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b14      	cmp	r3, #20
 800443a:	d900      	bls.n	800443e <HAL_TIM_PWM_ConfigChannel+0x32>
 800443c:	e0d1      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	009a      	lsls	r2, r3, #2
 8004442:	4b70      	ldr	r3, [pc, #448]	@ (8004604 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0011      	movs	r1, r2
 8004452:	0018      	movs	r0, r3
 8004454:	f000 fb06 	bl	8004a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2108      	movs	r1, #8
 8004464:	430a      	orrs	r2, r1
 8004466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2104      	movs	r1, #4
 8004474:	438a      	bics	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	619a      	str	r2, [r3, #24]
      break;
 800448a:	e0af      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fb65 	bl	8004b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	0109      	lsls	r1, r1, #4
 80044a8:	430a      	orrs	r2, r1
 80044aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4954      	ldr	r1, [pc, #336]	@ (8004608 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6999      	ldr	r1, [r3, #24]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	619a      	str	r2, [r3, #24]
      break;
 80044d0:	e08c      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 fbc0 	bl	8004c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69da      	ldr	r2, [r3, #28]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2108      	movs	r1, #8
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2104      	movs	r1, #4
 80044fc:	438a      	bics	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69d9      	ldr	r1, [r3, #28]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
      break;
 8004512:	e06b      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fc21 	bl	8004d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	0109      	lsls	r1, r1, #4
 8004530:	430a      	orrs	r2, r1
 8004532:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4932      	ldr	r1, [pc, #200]	@ (8004608 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004540:	400a      	ands	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69d9      	ldr	r1, [r3, #28]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
      break;
 8004558:	e048      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	0011      	movs	r1, r2
 8004562:	0018      	movs	r0, r3
 8004564:	f000 fc62 	bl	8004e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2108      	movs	r1, #8
 8004574:	430a      	orrs	r2, r1
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2104      	movs	r1, #4
 8004584:	438a      	bics	r2, r1
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800459a:	e027      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	0011      	movs	r1, r2
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 fc9b 	bl	8004ee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2180      	movs	r1, #128	@ 0x80
 80045b6:	0109      	lsls	r1, r1, #4
 80045b8:	430a      	orrs	r2, r1
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4910      	ldr	r1, [pc, #64]	@ (8004608 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045c8:	400a      	ands	r2, r1
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80045e0:	e004      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80045e2:	2317      	movs	r3, #23
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
      break;
 80045ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	223c      	movs	r2, #60	@ 0x3c
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

  return status;
 80045f4:	2317      	movs	r3, #23
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	080071cc 	.word	0x080071cc
 8004608:	fffffbff 	.word	0xfffffbff

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	230f      	movs	r3, #15
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	223c      	movs	r2, #60	@ 0x3c
 8004622:	5c9b      	ldrb	r3, [r3, r2]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x20>
 8004628:	2302      	movs	r3, #2
 800462a:	e0bc      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x19a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	223c      	movs	r2, #60	@ 0x3c
 8004630:	2101      	movs	r1, #1
 8004632:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	223d      	movs	r2, #61	@ 0x3d
 8004638:	2102      	movs	r1, #2
 800463a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a5a      	ldr	r2, [pc, #360]	@ (80047b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a59      	ldr	r2, [pc, #356]	@ (80047b4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004650:	4013      	ands	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	0192      	lsls	r2, r2, #6
 8004664:	4293      	cmp	r3, r2
 8004666:	d040      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xde>
 8004668:	2280      	movs	r2, #128	@ 0x80
 800466a:	0192      	lsls	r2, r2, #6
 800466c:	4293      	cmp	r3, r2
 800466e:	d900      	bls.n	8004672 <HAL_TIM_ConfigClockSource+0x66>
 8004670:	e088      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 8004672:	2280      	movs	r2, #128	@ 0x80
 8004674:	0152      	lsls	r2, r2, #5
 8004676:	4293      	cmp	r3, r2
 8004678:	d100      	bne.n	800467c <HAL_TIM_ConfigClockSource+0x70>
 800467a:	e088      	b.n	800478e <HAL_TIM_ConfigClockSource+0x182>
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	0152      	lsls	r2, r2, #5
 8004680:	4293      	cmp	r3, r2
 8004682:	d900      	bls.n	8004686 <HAL_TIM_ConfigClockSource+0x7a>
 8004684:	e07e      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 8004686:	2b70      	cmp	r3, #112	@ 0x70
 8004688:	d018      	beq.n	80046bc <HAL_TIM_ConfigClockSource+0xb0>
 800468a:	d900      	bls.n	800468e <HAL_TIM_ConfigClockSource+0x82>
 800468c:	e07a      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 800468e:	2b60      	cmp	r3, #96	@ 0x60
 8004690:	d04f      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x126>
 8004692:	d900      	bls.n	8004696 <HAL_TIM_ConfigClockSource+0x8a>
 8004694:	e076      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 8004696:	2b50      	cmp	r3, #80	@ 0x50
 8004698:	d03b      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x106>
 800469a:	d900      	bls.n	800469e <HAL_TIM_ConfigClockSource+0x92>
 800469c:	e072      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d057      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x146>
 80046a2:	d900      	bls.n	80046a6 <HAL_TIM_ConfigClockSource+0x9a>
 80046a4:	e06e      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 80046a6:	2b30      	cmp	r3, #48	@ 0x30
 80046a8:	d063      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x166>
 80046aa:	d86b      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d060      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x166>
 80046b0:	d868      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d05d      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x166>
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d05b      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x166>
 80046ba:	e063      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	f000 fce2 	bl	8005094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2277      	movs	r2, #119	@ 0x77
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
      break;
 80046e8:	e052      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fa:	f000 fccb 	bl	8005094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2180      	movs	r1, #128	@ 0x80
 800470a:	01c9      	lsls	r1, r1, #7
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
      break;
 8004710:	e03e      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	001a      	movs	r2, r3
 8004720:	f000 fc3c 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2150      	movs	r1, #80	@ 0x50
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fc96 	bl	800505c <TIM_ITRx_SetConfig>
      break;
 8004730:	e02e      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	001a      	movs	r2, r3
 8004740:	f000 fc5a 	bl	8004ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2160      	movs	r1, #96	@ 0x60
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fc86 	bl	800505c <TIM_ITRx_SetConfig>
      break;
 8004750:	e01e      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	001a      	movs	r2, r3
 8004760:	f000 fc1c 	bl	8004f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	0018      	movs	r0, r3
 800476c:	f000 fc76 	bl	800505c <TIM_ITRx_SetConfig>
      break;
 8004770:	e00e      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0019      	movs	r1, r3
 800477c:	0010      	movs	r0, r2
 800477e:	f000 fc6d 	bl	800505c <TIM_ITRx_SetConfig>
      break;
 8004782:	e005      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004784:	230f      	movs	r3, #15
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
      break;
 800478c:	e000      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800478e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	223d      	movs	r2, #61	@ 0x3d
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	223c      	movs	r2, #60	@ 0x3c
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

  return status;
 80047a0:	230f      	movs	r3, #15
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	781b      	ldrb	r3, [r3, #0]
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b004      	add	sp, #16
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	ffceff88 	.word	0xffceff88
 80047b4:	ffff00ff 	.word	0xffff00ff

080047b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80047c0:	46c0      	nop			@ (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b002      	add	sp, #8
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80047d0:	46c0      	nop			@ (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	223e      	movs	r2, #62	@ 0x3e
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]
 80047fe:	e02a      	b.n	8004856 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d107      	bne.n	800481a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2202      	movs	r2, #2
 800480e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	223f      	movs	r2, #63	@ 0x3f
 8004814:	2101      	movs	r1, #1
 8004816:	5499      	strb	r1, [r3, r2]
 8004818:	e01d      	b.n	8004856 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2204      	movs	r2, #4
 8004828:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2240      	movs	r2, #64	@ 0x40
 800482e:	2101      	movs	r1, #1
 8004830:	5499      	strb	r1, [r3, r2]
 8004832:	e010      	b.n	8004856 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d107      	bne.n	800484e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2208      	movs	r2, #8
 8004842:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2241      	movs	r2, #65	@ 0x41
 8004848:	2101      	movs	r1, #1
 800484a:	5499      	strb	r1, [r3, r2]
 800484c:	e003      	b.n	8004856 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	223d      	movs	r2, #61	@ 0x3d
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff ffb5 	bl	80047c8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}

0800486c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d10b      	bne.n	800489c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d136      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	223e      	movs	r2, #62	@ 0x3e
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]
 800489a:	e031      	b.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10b      	bne.n	80048be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d125      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	223f      	movs	r2, #63	@ 0x3f
 80048b8:	2101      	movs	r1, #1
 80048ba:	5499      	strb	r1, [r3, r2]
 80048bc:	e020      	b.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d10b      	bne.n	80048e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2204      	movs	r2, #4
 80048cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d114      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2240      	movs	r2, #64	@ 0x40
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	e00f      	b.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d10a      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2208      	movs	r2, #8
 80048ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2241      	movs	r2, #65	@ 0x41
 80048fc:	2101      	movs	r1, #1
 80048fe:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	0018      	movs	r0, r3
 8004904:	f7fd feda 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	771a      	strb	r2, [r3, #28]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bd80      	pop	{r7, pc}

08004916 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d103      	bne.n	8004936 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	771a      	strb	r2, [r3, #28]
 8004934:	e019      	b.n	800496a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d103      	bne.n	8004948 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2202      	movs	r2, #2
 8004944:	771a      	strb	r2, [r3, #28]
 8004946:	e010      	b.n	800496a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d103      	bne.n	800495a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2204      	movs	r2, #4
 8004956:	771a      	strb	r2, [r3, #28]
 8004958:	e007      	b.n	800496a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d102      	bne.n	800496a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2208      	movs	r2, #8
 8004968:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff ff23 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
}
 8004978:	46c0      	nop			@ (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b004      	add	sp, #16
 800497e:	bd80      	pop	{r7, pc}

08004980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <TIM_Base_SetConfig+0xcc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x20>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <TIM_Base_SetConfig+0xd0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2270      	movs	r2, #112	@ 0x70
 80049a4:	4393      	bics	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a25      	ldr	r2, [pc, #148]	@ (8004a4c <TIM_Base_SetConfig+0xcc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_Base_SetConfig+0x5a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a24      	ldr	r2, [pc, #144]	@ (8004a50 <TIM_Base_SetConfig+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0x5a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <TIM_Base_SetConfig+0xd4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0x5a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <TIM_Base_SetConfig+0xd8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0x5a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a21      	ldr	r2, [pc, #132]	@ (8004a5c <TIM_Base_SetConfig+0xdc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a20      	ldr	r2, [pc, #128]	@ (8004a60 <TIM_Base_SetConfig+0xe0>)
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2280      	movs	r2, #128	@ 0x80
 80049f0:	4393      	bics	r3, r2
 80049f2:	001a      	movs	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a4c <TIM_Base_SetConfig+0xcc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0xa4>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a10      	ldr	r2, [pc, #64]	@ (8004a58 <TIM_Base_SetConfig+0xd8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0xa4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a5c <TIM_Base_SetConfig+0xdc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b004      	add	sp, #16
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40002000 	.word	0x40002000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	fffffcff 	.word	0xfffffcff

08004a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a2e      	ldr	r2, [pc, #184]	@ (8004b4c <TIM_OC1_SetConfig+0xe8>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	4393      	bics	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4393      	bics	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a24      	ldr	r2, [pc, #144]	@ (8004b50 <TIM_OC1_SetConfig+0xec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_OC1_SetConfig+0x6e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	@ (8004b54 <TIM_OC1_SetConfig+0xf0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC1_SetConfig+0x6e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <TIM_OC1_SetConfig+0xf4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10c      	bne.n	8004aec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	4393      	bics	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a18      	ldr	r2, [pc, #96]	@ (8004b50 <TIM_OC1_SetConfig+0xec>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_OC1_SetConfig+0xa0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <TIM_OC1_SetConfig+0xf0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC1_SetConfig+0xa0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <TIM_OC1_SetConfig+0xf4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <TIM_OC1_SetConfig+0xf8>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <TIM_OC1_SetConfig+0xfc>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b006      	add	sp, #24
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	fffeff8f 	.word	0xfffeff8f
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	fffffeff 	.word	0xfffffeff
 8004b60:	fffffdff 	.word	0xfffffdff

08004b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	2210      	movs	r2, #16
 8004b7a:	4393      	bics	r3, r2
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <TIM_OC2_SetConfig+0xe0>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <TIM_OC2_SetConfig+0xe4>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2220      	movs	r2, #32
 8004bae:	4393      	bics	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a22      	ldr	r2, [pc, #136]	@ (8004c4c <TIM_OC2_SetConfig+0xe8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10d      	bne.n	8004be2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2280      	movs	r2, #128	@ 0x80
 8004bca:	4393      	bics	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	4393      	bics	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <TIM_OC2_SetConfig+0xe8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_OC2_SetConfig+0x96>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <TIM_OC2_SetConfig+0xec>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC2_SetConfig+0x96>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <TIM_OC2_SetConfig+0xf0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d113      	bne.n	8004c22 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <TIM_OC2_SetConfig+0xf4>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <TIM_OC2_SetConfig+0xf8>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	46c0      	nop			@ (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b006      	add	sp, #24
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	feff8fff 	.word	0xfeff8fff
 8004c48:	fffffcff 	.word	0xfffffcff
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800
 8004c58:	fffffbff 	.word	0xfffffbff
 8004c5c:	fffff7ff 	.word	0xfffff7ff

08004c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4a31      	ldr	r2, [pc, #196]	@ (8004d3c <TIM_OC3_SetConfig+0xdc>)
 8004c76:	401a      	ands	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d40 <TIM_OC3_SetConfig+0xe0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2203      	movs	r2, #3
 8004c94:	4393      	bics	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <TIM_OC3_SetConfig+0xe4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a23      	ldr	r2, [pc, #140]	@ (8004d48 <TIM_OC3_SetConfig+0xe8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10d      	bne.n	8004cda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <TIM_OC3_SetConfig+0xec>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d50 <TIM_OC3_SetConfig+0xf0>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8004d48 <TIM_OC3_SetConfig+0xe8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_OC3_SetConfig+0x92>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <TIM_OC3_SetConfig+0xf4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_OC3_SetConfig+0x92>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	@ (8004d58 <TIM_OC3_SetConfig+0xf8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <TIM_OC3_SetConfig+0xfc>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <TIM_OC3_SetConfig+0x100>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b006      	add	sp, #24
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	fffffeff 	.word	0xfffffeff
 8004d40:	fffeff8f 	.word	0xfffeff8f
 8004d44:	fffffdff 	.word	0xfffffdff
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	fffff7ff 	.word	0xfffff7ff
 8004d50:	fffffbff 	.word	0xfffffbff
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800
 8004d5c:	ffffefff 	.word	0xffffefff
 8004d60:	ffffdfff 	.word	0xffffdfff

08004d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4a24      	ldr	r2, [pc, #144]	@ (8004e0c <TIM_OC4_SetConfig+0xa8>)
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a20      	ldr	r2, [pc, #128]	@ (8004e10 <TIM_OC4_SetConfig+0xac>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <TIM_OC4_SetConfig+0xb0>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <TIM_OC4_SetConfig+0xb4>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <TIM_OC4_SetConfig+0xb8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_OC4_SetConfig+0x70>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a16      	ldr	r2, [pc, #88]	@ (8004e20 <TIM_OC4_SetConfig+0xbc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC4_SetConfig+0x70>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a15      	ldr	r2, [pc, #84]	@ (8004e24 <TIM_OC4_SetConfig+0xc0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d109      	bne.n	8004de8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <TIM_OC4_SetConfig+0xc4>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	019b      	lsls	r3, r3, #6
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b006      	add	sp, #24
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	ffffefff 	.word	0xffffefff
 8004e10:	feff8fff 	.word	0xfeff8fff
 8004e14:	fffffcff 	.word	0xfffffcff
 8004e18:	ffffdfff 	.word	0xffffdfff
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	ffffbfff 	.word	0xffffbfff

08004e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4a21      	ldr	r2, [pc, #132]	@ (8004ec8 <TIM_OC5_SetConfig+0x9c>)
 8004e42:	401a      	ands	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <TIM_OC5_SetConfig+0xa0>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <TIM_OC5_SetConfig+0xa4>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <TIM_OC5_SetConfig+0xa8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_OC5_SetConfig+0x66>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <TIM_OC5_SetConfig+0xac>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_OC5_SetConfig+0x66>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <TIM_OC5_SetConfig+0xb0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d109      	bne.n	8004ea6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <TIM_OC5_SetConfig+0x9c>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b006      	add	sp, #24
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	fffeffff 	.word	0xfffeffff
 8004ecc:	fffeff8f 	.word	0xfffeff8f
 8004ed0:	fffdffff 	.word	0xfffdffff
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	@ (8004f80 <TIM_OC6_SetConfig+0xa0>)
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <TIM_OC6_SetConfig+0xa4>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <TIM_OC6_SetConfig+0xa8>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	051b      	lsls	r3, r3, #20
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a16      	ldr	r2, [pc, #88]	@ (8004f8c <TIM_OC6_SetConfig+0xac>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_OC6_SetConfig+0x68>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <TIM_OC6_SetConfig+0xb0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_OC6_SetConfig+0x68>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a14      	ldr	r2, [pc, #80]	@ (8004f94 <TIM_OC6_SetConfig+0xb4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d109      	bne.n	8004f5c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <TIM_OC6_SetConfig+0xb8>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b006      	add	sp, #24
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	ffefffff 	.word	0xffefffff
 8004f84:	feff8fff 	.word	0xfeff8fff
 8004f88:	ffdfffff 	.word	0xffdfffff
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	fffbffff 	.word	0xfffbffff

08004f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	22f0      	movs	r2, #240	@ 0xf0
 8004fc6:	4393      	bics	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	220a      	movs	r2, #10
 8004fd8:	4393      	bics	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b006      	add	sp, #24
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	2210      	movs	r2, #16
 8005010:	4393      	bics	r3, r2
 8005012:	001a      	movs	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <TIM_TI2_ConfigInputStage+0x60>)
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	031b      	lsls	r3, r3, #12
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	22a0      	movs	r2, #160	@ 0xa0
 8005034:	4393      	bics	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	b006      	add	sp, #24
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	ffff0fff 	.word	0xffff0fff

0800505c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <TIM_ITRx_SetConfig+0x34>)
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	2207      	movs	r2, #7
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	609a      	str	r2, [r3, #8]
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	ffcfff8f 	.word	0xffcfff8f

08005094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4a09      	ldr	r2, [pc, #36]	@ (80050d0 <TIM_ETR_SetConfig+0x3c>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b006      	add	sp, #24
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	ffff00ff 	.word	0xffff00ff

080050d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	221f      	movs	r2, #31
 80050e4:	4013      	ands	r3, r2
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	0013      	movs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	43d2      	mvns	r2, r2
 80050f6:	401a      	ands	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	211f      	movs	r1, #31
 8005104:	400b      	ands	r3, r1
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4099      	lsls	r1, r3
 800510a:	000b      	movs	r3, r1
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b006      	add	sp, #24
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	223c      	movs	r2, #60	@ 0x3c
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e04a      	b.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	223c      	movs	r2, #60	@ 0x3c
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	223d      	movs	r2, #61	@ 0x3d
 8005140:	2102      	movs	r1, #2
 8005142:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1e      	ldr	r2, [pc, #120]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2270      	movs	r2, #112	@ 0x70
 8005174:	4393      	bics	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a10      	ldr	r2, [pc, #64]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d10c      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2280      	movs	r2, #128	@ 0x80
 80051a2:	4393      	bics	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	223d      	movs	r2, #61	@ 0x3d
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	223c      	movs	r2, #60	@ 0x3c
 80051c4:	2100      	movs	r1, #0
 80051c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	ff0fffff 	.word	0xff0fffff
 80051dc:	40000400 	.word	0x40000400

080051e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e046      	b.n	8005280 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2288      	movs	r2, #136	@ 0x88
 80051f6:	589b      	ldr	r3, [r3, r2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	@ 0x84
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f7fc ff0e 	bl	8002028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2288      	movs	r2, #136	@ 0x88
 8005210:	2124      	movs	r1, #36	@ 0x24
 8005212:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2101      	movs	r1, #1
 8005220:	438a      	bics	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 fd64 	bl	8005cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 fbe2 	bl	8005a00 <UART_SetConfig>
 800523c:	0003      	movs	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e01c      	b.n	8005280 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	490d      	ldr	r1, [pc, #52]	@ (8005288 <HAL_UART_Init+0xa8>)
 8005252:	400a      	ands	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	212a      	movs	r1, #42	@ 0x2a
 8005262:	438a      	bics	r2, r1
 8005264:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f000 fdf3 	bl	8005e64 <UART_CheckIdleState>
 800527e:	0003      	movs	r3, r0
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}
 8005288:	ffffb7ff 	.word	0xffffb7ff

0800528c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	1dbb      	adds	r3, r7, #6
 8005298:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	228c      	movs	r2, #140	@ 0x8c
 800529e:	589b      	ldr	r3, [r3, r2]
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d145      	bne.n	8005330 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_UART_Receive_IT+0x26>
 80052aa:	1dbb      	adds	r3, r7, #6
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e03d      	b.n	8005332 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	429a      	cmp	r2, r3
 80052c0:	d109      	bne.n	80052d6 <HAL_UART_Receive_IT+0x4a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2201      	movs	r2, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	d001      	beq.n	80052d6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e02d      	b.n	8005332 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	2380      	movs	r3, #128	@ 0x80
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	4013      	ands	r3, r2
 80052e8:	d019      	beq.n	800531e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	613b      	str	r3, [r7, #16]
  return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2180      	movs	r1, #128	@ 0x80
 800530c:	04c9      	lsls	r1, r1, #19
 800530e:	430a      	orrs	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800531e:	1dbb      	adds	r3, r7, #6
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 feb6 	bl	8006098 <UART_Start_Receive_IT>
 800532c:	0003      	movs	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b008      	add	sp, #32
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800533c:	b5b0      	push	{r4, r5, r7, lr}
 800533e:	b0aa      	sub	sp, #168	@ 0xa8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	22a4      	movs	r2, #164	@ 0xa4
 800534c:	18b9      	adds	r1, r7, r2
 800534e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	20a0      	movs	r0, #160	@ 0xa0
 8005358:	1839      	adds	r1, r7, r0
 800535a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	249c      	movs	r4, #156	@ 0x9c
 8005364:	1939      	adds	r1, r7, r4
 8005366:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005368:	0011      	movs	r1, r2
 800536a:	18bb      	adds	r3, r7, r2
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4aa2      	ldr	r2, [pc, #648]	@ (80055f8 <HAL_UART_IRQHandler+0x2bc>)
 8005370:	4013      	ands	r3, r2
 8005372:	2298      	movs	r2, #152	@ 0x98
 8005374:	18bd      	adds	r5, r7, r2
 8005376:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005378:	18bb      	adds	r3, r7, r2
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11a      	bne.n	80053b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005380:	187b      	adds	r3, r7, r1
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2220      	movs	r2, #32
 8005386:	4013      	ands	r3, r2
 8005388:	d015      	beq.n	80053b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800538a:	183b      	adds	r3, r7, r0
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2220      	movs	r2, #32
 8005390:	4013      	ands	r3, r2
 8005392:	d105      	bne.n	80053a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005394:	193b      	adds	r3, r7, r4
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	055b      	lsls	r3, r3, #21
 800539c:	4013      	ands	r3, r2
 800539e:	d00a      	beq.n	80053b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d100      	bne.n	80053aa <HAL_UART_IRQHandler+0x6e>
 80053a8:	e2fb      	b.n	80059a2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	0010      	movs	r0, r2
 80053b2:	4798      	blx	r3
      }
      return;
 80053b4:	e2f5      	b.n	80059a2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053b6:	2398      	movs	r3, #152	@ 0x98
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d100      	bne.n	80053c2 <HAL_UART_IRQHandler+0x86>
 80053c0:	e122      	b.n	8005608 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053c2:	239c      	movs	r3, #156	@ 0x9c
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a8c      	ldr	r2, [pc, #560]	@ (80055fc <HAL_UART_IRQHandler+0x2c0>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	d106      	bne.n	80053dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053ce:	23a0      	movs	r3, #160	@ 0xa0
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a8a      	ldr	r2, [pc, #552]	@ (8005600 <HAL_UART_IRQHandler+0x2c4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	d100      	bne.n	80053dc <HAL_UART_IRQHandler+0xa0>
 80053da:	e115      	b.n	8005608 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053dc:	23a4      	movs	r3, #164	@ 0xa4
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4013      	ands	r3, r2
 80053e6:	d012      	beq.n	800540e <HAL_UART_IRQHandler+0xd2>
 80053e8:	23a0      	movs	r3, #160	@ 0xa0
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	d00b      	beq.n	800540e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2290      	movs	r2, #144	@ 0x90
 8005402:	589b      	ldr	r3, [r3, r2]
 8005404:	2201      	movs	r2, #1
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2190      	movs	r1, #144	@ 0x90
 800540c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800540e:	23a4      	movs	r3, #164	@ 0xa4
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2202      	movs	r2, #2
 8005416:	4013      	ands	r3, r2
 8005418:	d011      	beq.n	800543e <HAL_UART_IRQHandler+0x102>
 800541a:	239c      	movs	r3, #156	@ 0x9c
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	4013      	ands	r3, r2
 8005424:	d00b      	beq.n	800543e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2202      	movs	r2, #2
 800542c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2290      	movs	r2, #144	@ 0x90
 8005432:	589b      	ldr	r3, [r3, r2]
 8005434:	2204      	movs	r2, #4
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2190      	movs	r1, #144	@ 0x90
 800543c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800543e:	23a4      	movs	r3, #164	@ 0xa4
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2204      	movs	r2, #4
 8005446:	4013      	ands	r3, r2
 8005448:	d011      	beq.n	800546e <HAL_UART_IRQHandler+0x132>
 800544a:	239c      	movs	r3, #156	@ 0x9c
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	d00b      	beq.n	800546e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2204      	movs	r2, #4
 800545c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2290      	movs	r2, #144	@ 0x90
 8005462:	589b      	ldr	r3, [r3, r2]
 8005464:	2202      	movs	r2, #2
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2190      	movs	r1, #144	@ 0x90
 800546c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800546e:	23a4      	movs	r3, #164	@ 0xa4
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2208      	movs	r2, #8
 8005476:	4013      	ands	r3, r2
 8005478:	d017      	beq.n	80054aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800547a:	23a0      	movs	r3, #160	@ 0xa0
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	4013      	ands	r3, r2
 8005484:	d105      	bne.n	8005492 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005486:	239c      	movs	r3, #156	@ 0x9c
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a5b      	ldr	r2, [pc, #364]	@ (80055fc <HAL_UART_IRQHandler+0x2c0>)
 800548e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2208      	movs	r2, #8
 8005498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2290      	movs	r2, #144	@ 0x90
 800549e:	589b      	ldr	r3, [r3, r2]
 80054a0:	2208      	movs	r2, #8
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2190      	movs	r1, #144	@ 0x90
 80054a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054aa:	23a4      	movs	r3, #164	@ 0xa4
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4013      	ands	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_UART_IRQHandler+0x1a4>
 80054b8:	23a0      	movs	r3, #160	@ 0xa0
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	04db      	lsls	r3, r3, #19
 80054c2:	4013      	ands	r3, r2
 80054c4:	d00c      	beq.n	80054e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2280      	movs	r2, #128	@ 0x80
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2290      	movs	r2, #144	@ 0x90
 80054d4:	589b      	ldr	r3, [r3, r2]
 80054d6:	2220      	movs	r2, #32
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2190      	movs	r1, #144	@ 0x90
 80054de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2290      	movs	r2, #144	@ 0x90
 80054e4:	589b      	ldr	r3, [r3, r2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d100      	bne.n	80054ec <HAL_UART_IRQHandler+0x1b0>
 80054ea:	e25c      	b.n	80059a6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054ec:	23a4      	movs	r3, #164	@ 0xa4
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2220      	movs	r2, #32
 80054f4:	4013      	ands	r3, r2
 80054f6:	d015      	beq.n	8005524 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054f8:	23a0      	movs	r3, #160	@ 0xa0
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2220      	movs	r2, #32
 8005500:	4013      	ands	r3, r2
 8005502:	d106      	bne.n	8005512 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005504:	239c      	movs	r3, #156	@ 0x9c
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	2380      	movs	r3, #128	@ 0x80
 800550c:	055b      	lsls	r3, r3, #21
 800550e:	4013      	ands	r3, r2
 8005510:	d008      	beq.n	8005524 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	0010      	movs	r0, r2
 8005522:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2290      	movs	r2, #144	@ 0x90
 8005528:	589b      	ldr	r3, [r3, r2]
 800552a:	2194      	movs	r1, #148	@ 0x94
 800552c:	187a      	adds	r2, r7, r1
 800552e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2240      	movs	r2, #64	@ 0x40
 8005538:	4013      	ands	r3, r2
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d004      	beq.n	8005548 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800553e:	187b      	adds	r3, r7, r1
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2228      	movs	r2, #40	@ 0x28
 8005544:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005546:	d04c      	beq.n	80055e2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	0018      	movs	r0, r3
 800554c:	f000 fec8 	bl	80062e0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2240      	movs	r2, #64	@ 0x40
 8005558:	4013      	ands	r3, r2
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d13c      	bne.n	80055d8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800555e:	f3ef 8310 	mrs	r3, PRIMASK
 8005562:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	2090      	movs	r0, #144	@ 0x90
 8005568:	183a      	adds	r2, r7, r0
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	2301      	movs	r3, #1
 800556e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2140      	movs	r1, #64	@ 0x40
 8005584:	438a      	bics	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	183b      	adds	r3, r7, r0
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005590:	f383 8810 	msr	PRIMASK, r3
}
 8005594:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2280      	movs	r2, #128	@ 0x80
 800559a:	589b      	ldr	r3, [r3, r2]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2280      	movs	r2, #128	@ 0x80
 80055a4:	589b      	ldr	r3, [r3, r2]
 80055a6:	4a17      	ldr	r2, [pc, #92]	@ (8005604 <HAL_UART_IRQHandler+0x2c8>)
 80055a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2280      	movs	r2, #128	@ 0x80
 80055ae:	589b      	ldr	r3, [r3, r2]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7fd fbc3 	bl	8002d3c <HAL_DMA_Abort_IT>
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d01c      	beq.n	80055f4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2280      	movs	r2, #128	@ 0x80
 80055be:	589b      	ldr	r3, [r3, r2]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	2180      	movs	r1, #128	@ 0x80
 80055c6:	5852      	ldr	r2, [r2, r1]
 80055c8:	0010      	movs	r0, r2
 80055ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e012      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 fa01 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d6:	e00d      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 f9fc 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e008      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 f9f7 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2290      	movs	r2, #144	@ 0x90
 80055ee:	2100      	movs	r1, #0
 80055f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80055f2:	e1d8      	b.n	80059a6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	46c0      	nop			@ (mov r8, r8)
    return;
 80055f6:	e1d6      	b.n	80059a6 <HAL_UART_IRQHandler+0x66a>
 80055f8:	0000080f 	.word	0x0000080f
 80055fc:	10000001 	.word	0x10000001
 8005600:	04000120 	.word	0x04000120
 8005604:	080063ad 	.word	0x080063ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d000      	beq.n	8005612 <HAL_UART_IRQHandler+0x2d6>
 8005610:	e15d      	b.n	80058ce <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005612:	23a4      	movs	r3, #164	@ 0xa4
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2210      	movs	r2, #16
 800561a:	4013      	ands	r3, r2
 800561c:	d100      	bne.n	8005620 <HAL_UART_IRQHandler+0x2e4>
 800561e:	e156      	b.n	80058ce <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005620:	23a0      	movs	r3, #160	@ 0xa0
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2210      	movs	r2, #16
 8005628:	4013      	ands	r3, r2
 800562a:	d100      	bne.n	800562e <HAL_UART_IRQHandler+0x2f2>
 800562c:	e14f      	b.n	80058ce <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2240      	movs	r2, #64	@ 0x40
 800563e:	4013      	ands	r3, r2
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	d000      	beq.n	8005646 <HAL_UART_IRQHandler+0x30a>
 8005644:	e0c3      	b.n	80057ce <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2280      	movs	r2, #128	@ 0x80
 800564a:	589b      	ldr	r3, [r3, r2]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	217e      	movs	r1, #126	@ 0x7e
 8005652:	187b      	adds	r3, r7, r1
 8005654:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005656:	187b      	adds	r3, r7, r1
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d100      	bne.n	8005660 <HAL_UART_IRQHandler+0x324>
 800565e:	e097      	b.n	8005790 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	225c      	movs	r2, #92	@ 0x5c
 8005664:	5a9b      	ldrh	r3, [r3, r2]
 8005666:	187a      	adds	r2, r7, r1
 8005668:	8812      	ldrh	r2, [r2, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d300      	bcc.n	8005670 <HAL_UART_IRQHandler+0x334>
 800566e:	e08f      	b.n	8005790 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	187a      	adds	r2, r7, r1
 8005674:	215e      	movs	r1, #94	@ 0x5e
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2280      	movs	r2, #128	@ 0x80
 800567e:	589b      	ldr	r3, [r3, r2]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2220      	movs	r2, #32
 8005686:	4013      	ands	r3, r2
 8005688:	d170      	bne.n	800576c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800568a:	f3ef 8310 	mrs	r3, PRIMASK
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005694:	2301      	movs	r3, #1
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	f383 8810 	msr	PRIMASK, r3
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	49c4      	ldr	r1, [pc, #784]	@ (80059bc <HAL_UART_IRQHandler+0x680>)
 80056ac:	400a      	ands	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	f383 8810 	msr	PRIMASK, r3
}
 80056ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056bc:	f3ef 8310 	mrs	r3, PRIMASK
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80056c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80056c6:	2301      	movs	r3, #1
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	f383 8810 	msr	PRIMASK, r3
}
 80056d0:	46c0      	nop			@ (mov r8, r8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	438a      	bics	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056e4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e8:	f383 8810 	msr	PRIMASK, r3
}
 80056ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80056f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80056f8:	2301      	movs	r3, #1
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2140      	movs	r1, #64	@ 0x40
 8005710:	438a      	bics	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005716:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	228c      	movs	r2, #140	@ 0x8c
 8005724:	2120      	movs	r1, #32
 8005726:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800572e:	f3ef 8310 	mrs	r3, PRIMASK
 8005732:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005738:	2301      	movs	r3, #1
 800573a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800573e:	f383 8810 	msr	PRIMASK, r3
}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2110      	movs	r1, #16
 8005750:	438a      	bics	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005756:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800575a:	f383 8810 	msr	PRIMASK, r3
}
 800575e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2280      	movs	r2, #128	@ 0x80
 8005764:	589b      	ldr	r3, [r3, r2]
 8005766:	0018      	movs	r0, r3
 8005768:	f7fd fa86 	bl	8002c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	225c      	movs	r2, #92	@ 0x5c
 8005776:	5a9a      	ldrh	r2, [r3, r2]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	215e      	movs	r1, #94	@ 0x5e
 800577c:	5a5b      	ldrh	r3, [r3, r1]
 800577e:	b29b      	uxth	r3, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f000 f92d 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578e:	e10c      	b.n	80059aa <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	225c      	movs	r2, #92	@ 0x5c
 8005794:	5a9b      	ldrh	r3, [r3, r2]
 8005796:	227e      	movs	r2, #126	@ 0x7e
 8005798:	18ba      	adds	r2, r7, r2
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d000      	beq.n	80057a2 <HAL_UART_IRQHandler+0x466>
 80057a0:	e103      	b.n	80059aa <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2280      	movs	r2, #128	@ 0x80
 80057a6:	589b      	ldr	r3, [r3, r2]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2220      	movs	r2, #32
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d000      	beq.n	80057b6 <HAL_UART_IRQHandler+0x47a>
 80057b4:	e0f9      	b.n	80059aa <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	225c      	movs	r2, #92	@ 0x5c
 80057c0:	5a9a      	ldrh	r2, [r3, r2]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0011      	movs	r1, r2
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 f90e 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
      return;
 80057cc:	e0ed      	b.n	80059aa <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	225c      	movs	r2, #92	@ 0x5c
 80057d2:	5a99      	ldrh	r1, [r3, r2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	225e      	movs	r2, #94	@ 0x5e
 80057d8:	5a9b      	ldrh	r3, [r3, r2]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	208e      	movs	r0, #142	@ 0x8e
 80057de:	183b      	adds	r3, r7, r0
 80057e0:	1a8a      	subs	r2, r1, r2
 80057e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	225e      	movs	r2, #94	@ 0x5e
 80057e8:	5a9b      	ldrh	r3, [r3, r2]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d100      	bne.n	80057f2 <HAL_UART_IRQHandler+0x4b6>
 80057f0:	e0dd      	b.n	80059ae <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80057f2:	183b      	adds	r3, r7, r0
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d100      	bne.n	80057fc <HAL_UART_IRQHandler+0x4c0>
 80057fa:	e0d8      	b.n	80059ae <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005800:	60fb      	str	r3, [r7, #12]
  return(result);
 8005802:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005804:	2488      	movs	r4, #136	@ 0x88
 8005806:	193a      	adds	r2, r7, r4
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	2301      	movs	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4967      	ldr	r1, [pc, #412]	@ (80059c0 <HAL_UART_IRQHandler+0x684>)
 8005822:	400a      	ands	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	193b      	adds	r3, r7, r4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f383 8810 	msr	PRIMASK, r3
}
 8005832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005834:	f3ef 8310 	mrs	r3, PRIMASK
 8005838:	61bb      	str	r3, [r7, #24]
  return(result);
 800583a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800583c:	2484      	movs	r4, #132	@ 0x84
 800583e:	193a      	adds	r2, r7, r4
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	495a      	ldr	r1, [pc, #360]	@ (80059c4 <HAL_UART_IRQHandler+0x688>)
 800585a:	400a      	ands	r2, r1
 800585c:	609a      	str	r2, [r3, #8]
 800585e:	193b      	adds	r3, r7, r4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	228c      	movs	r2, #140	@ 0x8c
 8005870:	2120      	movs	r1, #32
 8005872:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005880:	f3ef 8310 	mrs	r3, PRIMASK
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	2480      	movs	r4, #128	@ 0x80
 800588a:	193a      	adds	r2, r7, r4
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	2301      	movs	r3, #1
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2110      	movs	r1, #16
 80058a6:	438a      	bics	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058be:	183b      	adds	r3, r7, r0
 80058c0:	881a      	ldrh	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0011      	movs	r1, r2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f88e 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058cc:	e06f      	b.n	80059ae <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ce:	23a4      	movs	r3, #164	@ 0xa4
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	035b      	lsls	r3, r3, #13
 80058d8:	4013      	ands	r3, r2
 80058da:	d010      	beq.n	80058fe <HAL_UART_IRQHandler+0x5c2>
 80058dc:	239c      	movs	r3, #156	@ 0x9c
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	03db      	lsls	r3, r3, #15
 80058e6:	4013      	ands	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2280      	movs	r2, #128	@ 0x80
 80058f0:	0352      	lsls	r2, r2, #13
 80058f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 fa90 	bl	8006e1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058fc:	e05a      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058fe:	23a4      	movs	r3, #164	@ 0xa4
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2280      	movs	r2, #128	@ 0x80
 8005906:	4013      	ands	r3, r2
 8005908:	d016      	beq.n	8005938 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800590a:	23a0      	movs	r3, #160	@ 0xa0
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2280      	movs	r2, #128	@ 0x80
 8005912:	4013      	ands	r3, r2
 8005914:	d106      	bne.n	8005924 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005916:	239c      	movs	r3, #156	@ 0x9c
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2380      	movs	r3, #128	@ 0x80
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	4013      	ands	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005928:	2b00      	cmp	r3, #0
 800592a:	d042      	beq.n	80059b2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	0010      	movs	r0, r2
 8005934:	4798      	blx	r3
    }
    return;
 8005936:	e03c      	b.n	80059b2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005938:	23a4      	movs	r3, #164	@ 0xa4
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2240      	movs	r2, #64	@ 0x40
 8005940:	4013      	ands	r3, r2
 8005942:	d00a      	beq.n	800595a <HAL_UART_IRQHandler+0x61e>
 8005944:	23a0      	movs	r3, #160	@ 0xa0
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2240      	movs	r2, #64	@ 0x40
 800594c:	4013      	ands	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fd3d 	bl	80063d2 <UART_EndTransmit_IT>
    return;
 8005958:	e02c      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800595a:	23a4      	movs	r3, #164	@ 0xa4
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	2380      	movs	r3, #128	@ 0x80
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	4013      	ands	r3, r2
 8005966:	d00b      	beq.n	8005980 <HAL_UART_IRQHandler+0x644>
 8005968:	23a0      	movs	r3, #160	@ 0xa0
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	05db      	lsls	r3, r3, #23
 8005972:	4013      	ands	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f001 fa5f 	bl	8006e3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800597e:	e019      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005980:	23a4      	movs	r3, #164	@ 0xa4
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	045b      	lsls	r3, r3, #17
 800598a:	4013      	ands	r3, r2
 800598c:	d012      	beq.n	80059b4 <HAL_UART_IRQHandler+0x678>
 800598e:	23a0      	movs	r3, #160	@ 0xa0
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da0d      	bge.n	80059b4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f001 fa46 	bl	8006e2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059a0:	e008      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
      return;
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	e006      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
    return;
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	e004      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
      return;
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	e002      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
      return;
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	e000      	b.n	80059b4 <HAL_UART_IRQHandler+0x678>
    return;
 80059b2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b02a      	add	sp, #168	@ 0xa8
 80059b8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	fffffeff 	.word	0xfffffeff
 80059c0:	fffffedf 	.word	0xfffffedf
 80059c4:	effffffe 	.word	0xeffffffe

080059c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b002      	add	sp, #8
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	000a      	movs	r2, r1
 80059f2:	1cbb      	adds	r3, r7, #2
 80059f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a08:	231e      	movs	r3, #30
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4aab      	ldr	r2, [pc, #684]	@ (8005cdc <UART_SetConfig+0x2dc>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	0019      	movs	r1, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4aa6      	ldr	r2, [pc, #664]	@ (8005ce0 <UART_SetConfig+0x2e0>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a9d      	ldr	r2, [pc, #628]	@ (8005ce4 <UART_SetConfig+0x2e4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	220f      	movs	r2, #15
 8005a84:	4393      	bics	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a93      	ldr	r2, [pc, #588]	@ (8005ce8 <UART_SetConfig+0x2e8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d127      	bne.n	8005aee <UART_SetConfig+0xee>
 8005a9e:	4b93      	ldr	r3, [pc, #588]	@ (8005cec <UART_SetConfig+0x2ec>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d017      	beq.n	8005ada <UART_SetConfig+0xda>
 8005aaa:	d81b      	bhi.n	8005ae4 <UART_SetConfig+0xe4>
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d00a      	beq.n	8005ac6 <UART_SetConfig+0xc6>
 8005ab0:	d818      	bhi.n	8005ae4 <UART_SetConfig+0xe4>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0xbc>
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d00a      	beq.n	8005ad0 <UART_SetConfig+0xd0>
 8005aba:	e013      	b.n	8005ae4 <UART_SetConfig+0xe4>
 8005abc:	231f      	movs	r3, #31
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e021      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005ac6:	231f      	movs	r3, #31
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e01c      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005ad0:	231f      	movs	r3, #31
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	e017      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005ada:	231f      	movs	r3, #31
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	2208      	movs	r2, #8
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e012      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005ae4:	231f      	movs	r3, #31
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2210      	movs	r2, #16
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e00d      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a7f      	ldr	r2, [pc, #508]	@ (8005cf0 <UART_SetConfig+0x2f0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d104      	bne.n	8005b02 <UART_SetConfig+0x102>
 8005af8:	231f      	movs	r3, #31
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e003      	b.n	8005b0a <UART_SetConfig+0x10a>
 8005b02:	231f      	movs	r3, #31
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2210      	movs	r2, #16
 8005b08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d000      	beq.n	8005b18 <UART_SetConfig+0x118>
 8005b16:	e06f      	b.n	8005bf8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005b18:	231f      	movs	r3, #31
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d01f      	beq.n	8005b62 <UART_SetConfig+0x162>
 8005b22:	dc22      	bgt.n	8005b6a <UART_SetConfig+0x16a>
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d017      	beq.n	8005b58 <UART_SetConfig+0x158>
 8005b28:	dc1f      	bgt.n	8005b6a <UART_SetConfig+0x16a>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <UART_SetConfig+0x134>
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d005      	beq.n	8005b3e <UART_SetConfig+0x13e>
 8005b32:	e01a      	b.n	8005b6a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b34:	f7fd ff90 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e01c      	b.n	8005b78 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8005cec <UART_SetConfig+0x2ec>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	2207      	movs	r2, #7
 8005b46:	4013      	ands	r3, r2
 8005b48:	3301      	adds	r3, #1
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	4869      	ldr	r0, [pc, #420]	@ (8005cf4 <UART_SetConfig+0x2f4>)
 8005b4e:	f7fa fadb 	bl	8000108 <__udivsi3>
 8005b52:	0003      	movs	r3, r0
 8005b54:	61bb      	str	r3, [r7, #24]
        break;
 8005b56:	e00f      	b.n	8005b78 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b58:	f7fd ff20 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	61bb      	str	r3, [r7, #24]
        break;
 8005b60:	e00a      	b.n	8005b78 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	2380      	movs	r3, #128	@ 0x80
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e006      	b.n	8005b78 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b6e:	231e      	movs	r3, #30
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
        break;
 8005b76:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d100      	bne.n	8005b80 <UART_SetConfig+0x180>
 8005b7e:	e097      	b.n	8005cb0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b84:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf8 <UART_SetConfig+0x2f8>)
 8005b86:	0052      	lsls	r2, r2, #1
 8005b88:	5ad3      	ldrh	r3, [r2, r3]
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	69b8      	ldr	r0, [r7, #24]
 8005b8e:	f7fa fabb 	bl	8000108 <__udivsi3>
 8005b92:	0003      	movs	r3, r0
 8005b94:	005a      	lsls	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	18d2      	adds	r2, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	0010      	movs	r0, r2
 8005ba6:	f7fa faaf 	bl	8000108 <__udivsi3>
 8005baa:	0003      	movs	r3, r0
 8005bac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	d91c      	bls.n	8005bee <UART_SetConfig+0x1ee>
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	2380      	movs	r3, #128	@ 0x80
 8005bb8:	025b      	lsls	r3, r3, #9
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d217      	bcs.n	8005bee <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	200e      	movs	r0, #14
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	210f      	movs	r1, #15
 8005bc8:	438a      	bics	r2, r1
 8005bca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	b299      	uxth	r1, r3
 8005bd8:	183b      	adds	r3, r7, r0
 8005bda:	183a      	adds	r2, r7, r0
 8005bdc:	8812      	ldrh	r2, [r2, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	183a      	adds	r2, r7, r0
 8005be8:	8812      	ldrh	r2, [r2, #0]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e060      	b.n	8005cb0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	231e      	movs	r3, #30
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e05b      	b.n	8005cb0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf8:	231f      	movs	r3, #31
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d01f      	beq.n	8005c42 <UART_SetConfig+0x242>
 8005c02:	dc22      	bgt.n	8005c4a <UART_SetConfig+0x24a>
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d017      	beq.n	8005c38 <UART_SetConfig+0x238>
 8005c08:	dc1f      	bgt.n	8005c4a <UART_SetConfig+0x24a>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <UART_SetConfig+0x214>
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d005      	beq.n	8005c1e <UART_SetConfig+0x21e>
 8005c12:	e01a      	b.n	8005c4a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd ff20 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	61bb      	str	r3, [r7, #24]
        break;
 8005c1c:	e01c      	b.n	8005c58 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005c1e:	4b33      	ldr	r3, [pc, #204]	@ (8005cec <UART_SetConfig+0x2ec>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	2207      	movs	r2, #7
 8005c26:	4013      	ands	r3, r2
 8005c28:	3301      	adds	r3, #1
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	4831      	ldr	r0, [pc, #196]	@ (8005cf4 <UART_SetConfig+0x2f4>)
 8005c2e:	f7fa fa6b 	bl	8000108 <__udivsi3>
 8005c32:	0003      	movs	r3, r0
 8005c34:	61bb      	str	r3, [r7, #24]
        break;
 8005c36:	e00f      	b.n	8005c58 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c38:	f7fd feb0 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	61bb      	str	r3, [r7, #24]
        break;
 8005c40:	e00a      	b.n	8005c58 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	61bb      	str	r3, [r7, #24]
        break;
 8005c48:	e006      	b.n	8005c58 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c4e:	231e      	movs	r3, #30
 8005c50:	18fb      	adds	r3, r7, r3
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
        break;
 8005c56:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d028      	beq.n	8005cb0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c62:	4b25      	ldr	r3, [pc, #148]	@ (8005cf8 <UART_SetConfig+0x2f8>)
 8005c64:	0052      	lsls	r2, r2, #1
 8005c66:	5ad3      	ldrh	r3, [r2, r3]
 8005c68:	0019      	movs	r1, r3
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	f7fa fa4c 	bl	8000108 <__udivsi3>
 8005c70:	0003      	movs	r3, r0
 8005c72:	001a      	movs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	18d2      	adds	r2, r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0019      	movs	r1, r3
 8005c82:	0010      	movs	r0, r2
 8005c84:	f7fa fa40 	bl	8000108 <__udivsi3>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	d90a      	bls.n	8005ca8 <UART_SetConfig+0x2a8>
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	2380      	movs	r3, #128	@ 0x80
 8005c96:	025b      	lsls	r3, r3, #9
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d205      	bcs.n	8005ca8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	e003      	b.n	8005cb0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca8:	231e      	movs	r3, #30
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	226a      	movs	r2, #106	@ 0x6a
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2268      	movs	r2, #104	@ 0x68
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ccc:	231e      	movs	r3, #30
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	781b      	ldrb	r3, [r3, #0]
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b008      	add	sp, #32
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	cfff69f3 	.word	0xcfff69f3
 8005ce0:	ffffcfff 	.word	0xffffcfff
 8005ce4:	11fff4ff 	.word	0x11fff4ff
 8005ce8:	40013800 	.word	0x40013800
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40004400 	.word	0x40004400
 8005cf4:	02dc6c00 	.word	0x02dc6c00
 8005cf8:	08007220 	.word	0x08007220

08005cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	2208      	movs	r2, #8
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a4a      	ldr	r2, [pc, #296]	@ (8005e40 <UART_AdvFeatureConfig+0x144>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a43      	ldr	r2, [pc, #268]	@ (8005e44 <UART_AdvFeatureConfig+0x148>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a3b      	ldr	r2, [pc, #236]	@ (8005e48 <UART_AdvFeatureConfig+0x14c>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6e:	2204      	movs	r2, #4
 8005d70:	4013      	ands	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a34      	ldr	r2, [pc, #208]	@ (8005e4c <UART_AdvFeatureConfig+0x150>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	2210      	movs	r2, #16
 8005d92:	4013      	ands	r3, r2
 8005d94:	d00b      	beq.n	8005dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e50 <UART_AdvFeatureConfig+0x154>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	0019      	movs	r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db2:	2220      	movs	r2, #32
 8005db4:	4013      	ands	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4a25      	ldr	r2, [pc, #148]	@ (8005e54 <UART_AdvFeatureConfig+0x158>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	2240      	movs	r2, #64	@ 0x40
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e58 <UART_AdvFeatureConfig+0x15c>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	0019      	movs	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df6:	2380      	movs	r3, #128	@ 0x80
 8005df8:	035b      	lsls	r3, r3, #13
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d10b      	bne.n	8005e16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <UART_AdvFeatureConfig+0x160>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	2280      	movs	r2, #128	@ 0x80
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4a0e      	ldr	r2, [pc, #56]	@ (8005e60 <UART_AdvFeatureConfig+0x164>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	46c0      	nop			@ (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	ffff7fff 	.word	0xffff7fff
 8005e44:	fffdffff 	.word	0xfffdffff
 8005e48:	fffeffff 	.word	0xfffeffff
 8005e4c:	fffbffff 	.word	0xfffbffff
 8005e50:	ffffefff 	.word	0xffffefff
 8005e54:	ffffdfff 	.word	0xffffdfff
 8005e58:	ffefffff 	.word	0xffefffff
 8005e5c:	ff9fffff 	.word	0xff9fffff
 8005e60:	fff7ffff 	.word	0xfff7ffff

08005e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b092      	sub	sp, #72	@ 0x48
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2290      	movs	r2, #144	@ 0x90
 8005e70:	2100      	movs	r1, #0
 8005e72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e74:	f7fc fce2 	bl	800283c <HAL_GetTick>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2208      	movs	r2, #8
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d12d      	bne.n	8005ee6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	0391      	lsls	r1, r2, #14
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4a47      	ldr	r2, [pc, #284]	@ (8005fb0 <UART_CheckIdleState+0x14c>)
 8005e94:	9200      	str	r2, [sp, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f000 f88e 	bl	8005fb8 <UART_WaitOnFlagUntilTimeout>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d022      	beq.n	8005ee6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005eaa:	2301      	movs	r3, #1
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	f383 8810 	msr	PRIMASK, r3
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2180      	movs	r1, #128	@ 0x80
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	f383 8810 	msr	PRIMASK, r3
}
 8005ed0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2288      	movs	r2, #136	@ 0x88
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2284      	movs	r2, #132	@ 0x84
 8005ede:	2100      	movs	r1, #0
 8005ee0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e060      	b.n	8005fa8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d146      	bne.n	8005f82 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef6:	2280      	movs	r2, #128	@ 0x80
 8005ef8:	03d1      	lsls	r1, r2, #15
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb0 <UART_CheckIdleState+0x14c>)
 8005efe:	9200      	str	r2, [sp, #0]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f000 f859 	bl	8005fb8 <UART_WaitOnFlagUntilTimeout>
 8005f06:	1e03      	subs	r3, r0, #0
 8005f08:	d03b      	beq.n	8005f82 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f10:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f14:	2301      	movs	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f383 8810 	msr	PRIMASK, r3
}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4922      	ldr	r1, [pc, #136]	@ (8005fb4 <UART_CheckIdleState+0x150>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f42:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f46:	2301      	movs	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			@ (mov r8, r8)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	438a      	bics	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f383 8810 	msr	PRIMASK, r3
}
 8005f6c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	228c      	movs	r2, #140	@ 0x8c
 8005f72:	2120      	movs	r1, #32
 8005f74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2284      	movs	r2, #132	@ 0x84
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e012      	b.n	8005fa8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2288      	movs	r2, #136	@ 0x88
 8005f86:	2120      	movs	r1, #32
 8005f88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	228c      	movs	r2, #140	@ 0x8c
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2284      	movs	r2, #132	@ 0x84
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b010      	add	sp, #64	@ 0x40
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	01ffffff 	.word	0x01ffffff
 8005fb4:	fffffedf 	.word	0xfffffedf

08005fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	1dfb      	adds	r3, r7, #7
 8005fc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	e051      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	d04e      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd0:	f7fc fc34 	bl	800283c <HAL_GetTick>
 8005fd4:	0002      	movs	r2, r0
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e051      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d03b      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b80      	cmp	r3, #128	@ 0x80
 8005ffa:	d038      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d035      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	2208      	movs	r2, #8
 800600a:	4013      	ands	r3, r2
 800600c:	2b08      	cmp	r3, #8
 800600e:	d111      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2208      	movs	r2, #8
 8006016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f960 	bl	80062e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2290      	movs	r2, #144	@ 0x90
 8006024:	2108      	movs	r1, #8
 8006026:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2284      	movs	r2, #132	@ 0x84
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e02c      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	2380      	movs	r3, #128	@ 0x80
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	401a      	ands	r2, r3
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	429a      	cmp	r2, r3
 8006046:	d112      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2280      	movs	r2, #128	@ 0x80
 800604e:	0112      	lsls	r2, r2, #4
 8006050:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	0018      	movs	r0, r3
 8006056:	f000 f943 	bl	80062e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2290      	movs	r2, #144	@ 0x90
 800605e:	2120      	movs	r1, #32
 8006060:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2284      	movs	r2, #132	@ 0x84
 8006066:	2100      	movs	r1, #0
 8006068:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e00f      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	425a      	negs	r2, r3
 800607e:	4153      	adcs	r3, r2
 8006080:	b2db      	uxtb	r3, r3
 8006082:	001a      	movs	r2, r3
 8006084:	1dfb      	adds	r3, r7, #7
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d09e      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	0018      	movs	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	b004      	add	sp, #16
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b098      	sub	sp, #96	@ 0x60
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	1dbb      	adds	r3, r7, #6
 80060a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1dba      	adds	r2, r7, #6
 80060b0:	215c      	movs	r1, #92	@ 0x5c
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1dba      	adds	r2, r7, #6
 80060ba:	215e      	movs	r1, #94	@ 0x5e
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	2380      	movs	r3, #128	@ 0x80
 80060cc:	015b      	lsls	r3, r3, #5
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d10d      	bne.n	80060ee <UART_Start_Receive_IT+0x56>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <UART_Start_Receive_IT+0x4c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2260      	movs	r2, #96	@ 0x60
 80060de:	497b      	ldr	r1, [pc, #492]	@ (80062cc <UART_Start_Receive_IT+0x234>)
 80060e0:	5299      	strh	r1, [r3, r2]
 80060e2:	e02e      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2260      	movs	r2, #96	@ 0x60
 80060e8:	21ff      	movs	r1, #255	@ 0xff
 80060ea:	5299      	strh	r1, [r3, r2]
 80060ec:	e029      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10d      	bne.n	8006112 <UART_Start_Receive_IT+0x7a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <UART_Start_Receive_IT+0x70>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2260      	movs	r2, #96	@ 0x60
 8006102:	21ff      	movs	r1, #255	@ 0xff
 8006104:	5299      	strh	r1, [r3, r2]
 8006106:	e01c      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2260      	movs	r2, #96	@ 0x60
 800610c:	217f      	movs	r1, #127	@ 0x7f
 800610e:	5299      	strh	r1, [r3, r2]
 8006110:	e017      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	2380      	movs	r3, #128	@ 0x80
 8006118:	055b      	lsls	r3, r3, #21
 800611a:	429a      	cmp	r2, r3
 800611c:	d10d      	bne.n	800613a <UART_Start_Receive_IT+0xa2>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <UART_Start_Receive_IT+0x98>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2260      	movs	r2, #96	@ 0x60
 800612a:	217f      	movs	r1, #127	@ 0x7f
 800612c:	5299      	strh	r1, [r3, r2]
 800612e:	e008      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2260      	movs	r2, #96	@ 0x60
 8006134:	213f      	movs	r1, #63	@ 0x3f
 8006136:	5299      	strh	r1, [r3, r2]
 8006138:	e003      	b.n	8006142 <UART_Start_Receive_IT+0xaa>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2260      	movs	r2, #96	@ 0x60
 800613e:	2100      	movs	r1, #0
 8006140:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2290      	movs	r2, #144	@ 0x90
 8006146:	2100      	movs	r1, #0
 8006148:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	228c      	movs	r2, #140	@ 0x8c
 800614e:	2122      	movs	r1, #34	@ 0x22
 8006150:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800615c:	2301      	movs	r3, #1
 800615e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2101      	movs	r1, #1
 8006174:	430a      	orrs	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800617a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	059b      	lsls	r3, r3, #22
 800618c:	429a      	cmp	r2, r3
 800618e:	d150      	bne.n	8006232 <UART_Start_Receive_IT+0x19a>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2268      	movs	r2, #104	@ 0x68
 8006194:	5a9b      	ldrh	r3, [r3, r2]
 8006196:	1dba      	adds	r2, r7, #6
 8006198:	8812      	ldrh	r2, [r2, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d349      	bcc.n	8006232 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	2380      	movs	r3, #128	@ 0x80
 80061a4:	015b      	lsls	r3, r3, #5
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d107      	bne.n	80061ba <UART_Start_Receive_IT+0x122>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a46      	ldr	r2, [pc, #280]	@ (80062d0 <UART_Start_Receive_IT+0x238>)
 80061b6:	675a      	str	r2, [r3, #116]	@ 0x74
 80061b8:	e002      	b.n	80061c0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a45      	ldr	r2, [pc, #276]	@ (80062d4 <UART_Start_Receive_IT+0x23c>)
 80061be:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d019      	beq.n	80061fc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061c8:	f3ef 8310 	mrs	r3, PRIMASK
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80061ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d2:	2301      	movs	r3, #1
 80061d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f383 8810 	msr	PRIMASK, r3
}
 80061dc:	46c0      	nop			@ (mov r8, r8)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2180      	movs	r1, #128	@ 0x80
 80061ea:	0049      	lsls	r1, r1, #1
 80061ec:	430a      	orrs	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f6:	f383 8810 	msr	PRIMASK, r3
}
 80061fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006204:	657b      	str	r3, [r7, #84]	@ 0x54
 8006206:	2301      	movs	r3, #1
 8006208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	f383 8810 	msr	PRIMASK, r3
}
 8006210:	46c0      	nop			@ (mov r8, r8)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2180      	movs	r1, #128	@ 0x80
 800621e:	0549      	lsls	r1, r1, #21
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	f383 8810 	msr	PRIMASK, r3
}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	e047      	b.n	80062c2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	2380      	movs	r3, #128	@ 0x80
 8006238:	015b      	lsls	r3, r3, #5
 800623a:	429a      	cmp	r2, r3
 800623c:	d107      	bne.n	800624e <UART_Start_Receive_IT+0x1b6>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a23      	ldr	r2, [pc, #140]	@ (80062d8 <UART_Start_Receive_IT+0x240>)
 800624a:	675a      	str	r2, [r3, #116]	@ 0x74
 800624c:	e002      	b.n	8006254 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a22      	ldr	r2, [pc, #136]	@ (80062dc <UART_Start_Receive_IT+0x244>)
 8006252:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d019      	beq.n	8006290 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	61fb      	str	r3, [r7, #28]
  return(result);
 8006262:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006266:	2301      	movs	r3, #1
 8006268:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2190      	movs	r1, #144	@ 0x90
 800627e:	0049      	lsls	r1, r1, #1
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	f383 8810 	msr	PRIMASK, r3
}
 800628e:	e018      	b.n	80062c2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	613b      	str	r3, [r7, #16]
  return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006298:	653b      	str	r3, [r7, #80]	@ 0x50
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2120      	movs	r1, #32
 80062b2:	430a      	orrs	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b018      	add	sp, #96	@ 0x60
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	000001ff 	.word	0x000001ff
 80062d0:	08006ad1 	.word	0x08006ad1
 80062d4:	0800679d 	.word	0x0800679d
 80062d8:	080065e5 	.word	0x080065e5
 80062dc:	0800642d 	.word	0x0800642d

080062e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08e      	sub	sp, #56	@ 0x38
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062e8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ec:	617b      	str	r3, [r7, #20]
  return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f2:	2301      	movs	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f383 8810 	msr	PRIMASK, r3
}
 80062fc:	46c0      	nop			@ (mov r8, r8)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4926      	ldr	r1, [pc, #152]	@ (80063a4 <UART_EndRxTransfer+0xc4>)
 800630a:	400a      	ands	r2, r1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800631a:	f3ef 8310 	mrs	r3, PRIMASK
 800631e:	623b      	str	r3, [r7, #32]
  return(result);
 8006320:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006322:	633b      	str	r3, [r7, #48]	@ 0x30
 8006324:	2301      	movs	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	f383 8810 	msr	PRIMASK, r3
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	491b      	ldr	r1, [pc, #108]	@ (80063a8 <UART_EndRxTransfer+0xc8>)
 800633c:	400a      	ands	r2, r1
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d118      	bne.n	8006386 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	60bb      	str	r3, [r7, #8]
  return(result);
 800635a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800635e:	2301      	movs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	46c0      	nop			@ (mov r8, r8)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2110      	movs	r1, #16
 8006376:	438a      	bics	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	228c      	movs	r2, #140	@ 0x8c
 800638a:	2120      	movs	r1, #32
 800638c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b00e      	add	sp, #56	@ 0x38
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	fffffedf 	.word	0xfffffedf
 80063a8:	effffffe 	.word	0xeffffffe

080063ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	225e      	movs	r2, #94	@ 0x5e
 80063be:	2100      	movs	r1, #0
 80063c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7ff fb07 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b004      	add	sp, #16
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063da:	f3ef 8310 	mrs	r3, PRIMASK
 80063de:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	2301      	movs	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f383 8810 	msr	PRIMASK, r3
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2140      	movs	r1, #64	@ 0x40
 80063fc:	438a      	bics	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2288      	movs	r2, #136	@ 0x88
 8006410:	2120      	movs	r1, #32
 8006412:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	0018      	movs	r0, r3
 800641e:	f7ff fad3 	bl	80059c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b006      	add	sp, #24
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b094      	sub	sp, #80	@ 0x50
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006434:	204e      	movs	r0, #78	@ 0x4e
 8006436:	183b      	adds	r3, r7, r0
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	2160      	movs	r1, #96	@ 0x60
 800643c:	5a52      	ldrh	r2, [r2, r1]
 800643e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	228c      	movs	r2, #140	@ 0x8c
 8006444:	589b      	ldr	r3, [r3, r2]
 8006446:	2b22      	cmp	r3, #34	@ 0x22
 8006448:	d000      	beq.n	800644c <UART_RxISR_8BIT+0x20>
 800644a:	e0ba      	b.n	80065c2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006452:	214c      	movs	r1, #76	@ 0x4c
 8006454:	187b      	adds	r3, r7, r1
 8006456:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006458:	187b      	adds	r3, r7, r1
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	183b      	adds	r3, r7, r0
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b2d9      	uxtb	r1, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006468:	400a      	ands	r2, r1
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	225e      	movs	r2, #94	@ 0x5e
 800647c:	5a9b      	ldrh	r3, [r3, r2]
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b299      	uxth	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	225e      	movs	r2, #94	@ 0x5e
 8006488:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	225e      	movs	r2, #94	@ 0x5e
 800648e:	5a9b      	ldrh	r3, [r3, r2]
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d000      	beq.n	8006498 <UART_RxISR_8BIT+0x6c>
 8006496:	e09c      	b.n	80065d2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006498:	f3ef 8310 	mrs	r3, PRIMASK
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064a2:	2301      	movs	r3, #1
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	f383 8810 	msr	PRIMASK, r3
}
 80064ac:	46c0      	nop			@ (mov r8, r8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4948      	ldr	r1, [pc, #288]	@ (80065dc <UART_RxISR_8BIT+0x1b0>)
 80064ba:	400a      	ands	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c4:	f383 8810 	msr	PRIMASK, r3
}
 80064c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d4:	2301      	movs	r3, #1
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2101      	movs	r1, #1
 80064ec:	438a      	bics	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	f383 8810 	msr	PRIMASK, r3
}
 80064fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	228c      	movs	r2, #140	@ 0x8c
 8006500:	2120      	movs	r1, #32
 8006502:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	041b      	lsls	r3, r3, #16
 800651a:	4013      	ands	r3, r2
 800651c:	d018      	beq.n	8006550 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	61bb      	str	r3, [r7, #24]
  return(result);
 8006524:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006526:	643b      	str	r3, [r7, #64]	@ 0x40
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4928      	ldr	r1, [pc, #160]	@ (80065e0 <UART_RxISR_8BIT+0x1b4>)
 8006540:	400a      	ands	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006546:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d12f      	bne.n	80065b8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800655e:	f3ef 8310 	mrs	r3, PRIMASK
 8006562:	60fb      	str	r3, [r7, #12]
  return(result);
 8006564:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006568:	2301      	movs	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f383 8810 	msr	PRIMASK, r3
}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2110      	movs	r1, #16
 8006580:	438a      	bics	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f383 8810 	msr	PRIMASK, r3
}
 800658e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	2210      	movs	r2, #16
 8006598:	4013      	ands	r3, r2
 800659a:	2b10      	cmp	r3, #16
 800659c:	d103      	bne.n	80065a6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	225c      	movs	r2, #92	@ 0x5c
 80065aa:	5a9a      	ldrh	r2, [r3, r2]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0011      	movs	r1, r2
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7ff fa19 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065b6:	e00c      	b.n	80065d2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fb fac2 	bl	8001b44 <HAL_UART_RxCpltCallback>
}
 80065c0:	e007      	b.n	80065d2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2108      	movs	r1, #8
 80065ce:	430a      	orrs	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]
}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b014      	add	sp, #80	@ 0x50
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	fffffedf 	.word	0xfffffedf
 80065e0:	fbffffff 	.word	0xfbffffff

080065e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b094      	sub	sp, #80	@ 0x50
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065ec:	204e      	movs	r0, #78	@ 0x4e
 80065ee:	183b      	adds	r3, r7, r0
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	2160      	movs	r1, #96	@ 0x60
 80065f4:	5a52      	ldrh	r2, [r2, r1]
 80065f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	228c      	movs	r2, #140	@ 0x8c
 80065fc:	589b      	ldr	r3, [r3, r2]
 80065fe:	2b22      	cmp	r3, #34	@ 0x22
 8006600:	d000      	beq.n	8006604 <UART_RxISR_16BIT+0x20>
 8006602:	e0ba      	b.n	800677a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800660a:	214c      	movs	r1, #76	@ 0x4c
 800660c:	187b      	adds	r3, r7, r1
 800660e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006614:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006616:	187b      	adds	r3, r7, r1
 8006618:	183a      	adds	r2, r7, r0
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	8812      	ldrh	r2, [r2, #0]
 800661e:	4013      	ands	r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006624:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	225e      	movs	r2, #94	@ 0x5e
 8006634:	5a9b      	ldrh	r3, [r3, r2]
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b299      	uxth	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	225e      	movs	r2, #94	@ 0x5e
 8006640:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	225e      	movs	r2, #94	@ 0x5e
 8006646:	5a9b      	ldrh	r3, [r3, r2]
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d000      	beq.n	8006650 <UART_RxISR_16BIT+0x6c>
 800664e:	e09c      	b.n	800678a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006650:	f3ef 8310 	mrs	r3, PRIMASK
 8006654:	623b      	str	r3, [r7, #32]
  return(result);
 8006656:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006658:	647b      	str	r3, [r7, #68]	@ 0x44
 800665a:	2301      	movs	r3, #1
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	f383 8810 	msr	PRIMASK, r3
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4948      	ldr	r1, [pc, #288]	@ (8006794 <UART_RxISR_16BIT+0x1b0>)
 8006672:	400a      	ands	r2, r1
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006678:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	f383 8810 	msr	PRIMASK, r3
}
 8006680:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006682:	f3ef 8310 	mrs	r3, PRIMASK
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	643b      	str	r3, [r7, #64]	@ 0x40
 800668c:	2301      	movs	r3, #1
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	f383 8810 	msr	PRIMASK, r3
}
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	438a      	bics	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
 80066a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	f383 8810 	msr	PRIMASK, r3
}
 80066b2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	228c      	movs	r2, #140	@ 0x8c
 80066b8:	2120      	movs	r1, #32
 80066ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	2380      	movs	r3, #128	@ 0x80
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	4013      	ands	r3, r2
 80066d4:	d018      	beq.n	8006708 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	617b      	str	r3, [r7, #20]
  return(result);
 80066dc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e0:	2301      	movs	r3, #1
 80066e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4928      	ldr	r1, [pc, #160]	@ (8006798 <UART_RxISR_16BIT+0x1b4>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d12f      	bne.n	8006770 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006716:	f3ef 8310 	mrs	r3, PRIMASK
 800671a:	60bb      	str	r3, [r7, #8]
  return(result);
 800671c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006720:	2301      	movs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2110      	movs	r1, #16
 8006738:	438a      	bics	r2, r1
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f383 8810 	msr	PRIMASK, r3
}
 8006746:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	2210      	movs	r2, #16
 8006750:	4013      	ands	r3, r2
 8006752:	2b10      	cmp	r3, #16
 8006754:	d103      	bne.n	800675e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2210      	movs	r2, #16
 800675c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	225c      	movs	r2, #92	@ 0x5c
 8006762:	5a9a      	ldrh	r2, [r3, r2]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0011      	movs	r1, r2
 8006768:	0018      	movs	r0, r3
 800676a:	f7ff f93d 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800676e:	e00c      	b.n	800678a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f7fb f9e6 	bl	8001b44 <HAL_UART_RxCpltCallback>
}
 8006778:	e007      	b.n	800678a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2108      	movs	r1, #8
 8006786:	430a      	orrs	r2, r1
 8006788:	619a      	str	r2, [r3, #24]
}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	b014      	add	sp, #80	@ 0x50
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	fffffedf 	.word	0xfffffedf
 8006798:	fbffffff 	.word	0xfbffffff

0800679c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0a0      	sub	sp, #128	@ 0x80
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067a4:	237a      	movs	r3, #122	@ 0x7a
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	2160      	movs	r1, #96	@ 0x60
 80067ac:	5a52      	ldrh	r2, [r2, r1]
 80067ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	228c      	movs	r2, #140	@ 0x8c
 80067cc:	589b      	ldr	r3, [r3, r2]
 80067ce:	2b22      	cmp	r3, #34	@ 0x22
 80067d0:	d000      	beq.n	80067d4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80067d2:	e166      	b.n	8006aa2 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067d4:	236e      	movs	r3, #110	@ 0x6e
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	2168      	movs	r1, #104	@ 0x68
 80067dc:	5a52      	ldrh	r2, [r2, r1]
 80067de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067e0:	e10d      	b.n	80069fe <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067e8:	216c      	movs	r1, #108	@ 0x6c
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067ee:	187b      	adds	r3, r7, r1
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	237a      	movs	r3, #122	@ 0x7a
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b2d9      	uxtb	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	400a      	ands	r2, r1
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	225e      	movs	r2, #94	@ 0x5e
 8006814:	5a9b      	ldrh	r3, [r3, r2]
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b299      	uxth	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	225e      	movs	r2, #94	@ 0x5e
 8006820:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800682a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800682c:	2207      	movs	r2, #7
 800682e:	4013      	ands	r3, r2
 8006830:	d049      	beq.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006834:	2201      	movs	r2, #1
 8006836:	4013      	ands	r3, r2
 8006838:	d010      	beq.n	800685c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800683a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800683c:	2380      	movs	r3, #128	@ 0x80
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4013      	ands	r3, r2
 8006842:	d00b      	beq.n	800685c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2290      	movs	r2, #144	@ 0x90
 8006850:	589b      	ldr	r3, [r3, r2]
 8006852:	2201      	movs	r2, #1
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2190      	movs	r1, #144	@ 0x90
 800685a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800685e:	2202      	movs	r2, #2
 8006860:	4013      	ands	r3, r2
 8006862:	d00f      	beq.n	8006884 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006864:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006866:	2201      	movs	r2, #1
 8006868:	4013      	ands	r3, r2
 800686a:	d00b      	beq.n	8006884 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2202      	movs	r2, #2
 8006872:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2290      	movs	r2, #144	@ 0x90
 8006878:	589b      	ldr	r3, [r3, r2]
 800687a:	2204      	movs	r2, #4
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2190      	movs	r1, #144	@ 0x90
 8006882:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006886:	2204      	movs	r2, #4
 8006888:	4013      	ands	r3, r2
 800688a:	d00f      	beq.n	80068ac <UART_RxISR_8BIT_FIFOEN+0x110>
 800688c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800688e:	2201      	movs	r2, #1
 8006890:	4013      	ands	r3, r2
 8006892:	d00b      	beq.n	80068ac <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2204      	movs	r2, #4
 800689a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2290      	movs	r2, #144	@ 0x90
 80068a0:	589b      	ldr	r3, [r3, r2]
 80068a2:	2202      	movs	r2, #2
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2190      	movs	r1, #144	@ 0x90
 80068aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2290      	movs	r2, #144	@ 0x90
 80068b0:	589b      	ldr	r3, [r3, r2]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff f88d 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2290      	movs	r2, #144	@ 0x90
 80068c2:	2100      	movs	r1, #0
 80068c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	225e      	movs	r2, #94	@ 0x5e
 80068ca:	5a9b      	ldrh	r3, [r3, r2]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d000      	beq.n	80068d4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80068d2:	e094      	b.n	80069fe <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068d4:	f3ef 8310 	mrs	r3, PRIMASK
 80068d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068de:	2301      	movs	r3, #1
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4971      	ldr	r1, [pc, #452]	@ (8006abc <UART_RxISR_8BIT_FIFOEN+0x320>)
 80068f6:	400a      	ands	r2, r1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006906:	f3ef 8310 	mrs	r3, PRIMASK
 800690a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800690c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800690e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006910:	2301      	movs	r3, #1
 8006912:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4966      	ldr	r1, [pc, #408]	@ (8006ac0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8006928:	400a      	ands	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	228c      	movs	r2, #140	@ 0x8c
 800693c:	2120      	movs	r1, #32
 800693e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	2380      	movs	r3, #128	@ 0x80
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	4013      	ands	r3, r2
 8006958:	d018      	beq.n	800698c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800695a:	f3ef 8310 	mrs	r3, PRIMASK
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006962:	663b      	str	r3, [r7, #96]	@ 0x60
 8006964:	2301      	movs	r3, #1
 8006966:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	f383 8810 	msr	PRIMASK, r3
}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4952      	ldr	r1, [pc, #328]	@ (8006ac4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800697c:	400a      	ands	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	f383 8810 	msr	PRIMASK, r3
}
 800698a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d12f      	bne.n	80069f4 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	623b      	str	r3, [r7, #32]
  return(result);
 80069a0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069a4:	2301      	movs	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2110      	movs	r1, #16
 80069bc:	438a      	bics	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	2210      	movs	r2, #16
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d103      	bne.n	80069e2 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	225c      	movs	r2, #92	@ 0x5c
 80069e6:	5a9a      	ldrh	r2, [r3, r2]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0011      	movs	r1, r2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7fe fffb 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80069f2:	e00e      	b.n	8006a12 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fb f8a4 	bl	8001b44 <HAL_UART_RxCpltCallback>
        break;
 80069fc:	e009      	b.n	8006a12 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069fe:	236e      	movs	r3, #110	@ 0x6e
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d000      	beq.n	8006a12 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006a10:	e6e7      	b.n	80067e2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a12:	205a      	movs	r0, #90	@ 0x5a
 8006a14:	183b      	adds	r3, r7, r0
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	215e      	movs	r1, #94	@ 0x5e
 8006a1a:	5a52      	ldrh	r2, [r2, r1]
 8006a1c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a1e:	0001      	movs	r1, r0
 8006a20:	187b      	adds	r3, r7, r1
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d044      	beq.n	8006ab2 <UART_RxISR_8BIT_FIFOEN+0x316>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2268      	movs	r2, #104	@ 0x68
 8006a2c:	5a9b      	ldrh	r3, [r3, r2]
 8006a2e:	187a      	adds	r2, r7, r1
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d23d      	bcs.n	8006ab2 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a36:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			@ (mov r8, r8)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	491c      	ldr	r1, [pc, #112]	@ (8006ac8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f383 8810 	msr	PRIMASK, r3
}
 8006a66:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006a6c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	617b      	str	r3, [r7, #20]
  return(result);
 8006a74:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a78:	2301      	movs	r3, #1
 8006a7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f383 8810 	msr	PRIMASK, r3
}
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2120      	movs	r1, #32
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aa0:	e007      	b.n	8006ab2 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2108      	movs	r1, #8
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b020      	add	sp, #128	@ 0x80
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	fffffeff 	.word	0xfffffeff
 8006ac0:	effffffe 	.word	0xeffffffe
 8006ac4:	fbffffff 	.word	0xfbffffff
 8006ac8:	efffffff 	.word	0xefffffff
 8006acc:	0800642d 	.word	0x0800642d

08006ad0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b0a2      	sub	sp, #136	@ 0x88
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ad8:	2382      	movs	r3, #130	@ 0x82
 8006ada:	18fb      	adds	r3, r7, r3
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	2160      	movs	r1, #96	@ 0x60
 8006ae0:	5a52      	ldrh	r2, [r2, r1]
 8006ae2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	2284      	movs	r2, #132	@ 0x84
 8006aec:	18ba      	adds	r2, r7, r2
 8006aee:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	228c      	movs	r2, #140	@ 0x8c
 8006b04:	589b      	ldr	r3, [r3, r2]
 8006b06:	2b22      	cmp	r3, #34	@ 0x22
 8006b08:	d000      	beq.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006b0a:	e170      	b.n	8006dee <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b0c:	2376      	movs	r3, #118	@ 0x76
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	2168      	movs	r1, #104	@ 0x68
 8006b14:	5a52      	ldrh	r2, [r2, r1]
 8006b16:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b18:	e115      	b.n	8006d46 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b20:	2174      	movs	r1, #116	@ 0x74
 8006b22:	187b      	adds	r3, r7, r1
 8006b24:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b2c:	187b      	adds	r3, r7, r1
 8006b2e:	2282      	movs	r2, #130	@ 0x82
 8006b30:	18ba      	adds	r2, r7, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	8812      	ldrh	r2, [r2, #0]
 8006b36:	4013      	ands	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	225e      	movs	r2, #94	@ 0x5e
 8006b4c:	5a9b      	ldrh	r3, [r3, r2]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b299      	uxth	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	225e      	movs	r2, #94	@ 0x5e
 8006b58:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2184      	movs	r1, #132	@ 0x84
 8006b62:	187a      	adds	r2, r7, r1
 8006b64:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b66:	187b      	adds	r3, r7, r1
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	d04e      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b70:	187b      	adds	r3, r7, r1
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2201      	movs	r2, #1
 8006b76:	4013      	ands	r3, r2
 8006b78:	d010      	beq.n	8006b9c <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006b7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b7c:	2380      	movs	r3, #128	@ 0x80
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4013      	ands	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2290      	movs	r2, #144	@ 0x90
 8006b90:	589b      	ldr	r3, [r3, r2]
 8006b92:	2201      	movs	r2, #1
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2190      	movs	r1, #144	@ 0x90
 8006b9a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b9c:	2384      	movs	r3, #132	@ 0x84
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006baa:	2201      	movs	r2, #1
 8006bac:	4013      	ands	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2290      	movs	r2, #144	@ 0x90
 8006bbc:	589b      	ldr	r3, [r3, r2]
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2190      	movs	r1, #144	@ 0x90
 8006bc6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc8:	2384      	movs	r3, #132	@ 0x84
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2204      	movs	r2, #4
 8006be2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2290      	movs	r2, #144	@ 0x90
 8006be8:	589b      	ldr	r3, [r3, r2]
 8006bea:	2202      	movs	r2, #2
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2190      	movs	r1, #144	@ 0x90
 8006bf2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2290      	movs	r2, #144	@ 0x90
 8006bf8:	589b      	ldr	r3, [r3, r2]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f7fe fee9 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2290      	movs	r2, #144	@ 0x90
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	225e      	movs	r2, #94	@ 0x5e
 8006c12:	5a9b      	ldrh	r3, [r3, r2]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d000      	beq.n	8006c1c <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006c1a:	e094      	b.n	8006d46 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c26:	2301      	movs	r3, #1
 8006c28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c2c:	f383 8810 	msr	PRIMASK, r3
}
 8006c30:	46c0      	nop			@ (mov r8, r8)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4972      	ldr	r1, [pc, #456]	@ (8006e08 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c48:	f383 8810 	msr	PRIMASK, r3
}
 8006c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c58:	2301      	movs	r3, #1
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4967      	ldr	r1, [pc, #412]	@ (8006e0c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c7a:	f383 8810 	msr	PRIMASK, r3
}
 8006c7e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	228c      	movs	r2, #140	@ 0x8c
 8006c84:	2120      	movs	r1, #32
 8006c86:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	2380      	movs	r3, #128	@ 0x80
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006caa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cac:	2301      	movs	r3, #1
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb2:	f383 8810 	msr	PRIMASK, r3
}
 8006cb6:	46c0      	nop			@ (mov r8, r8)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4953      	ldr	r1, [pc, #332]	@ (8006e10 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006cc4:	400a      	ands	r2, r1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	f383 8810 	msr	PRIMASK, r3
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d12f      	bne.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cec:	2301      	movs	r3, #1
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2110      	movs	r1, #16
 8006d04:	438a      	bics	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0e:	f383 8810 	msr	PRIMASK, r3
}
 8006d12:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d103      	bne.n	8006d2a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2210      	movs	r2, #16
 8006d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	225c      	movs	r2, #92	@ 0x5c
 8006d2e:	5a9a      	ldrh	r2, [r3, r2]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	0011      	movs	r1, r2
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7fe fe57 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006d3a:	e010      	b.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7fa ff00 	bl	8001b44 <HAL_UART_RxCpltCallback>
        break;
 8006d44:	e00b      	b.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d46:	2376      	movs	r3, #118	@ 0x76
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8006d50:	2384      	movs	r3, #132	@ 0x84
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2220      	movs	r2, #32
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d000      	beq.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8006d5c:	e6dd      	b.n	8006b1a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d5e:	205e      	movs	r0, #94	@ 0x5e
 8006d60:	183b      	adds	r3, r7, r0
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	215e      	movs	r1, #94	@ 0x5e
 8006d66:	5a52      	ldrh	r2, [r2, r1]
 8006d68:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d6a:	0001      	movs	r1, r0
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d044      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x32e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2268      	movs	r2, #104	@ 0x68
 8006d78:	5a9b      	ldrh	r3, [r3, r2]
 8006d7a:	187a      	adds	r2, r7, r1
 8006d7c:	8812      	ldrh	r2, [r2, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d23d      	bcs.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d82:	f3ef 8310 	mrs	r3, PRIMASK
 8006d86:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f383 8810 	msr	PRIMASK, r3
}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	491c      	ldr	r1, [pc, #112]	@ (8006e14 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8006da4:	400a      	ands	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006daa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f383 8810 	msr	PRIMASK, r3
}
 8006db2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006db8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dba:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dc0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f383 8810 	msr	PRIMASK, r3
}
 8006dce:	46c0      	nop			@ (mov r8, r8)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2120      	movs	r1, #32
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f383 8810 	msr	PRIMASK, r3
}
 8006dea:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dec:	e007      	b.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2108      	movs	r1, #8
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b022      	add	sp, #136	@ 0x88
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	fffffeff 	.word	0xfffffeff
 8006e0c:	effffffe 	.word	0xeffffffe
 8006e10:	fbffffff 	.word	0xfbffffff
 8006e14:	efffffff 	.word	0xefffffff
 8006e18:	080065e5 	.word	0x080065e5

08006e1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e24:	46c0      	nop			@ (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b002      	add	sp, #8
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e34:	46c0      	nop			@ (mov r8, r8)
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e44:	46c0      	nop			@ (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2284      	movs	r2, #132	@ 0x84
 8006e58:	5c9b      	ldrb	r3, [r3, r2]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e027      	b.n	8006eb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2284      	movs	r2, #132	@ 0x84
 8006e66:	2101      	movs	r1, #1
 8006e68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2288      	movs	r2, #136	@ 0x88
 8006e6e:	2124      	movs	r1, #36	@ 0x24
 8006e70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2101      	movs	r1, #1
 8006e86:	438a      	bics	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8006ebc <HAL_UARTEx_DisableFifoMode+0x70>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2288      	movs	r2, #136	@ 0x88
 8006ea4:	2120      	movs	r1, #32
 8006ea6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2284      	movs	r2, #132	@ 0x84
 8006eac:	2100      	movs	r1, #0
 8006eae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b004      	add	sp, #16
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			@ (mov r8, r8)
 8006ebc:	dfffffff 	.word	0xdfffffff

08006ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2284      	movs	r2, #132	@ 0x84
 8006ece:	5c9b      	ldrb	r3, [r3, r2]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e02e      	b.n	8006f36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2284      	movs	r2, #132	@ 0x84
 8006edc:	2101      	movs	r1, #1
 8006ede:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2288      	movs	r2, #136	@ 0x88
 8006ee4:	2124      	movs	r1, #36	@ 0x24
 8006ee6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2101      	movs	r1, #1
 8006efc:	438a      	bics	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	08d9      	lsrs	r1, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f854 	bl	8006fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2288      	movs	r2, #136	@ 0x88
 8006f28:	2120      	movs	r1, #32
 8006f2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2284      	movs	r2, #132	@ 0x84
 8006f30:	2100      	movs	r1, #0
 8006f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b004      	add	sp, #16
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2284      	movs	r2, #132	@ 0x84
 8006f4e:	5c9b      	ldrb	r3, [r3, r2]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e02f      	b.n	8006fb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2284      	movs	r2, #132	@ 0x84
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2288      	movs	r2, #136	@ 0x88
 8006f64:	2124      	movs	r1, #36	@ 0x24
 8006f66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	438a      	bics	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f000 f813 	bl	8006fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2288      	movs	r2, #136	@ 0x88
 8006faa:	2120      	movs	r1, #32
 8006fac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2284      	movs	r2, #132	@ 0x84
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b004      	add	sp, #16
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	f1ffffff 	.word	0xf1ffffff

08006fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	226a      	movs	r2, #106	@ 0x6a
 8006fd8:	2101      	movs	r1, #1
 8006fda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2268      	movs	r2, #104	@ 0x68
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fe4:	e043      	b.n	800706e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fe6:	260f      	movs	r6, #15
 8006fe8:	19bb      	adds	r3, r7, r6
 8006fea:	2208      	movs	r2, #8
 8006fec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fee:	200e      	movs	r0, #14
 8006ff0:	183b      	adds	r3, r7, r0
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	0e5b      	lsrs	r3, r3, #25
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	240d      	movs	r4, #13
 8007002:	193b      	adds	r3, r7, r4
 8007004:	2107      	movs	r1, #7
 8007006:	400a      	ands	r2, r1
 8007008:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	0f5b      	lsrs	r3, r3, #29
 8007012:	b2da      	uxtb	r2, r3
 8007014:	250c      	movs	r5, #12
 8007016:	197b      	adds	r3, r7, r5
 8007018:	2107      	movs	r1, #7
 800701a:	400a      	ands	r2, r1
 800701c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800701e:	183b      	adds	r3, r7, r0
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	197a      	adds	r2, r7, r5
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	4914      	ldr	r1, [pc, #80]	@ (8007078 <UARTEx_SetNbDataToProcess+0xb4>)
 8007028:	5c8a      	ldrb	r2, [r1, r2]
 800702a:	435a      	muls	r2, r3
 800702c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800702e:	197b      	adds	r3, r7, r5
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4a12      	ldr	r2, [pc, #72]	@ (800707c <UARTEx_SetNbDataToProcess+0xb8>)
 8007034:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007036:	0019      	movs	r1, r3
 8007038:	f7f9 f8f0 	bl	800021c <__divsi3>
 800703c:	0003      	movs	r3, r0
 800703e:	b299      	uxth	r1, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	226a      	movs	r2, #106	@ 0x6a
 8007044:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007046:	19bb      	adds	r3, r7, r6
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	193a      	adds	r2, r7, r4
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	490a      	ldr	r1, [pc, #40]	@ (8007078 <UARTEx_SetNbDataToProcess+0xb4>)
 8007050:	5c8a      	ldrb	r2, [r1, r2]
 8007052:	435a      	muls	r2, r3
 8007054:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007056:	193b      	adds	r3, r7, r4
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4a08      	ldr	r2, [pc, #32]	@ (800707c <UARTEx_SetNbDataToProcess+0xb8>)
 800705c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800705e:	0019      	movs	r1, r3
 8007060:	f7f9 f8dc 	bl	800021c <__divsi3>
 8007064:	0003      	movs	r3, r0
 8007066:	b299      	uxth	r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2268      	movs	r2, #104	@ 0x68
 800706c:	5299      	strh	r1, [r3, r2]
}
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b005      	add	sp, #20
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	08007238 	.word	0x08007238
 800707c:	08007240 	.word	0x08007240

08007080 <memset>:
 8007080:	0003      	movs	r3, r0
 8007082:	1882      	adds	r2, r0, r2
 8007084:	4293      	cmp	r3, r2
 8007086:	d100      	bne.n	800708a <memset+0xa>
 8007088:	4770      	bx	lr
 800708a:	7019      	strb	r1, [r3, #0]
 800708c:	3301      	adds	r3, #1
 800708e:	e7f9      	b.n	8007084 <memset+0x4>

08007090 <__libc_init_array>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	2600      	movs	r6, #0
 8007094:	4c0c      	ldr	r4, [pc, #48]	@ (80070c8 <__libc_init_array+0x38>)
 8007096:	4d0d      	ldr	r5, [pc, #52]	@ (80070cc <__libc_init_array+0x3c>)
 8007098:	1b64      	subs	r4, r4, r5
 800709a:	10a4      	asrs	r4, r4, #2
 800709c:	42a6      	cmp	r6, r4
 800709e:	d109      	bne.n	80070b4 <__libc_init_array+0x24>
 80070a0:	2600      	movs	r6, #0
 80070a2:	f000 f819 	bl	80070d8 <_init>
 80070a6:	4c0a      	ldr	r4, [pc, #40]	@ (80070d0 <__libc_init_array+0x40>)
 80070a8:	4d0a      	ldr	r5, [pc, #40]	@ (80070d4 <__libc_init_array+0x44>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	42a6      	cmp	r6, r4
 80070b0:	d105      	bne.n	80070be <__libc_init_array+0x2e>
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	00b3      	lsls	r3, r6, #2
 80070b6:	58eb      	ldr	r3, [r5, r3]
 80070b8:	4798      	blx	r3
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7ee      	b.n	800709c <__libc_init_array+0xc>
 80070be:	00b3      	lsls	r3, r6, #2
 80070c0:	58eb      	ldr	r3, [r5, r3]
 80070c2:	4798      	blx	r3
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7f2      	b.n	80070ae <__libc_init_array+0x1e>
 80070c8:	08007248 	.word	0x08007248
 80070cc:	08007248 	.word	0x08007248
 80070d0:	0800724c 	.word	0x0800724c
 80070d4:	08007248 	.word	0x08007248

080070d8 <_init>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr

080070e4 <_fini>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr
