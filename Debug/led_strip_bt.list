
led_strip_bt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007350  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007410  08007410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007568  08007568  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007568  08007568  00009014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007568  08007568  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007570  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000014  08007584  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08007584  0000977c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103de  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  0001941a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac7  00000000  00000000  0001c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014206  00000000  00000000  0001cfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fdd  00000000  00000000  000311ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007facf  00000000  00000000  0004218a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1c59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000c1c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000c5048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080073f8 	.word	0x080073f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080073f8 	.word	0x080073f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fbab 	bl	8000b58 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fb33 	bl	8000a78 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb9d 	bl	8000b58 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb93 	bl	8000b58 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb41 	bl	8000ac8 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb37 	bl	8000ac8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	024b      	lsls	r3, r1, #9
 800046c:	0a5a      	lsrs	r2, r3, #9
 800046e:	4694      	mov	ip, r2
 8000470:	004a      	lsls	r2, r1, #1
 8000472:	0fc9      	lsrs	r1, r1, #31
 8000474:	46ce      	mov	lr, r9
 8000476:	4647      	mov	r7, r8
 8000478:	4689      	mov	r9, r1
 800047a:	0045      	lsls	r5, r0, #1
 800047c:	0246      	lsls	r6, r0, #9
 800047e:	0e2d      	lsrs	r5, r5, #24
 8000480:	0e12      	lsrs	r2, r2, #24
 8000482:	b580      	push	{r7, lr}
 8000484:	0999      	lsrs	r1, r3, #6
 8000486:	0a77      	lsrs	r7, r6, #9
 8000488:	0fc4      	lsrs	r4, r0, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1aab      	subs	r3, r5, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	d020      	beq.n	80004d4 <__aeabi_fadd+0x6c>
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd0c      	ble.n	80004b0 <__aeabi_fadd+0x48>
 8000496:	2a00      	cmp	r2, #0
 8000498:	d134      	bne.n	8000504 <__aeabi_fadd+0x9c>
 800049a:	2900      	cmp	r1, #0
 800049c:	d02a      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x3e>
 80004a4:	e08f      	b.n	80005c6 <__aeabi_fadd+0x15e>
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d100      	bne.n	80004ac <__aeabi_fadd+0x44>
 80004aa:	e0cd      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004ac:	0013      	movs	r3, r2
 80004ae:	e02f      	b.n	8000510 <__aeabi_fadd+0xa8>
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x10e>
 80004b4:	1b53      	subs	r3, r2, r5
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x54>
 80004ba:	e0ee      	b.n	800069a <__aeabi_fadd+0x232>
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_fadd+0x5a>
 80004c0:	e13e      	b.n	8000740 <__aeabi_fadd+0x2d8>
 80004c2:	1e5c      	subs	r4, r3, #1
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x62>
 80004c8:	e16b      	b.n	80007a2 <__aeabi_fadd+0x33a>
 80004ca:	2bff      	cmp	r3, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x68>
 80004ce:	e0b9      	b.n	8000644 <__aeabi_fadd+0x1dc>
 80004d0:	0023      	movs	r3, r4
 80004d2:	e0e7      	b.n	80006a4 <__aeabi_fadd+0x23c>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x72>
 80004d8:	e0a4      	b.n	8000624 <__aeabi_fadd+0x1bc>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d069      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80004de:	2dff      	cmp	r5, #255	@ 0xff
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x7c>
 80004e2:	e0b1      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004e4:	2280      	movs	r2, #128	@ 0x80
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	4311      	orrs	r1, r2
 80004ea:	2b1b      	cmp	r3, #27
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_fadd+0x88>
 80004ee:	e0e9      	b.n	80006c4 <__aeabi_fadd+0x25c>
 80004f0:	002b      	movs	r3, r5
 80004f2:	3605      	adds	r6, #5
 80004f4:	08f7      	lsrs	r7, r6, #3
 80004f6:	2bff      	cmp	r3, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e0a5      	b.n	8000648 <__aeabi_fadd+0x1e0>
 80004fc:	027a      	lsls	r2, r7, #9
 80004fe:	0a52      	lsrs	r2, r2, #9
 8000500:	b2d8      	uxtb	r0, r3
 8000502:	e030      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000504:	2dff      	cmp	r5, #255	@ 0xff
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0xa2>
 8000508:	e09e      	b.n	8000648 <__aeabi_fadd+0x1e0>
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	04d2      	lsls	r2, r2, #19
 800050e:	4311      	orrs	r1, r2
 8000510:	2001      	movs	r0, #1
 8000512:	2b1b      	cmp	r3, #27
 8000514:	dc08      	bgt.n	8000528 <__aeabi_fadd+0xc0>
 8000516:	0008      	movs	r0, r1
 8000518:	2220      	movs	r2, #32
 800051a:	40d8      	lsrs	r0, r3
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4099      	lsls	r1, r3
 8000520:	000b      	movs	r3, r1
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4193      	sbcs	r3, r2
 8000526:	4318      	orrs	r0, r3
 8000528:	1a36      	subs	r6, r6, r0
 800052a:	0173      	lsls	r3, r6, #5
 800052c:	d400      	bmi.n	8000530 <__aeabi_fadd+0xc8>
 800052e:	e071      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000530:	01b6      	lsls	r6, r6, #6
 8000532:	09b7      	lsrs	r7, r6, #6
 8000534:	0038      	movs	r0, r7
 8000536:	f001 fc15 	bl	8001d64 <__clzsi2>
 800053a:	003b      	movs	r3, r7
 800053c:	3805      	subs	r0, #5
 800053e:	4083      	lsls	r3, r0
 8000540:	4285      	cmp	r5, r0
 8000542:	dd4d      	ble.n	80005e0 <__aeabi_fadd+0x178>
 8000544:	4eb4      	ldr	r6, [pc, #720]	@ (8000818 <__aeabi_fadd+0x3b0>)
 8000546:	1a2d      	subs	r5, r5, r0
 8000548:	401e      	ands	r6, r3
 800054a:	075a      	lsls	r2, r3, #29
 800054c:	d068      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 800054e:	220f      	movs	r2, #15
 8000550:	4013      	ands	r3, r2
 8000552:	2b04      	cmp	r3, #4
 8000554:	d064      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000556:	3604      	adds	r6, #4
 8000558:	0173      	lsls	r3, r6, #5
 800055a:	d561      	bpl.n	8000620 <__aeabi_fadd+0x1b8>
 800055c:	1c68      	adds	r0, r5, #1
 800055e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000560:	d154      	bne.n	800060c <__aeabi_fadd+0x1a4>
 8000562:	20ff      	movs	r0, #255	@ 0xff
 8000564:	2200      	movs	r2, #0
 8000566:	05c0      	lsls	r0, r0, #23
 8000568:	4310      	orrs	r0, r2
 800056a:	07e4      	lsls	r4, r4, #31
 800056c:	4320      	orrs	r0, r4
 800056e:	bcc0      	pop	{r6, r7}
 8000570:	46b9      	mov	r9, r7
 8000572:	46b0      	mov	r8, r6
 8000574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000576:	22fe      	movs	r2, #254	@ 0xfe
 8000578:	4690      	mov	r8, r2
 800057a:	1c68      	adds	r0, r5, #1
 800057c:	0002      	movs	r2, r0
 800057e:	4640      	mov	r0, r8
 8000580:	4210      	tst	r0, r2
 8000582:	d16b      	bne.n	800065c <__aeabi_fadd+0x1f4>
 8000584:	2d00      	cmp	r5, #0
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x122>
 8000588:	e0dd      	b.n	8000746 <__aeabi_fadd+0x2de>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x128>
 800058e:	e102      	b.n	8000796 <__aeabi_fadd+0x32e>
 8000590:	2900      	cmp	r1, #0
 8000592:	d0b3      	beq.n	80004fc <__aeabi_fadd+0x94>
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	1a77      	subs	r7, r6, r1
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4217      	tst	r7, r2
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x138>
 800059e:	e136      	b.n	800080e <__aeabi_fadd+0x3a6>
 80005a0:	464c      	mov	r4, r9
 80005a2:	1b8e      	subs	r6, r1, r6
 80005a4:	d061      	beq.n	800066a <__aeabi_fadd+0x202>
 80005a6:	2001      	movs	r0, #1
 80005a8:	4216      	tst	r6, r2
 80005aa:	d130      	bne.n	800060e <__aeabi_fadd+0x1a6>
 80005ac:	2300      	movs	r3, #0
 80005ae:	08f7      	lsrs	r7, r6, #3
 80005b0:	e7a4      	b.n	80004fc <__aeabi_fadd+0x94>
 80005b2:	2900      	cmp	r1, #0
 80005b4:	d09e      	beq.n	80004f4 <__aeabi_fadd+0x8c>
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x156>
 80005bc:	e0ca      	b.n	8000754 <__aeabi_fadd+0x2ec>
 80005be:	2bff      	cmp	r3, #255	@ 0xff
 80005c0:	d042      	beq.n	8000648 <__aeabi_fadd+0x1e0>
 80005c2:	0013      	movs	r3, r2
 80005c4:	e791      	b.n	80004ea <__aeabi_fadd+0x82>
 80005c6:	1a71      	subs	r1, r6, r1
 80005c8:	014b      	lsls	r3, r1, #5
 80005ca:	d400      	bmi.n	80005ce <__aeabi_fadd+0x166>
 80005cc:	e0d1      	b.n	8000772 <__aeabi_fadd+0x30a>
 80005ce:	018f      	lsls	r7, r1, #6
 80005d0:	09bf      	lsrs	r7, r7, #6
 80005d2:	0038      	movs	r0, r7
 80005d4:	f001 fbc6 	bl	8001d64 <__clzsi2>
 80005d8:	003b      	movs	r3, r7
 80005da:	3805      	subs	r0, #5
 80005dc:	4083      	lsls	r3, r0
 80005de:	2501      	movs	r5, #1
 80005e0:	2220      	movs	r2, #32
 80005e2:	1b40      	subs	r0, r0, r5
 80005e4:	3001      	adds	r0, #1
 80005e6:	1a12      	subs	r2, r2, r0
 80005e8:	001e      	movs	r6, r3
 80005ea:	4093      	lsls	r3, r2
 80005ec:	40c6      	lsrs	r6, r0
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	4193      	sbcs	r3, r2
 80005f2:	431e      	orrs	r6, r3
 80005f4:	d039      	beq.n	800066a <__aeabi_fadd+0x202>
 80005f6:	0773      	lsls	r3, r6, #29
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x194>
 80005fa:	e11b      	b.n	8000834 <__aeabi_fadd+0x3cc>
 80005fc:	230f      	movs	r3, #15
 80005fe:	2500      	movs	r5, #0
 8000600:	4033      	ands	r3, r6
 8000602:	2b04      	cmp	r3, #4
 8000604:	d1a7      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000606:	2001      	movs	r0, #1
 8000608:	0172      	lsls	r2, r6, #5
 800060a:	d57c      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 800060c:	b2c0      	uxtb	r0, r0
 800060e:	01b2      	lsls	r2, r6, #6
 8000610:	0a52      	lsrs	r2, r2, #9
 8000612:	e7a8      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000614:	0773      	lsls	r3, r6, #29
 8000616:	d003      	beq.n	8000620 <__aeabi_fadd+0x1b8>
 8000618:	230f      	movs	r3, #15
 800061a:	4033      	ands	r3, r6
 800061c:	2b04      	cmp	r3, #4
 800061e:	d19a      	bne.n	8000556 <__aeabi_fadd+0xee>
 8000620:	002b      	movs	r3, r5
 8000622:	e767      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d023      	beq.n	8000670 <__aeabi_fadd+0x208>
 8000628:	1b53      	subs	r3, r2, r5
 800062a:	2d00      	cmp	r5, #0
 800062c:	d17b      	bne.n	8000726 <__aeabi_fadd+0x2be>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e086      	b.n	8000742 <__aeabi_fadd+0x2da>
 8000634:	1e5d      	subs	r5, r3, #1
 8000636:	2b01      	cmp	r3, #1
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x1d4>
 800063a:	e08b      	b.n	8000754 <__aeabi_fadd+0x2ec>
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d002      	beq.n	8000646 <__aeabi_fadd+0x1de>
 8000640:	002b      	movs	r3, r5
 8000642:	e075      	b.n	8000730 <__aeabi_fadd+0x2c8>
 8000644:	464c      	mov	r4, r9
 8000646:	4667      	mov	r7, ip
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x1e6>
 800064c:	e789      	b.n	8000562 <__aeabi_fadd+0xfa>
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	433a      	orrs	r2, r7
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e784      	b.n	8000566 <__aeabi_fadd+0xfe>
 800065c:	1a77      	subs	r7, r6, r1
 800065e:	017b      	lsls	r3, r7, #5
 8000660:	d46b      	bmi.n	800073a <__aeabi_fadd+0x2d2>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x200>
 8000666:	e765      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000668:	2400      	movs	r4, #0
 800066a:	2000      	movs	r0, #0
 800066c:	2200      	movs	r2, #0
 800066e:	e77a      	b.n	8000566 <__aeabi_fadd+0xfe>
 8000670:	22fe      	movs	r2, #254	@ 0xfe
 8000672:	1c6b      	adds	r3, r5, #1
 8000674:	421a      	tst	r2, r3
 8000676:	d149      	bne.n	800070c <__aeabi_fadd+0x2a4>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x216>
 800067c:	e09f      	b.n	80007be <__aeabi_fadd+0x356>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x21c>
 8000682:	e0ba      	b.n	80007fa <__aeabi_fadd+0x392>
 8000684:	2900      	cmp	r1, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x222>
 8000688:	e0cf      	b.n	800082a <__aeabi_fadd+0x3c2>
 800068a:	1872      	adds	r2, r6, r1
 800068c:	0153      	lsls	r3, r2, #5
 800068e:	d400      	bmi.n	8000692 <__aeabi_fadd+0x22a>
 8000690:	e0cd      	b.n	800082e <__aeabi_fadd+0x3c6>
 8000692:	0192      	lsls	r2, r2, #6
 8000694:	2001      	movs	r0, #1
 8000696:	0a52      	lsrs	r2, r2, #9
 8000698:	e765      	b.n	8000566 <__aeabi_fadd+0xfe>
 800069a:	2aff      	cmp	r2, #255	@ 0xff
 800069c:	d0d2      	beq.n	8000644 <__aeabi_fadd+0x1dc>
 800069e:	2080      	movs	r0, #128	@ 0x80
 80006a0:	04c0      	lsls	r0, r0, #19
 80006a2:	4306      	orrs	r6, r0
 80006a4:	2001      	movs	r0, #1
 80006a6:	2b1b      	cmp	r3, #27
 80006a8:	dc08      	bgt.n	80006bc <__aeabi_fadd+0x254>
 80006aa:	0030      	movs	r0, r6
 80006ac:	2420      	movs	r4, #32
 80006ae:	40d8      	lsrs	r0, r3
 80006b0:	1ae3      	subs	r3, r4, r3
 80006b2:	409e      	lsls	r6, r3
 80006b4:	0033      	movs	r3, r6
 80006b6:	1e5c      	subs	r4, r3, #1
 80006b8:	41a3      	sbcs	r3, r4
 80006ba:	4318      	orrs	r0, r3
 80006bc:	464c      	mov	r4, r9
 80006be:	0015      	movs	r5, r2
 80006c0:	1a0e      	subs	r6, r1, r0
 80006c2:	e732      	b.n	800052a <__aeabi_fadd+0xc2>
 80006c4:	0008      	movs	r0, r1
 80006c6:	2220      	movs	r2, #32
 80006c8:	40d8      	lsrs	r0, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4099      	lsls	r1, r3
 80006ce:	000b      	movs	r3, r1
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	4193      	sbcs	r3, r2
 80006d4:	4303      	orrs	r3, r0
 80006d6:	18f6      	adds	r6, r6, r3
 80006d8:	0173      	lsls	r3, r6, #5
 80006da:	d59b      	bpl.n	8000614 <__aeabi_fadd+0x1ac>
 80006dc:	3501      	adds	r5, #1
 80006de:	2dff      	cmp	r5, #255	@ 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x27c>
 80006e2:	e73e      	b.n	8000562 <__aeabi_fadd+0xfa>
 80006e4:	2301      	movs	r3, #1
 80006e6:	494d      	ldr	r1, [pc, #308]	@ (800081c <__aeabi_fadd+0x3b4>)
 80006e8:	0872      	lsrs	r2, r6, #1
 80006ea:	4033      	ands	r3, r6
 80006ec:	400a      	ands	r2, r1
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0016      	movs	r6, r2
 80006f2:	0753      	lsls	r3, r2, #29
 80006f4:	d004      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006f6:	230f      	movs	r3, #15
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d000      	beq.n	8000700 <__aeabi_fadd+0x298>
 80006fe:	e72a      	b.n	8000556 <__aeabi_fadd+0xee>
 8000700:	0173      	lsls	r3, r6, #5
 8000702:	d500      	bpl.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e72a      	b.n	800055c <__aeabi_fadd+0xf4>
 8000706:	002b      	movs	r3, r5
 8000708:	08f7      	lsrs	r7, r6, #3
 800070a:	e6f7      	b.n	80004fc <__aeabi_fadd+0x94>
 800070c:	2bff      	cmp	r3, #255	@ 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x2aa>
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0xfa>
 8000712:	1871      	adds	r1, r6, r1
 8000714:	0849      	lsrs	r1, r1, #1
 8000716:	074a      	lsls	r2, r1, #29
 8000718:	d02f      	beq.n	800077a <__aeabi_fadd+0x312>
 800071a:	220f      	movs	r2, #15
 800071c:	400a      	ands	r2, r1
 800071e:	2a04      	cmp	r2, #4
 8000720:	d02b      	beq.n	800077a <__aeabi_fadd+0x312>
 8000722:	1d0e      	adds	r6, r1, #4
 8000724:	e6e6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000726:	2aff      	cmp	r2, #255	@ 0xff
 8000728:	d08d      	beq.n	8000646 <__aeabi_fadd+0x1de>
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	04c0      	lsls	r0, r0, #19
 800072e:	4306      	orrs	r6, r0
 8000730:	2b1b      	cmp	r3, #27
 8000732:	dd24      	ble.n	800077e <__aeabi_fadd+0x316>
 8000734:	0013      	movs	r3, r2
 8000736:	1d4e      	adds	r6, r1, #5
 8000738:	e6dc      	b.n	80004f4 <__aeabi_fadd+0x8c>
 800073a:	464c      	mov	r4, r9
 800073c:	1b8f      	subs	r7, r1, r6
 800073e:	e6f9      	b.n	8000534 <__aeabi_fadd+0xcc>
 8000740:	464c      	mov	r4, r9
 8000742:	000e      	movs	r6, r1
 8000744:	e6d6      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d149      	bne.n	80007de <__aeabi_fadd+0x376>
 800074a:	2900      	cmp	r1, #0
 800074c:	d068      	beq.n	8000820 <__aeabi_fadd+0x3b8>
 800074e:	4667      	mov	r7, ip
 8000750:	464c      	mov	r4, r9
 8000752:	e77c      	b.n	800064e <__aeabi_fadd+0x1e6>
 8000754:	1870      	adds	r0, r6, r1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d574      	bpl.n	8000844 <__aeabi_fadd+0x3dc>
 800075a:	4930      	ldr	r1, [pc, #192]	@ (800081c <__aeabi_fadd+0x3b4>)
 800075c:	0840      	lsrs	r0, r0, #1
 800075e:	4001      	ands	r1, r0
 8000760:	0743      	lsls	r3, r0, #29
 8000762:	d009      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000764:	230f      	movs	r3, #15
 8000766:	4003      	ands	r3, r0
 8000768:	2b04      	cmp	r3, #4
 800076a:	d005      	beq.n	8000778 <__aeabi_fadd+0x310>
 800076c:	2302      	movs	r3, #2
 800076e:	1d0e      	adds	r6, r1, #4
 8000770:	e6c0      	b.n	80004f4 <__aeabi_fadd+0x8c>
 8000772:	2301      	movs	r3, #1
 8000774:	08cf      	lsrs	r7, r1, #3
 8000776:	e6c1      	b.n	80004fc <__aeabi_fadd+0x94>
 8000778:	2302      	movs	r3, #2
 800077a:	08cf      	lsrs	r7, r1, #3
 800077c:	e6be      	b.n	80004fc <__aeabi_fadd+0x94>
 800077e:	2520      	movs	r5, #32
 8000780:	0030      	movs	r0, r6
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1aeb      	subs	r3, r5, r3
 8000786:	409e      	lsls	r6, r3
 8000788:	0033      	movs	r3, r6
 800078a:	1e5d      	subs	r5, r3, #1
 800078c:	41ab      	sbcs	r3, r5
 800078e:	4303      	orrs	r3, r0
 8000790:	0015      	movs	r5, r2
 8000792:	185e      	adds	r6, r3, r1
 8000794:	e7a0      	b.n	80006d8 <__aeabi_fadd+0x270>
 8000796:	2900      	cmp	r1, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x334>
 800079a:	e765      	b.n	8000668 <__aeabi_fadd+0x200>
 800079c:	464c      	mov	r4, r9
 800079e:	4667      	mov	r7, ip
 80007a0:	e6ac      	b.n	80004fc <__aeabi_fadd+0x94>
 80007a2:	1b8f      	subs	r7, r1, r6
 80007a4:	017b      	lsls	r3, r7, #5
 80007a6:	d52e      	bpl.n	8000806 <__aeabi_fadd+0x39e>
 80007a8:	01bf      	lsls	r7, r7, #6
 80007aa:	09bf      	lsrs	r7, r7, #6
 80007ac:	0038      	movs	r0, r7
 80007ae:	f001 fad9 	bl	8001d64 <__clzsi2>
 80007b2:	003b      	movs	r3, r7
 80007b4:	3805      	subs	r0, #5
 80007b6:	4083      	lsls	r3, r0
 80007b8:	464c      	mov	r4, r9
 80007ba:	3501      	adds	r5, #1
 80007bc:	e710      	b.n	80005e0 <__aeabi_fadd+0x178>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x35c>
 80007c2:	e740      	b.n	8000646 <__aeabi_fadd+0x1de>
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x362>
 80007c8:	e741      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	03db      	lsls	r3, r3, #15
 80007ce:	429f      	cmp	r7, r3
 80007d0:	d200      	bcs.n	80007d4 <__aeabi_fadd+0x36c>
 80007d2:	e73c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007d4:	459c      	cmp	ip, r3
 80007d6:	d300      	bcc.n	80007da <__aeabi_fadd+0x372>
 80007d8:	e739      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007da:	4667      	mov	r7, ip
 80007dc:	e737      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007de:	2900      	cmp	r1, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x37c>
 80007e2:	e734      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	429f      	cmp	r7, r3
 80007ea:	d200      	bcs.n	80007ee <__aeabi_fadd+0x386>
 80007ec:	e72f      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007ee:	459c      	cmp	ip, r3
 80007f0:	d300      	bcc.n	80007f4 <__aeabi_fadd+0x38c>
 80007f2:	e72c      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007f4:	464c      	mov	r4, r9
 80007f6:	4667      	mov	r7, ip
 80007f8:	e729      	b.n	800064e <__aeabi_fadd+0x1e6>
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x398>
 80007fe:	e734      	b.n	800066a <__aeabi_fadd+0x202>
 8000800:	2300      	movs	r3, #0
 8000802:	08cf      	lsrs	r7, r1, #3
 8000804:	e67a      	b.n	80004fc <__aeabi_fadd+0x94>
 8000806:	464c      	mov	r4, r9
 8000808:	2301      	movs	r3, #1
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	e676      	b.n	80004fc <__aeabi_fadd+0x94>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x3ac>
 8000812:	e729      	b.n	8000668 <__aeabi_fadd+0x200>
 8000814:	08ff      	lsrs	r7, r7, #3
 8000816:	e671      	b.n	80004fc <__aeabi_fadd+0x94>
 8000818:	fbffffff 	.word	0xfbffffff
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	2400      	movs	r4, #0
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	03d2      	lsls	r2, r2, #15
 8000828:	e69d      	b.n	8000566 <__aeabi_fadd+0xfe>
 800082a:	2300      	movs	r3, #0
 800082c:	e666      	b.n	80004fc <__aeabi_fadd+0x94>
 800082e:	2300      	movs	r3, #0
 8000830:	08d7      	lsrs	r7, r2, #3
 8000832:	e663      	b.n	80004fc <__aeabi_fadd+0x94>
 8000834:	2001      	movs	r0, #1
 8000836:	0172      	lsls	r2, r6, #5
 8000838:	d500      	bpl.n	800083c <__aeabi_fadd+0x3d4>
 800083a:	e6e7      	b.n	800060c <__aeabi_fadd+0x1a4>
 800083c:	0031      	movs	r1, r6
 800083e:	2300      	movs	r3, #0
 8000840:	08cf      	lsrs	r7, r1, #3
 8000842:	e65b      	b.n	80004fc <__aeabi_fadd+0x94>
 8000844:	2301      	movs	r3, #1
 8000846:	08c7      	lsrs	r7, r0, #3
 8000848:	e658      	b.n	80004fc <__aeabi_fadd+0x94>
 800084a:	46c0      	nop			@ (mov r8, r8)

0800084c <__aeabi_fdiv>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	4646      	mov	r6, r8
 8000850:	464f      	mov	r7, r9
 8000852:	46d6      	mov	lr, sl
 8000854:	0245      	lsls	r5, r0, #9
 8000856:	b5c0      	push	{r6, r7, lr}
 8000858:	0fc3      	lsrs	r3, r0, #31
 800085a:	0047      	lsls	r7, r0, #1
 800085c:	4698      	mov	r8, r3
 800085e:	1c0e      	adds	r6, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	d05b      	beq.n	800091e <__aeabi_fdiv+0xd2>
 8000866:	2fff      	cmp	r7, #255	@ 0xff
 8000868:	d021      	beq.n	80008ae <__aeabi_fdiv+0x62>
 800086a:	2380      	movs	r3, #128	@ 0x80
 800086c:	00ed      	lsls	r5, r5, #3
 800086e:	04db      	lsls	r3, r3, #19
 8000870:	431d      	orrs	r5, r3
 8000872:	2300      	movs	r3, #0
 8000874:	4699      	mov	r9, r3
 8000876:	469a      	mov	sl, r3
 8000878:	3f7f      	subs	r7, #127	@ 0x7f
 800087a:	0274      	lsls	r4, r6, #9
 800087c:	0073      	lsls	r3, r6, #1
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e1b      	lsrs	r3, r3, #24
 8000882:	0ff6      	lsrs	r6, r6, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d020      	beq.n	80008ca <__aeabi_fdiv+0x7e>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d043      	beq.n	8000914 <__aeabi_fdiv+0xc8>
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	2000      	movs	r0, #0
 8000890:	00e4      	lsls	r4, r4, #3
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4314      	orrs	r4, r2
 8000896:	3b7f      	subs	r3, #127	@ 0x7f
 8000898:	4642      	mov	r2, r8
 800089a:	1aff      	subs	r7, r7, r3
 800089c:	464b      	mov	r3, r9
 800089e:	4072      	eors	r2, r6
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x5a>
 80008a4:	e09d      	b.n	80009e2 <__aeabi_fdiv+0x196>
 80008a6:	4971      	ldr	r1, [pc, #452]	@ (8000a6c <__aeabi_fdiv+0x220>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58cb      	ldr	r3, [r1, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d15a      	bne.n	8000968 <__aeabi_fdiv+0x11c>
 80008b2:	2308      	movs	r3, #8
 80008b4:	4699      	mov	r9, r3
 80008b6:	3b06      	subs	r3, #6
 80008b8:	0274      	lsls	r4, r6, #9
 80008ba:	469a      	mov	sl, r3
 80008bc:	0073      	lsls	r3, r6, #1
 80008be:	27ff      	movs	r7, #255	@ 0xff
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0ff6      	lsrs	r6, r6, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1de      	bne.n	8000888 <__aeabi_fdiv+0x3c>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d13b      	bne.n	8000946 <__aeabi_fdiv+0xfa>
 80008ce:	2301      	movs	r3, #1
 80008d0:	4642      	mov	r2, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	4072      	eors	r2, r6
 80008d6:	4319      	orrs	r1, r3
 80008d8:	290e      	cmp	r1, #14
 80008da:	d818      	bhi.n	800090e <__aeabi_fdiv+0xc2>
 80008dc:	4864      	ldr	r0, [pc, #400]	@ (8000a70 <__aeabi_fdiv+0x224>)
 80008de:	0089      	lsls	r1, r1, #2
 80008e0:	5841      	ldr	r1, [r0, r1]
 80008e2:	468f      	mov	pc, r1
 80008e4:	4653      	mov	r3, sl
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d100      	bne.n	80008ec <__aeabi_fdiv+0xa0>
 80008ea:	e0b8      	b.n	8000a5e <__aeabi_fdiv+0x212>
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d06e      	beq.n	80009ce <__aeabi_fdiv+0x182>
 80008f0:	4642      	mov	r2, r8
 80008f2:	002c      	movs	r4, r5
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d140      	bne.n	800097a <__aeabi_fdiv+0x12e>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2400      	movs	r4, #0
 80008fc:	05c0      	lsls	r0, r0, #23
 80008fe:	4320      	orrs	r0, r4
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	4310      	orrs	r0, r2
 8000904:	bce0      	pop	{r5, r6, r7}
 8000906:	46ba      	mov	sl, r7
 8000908:	46b1      	mov	r9, r6
 800090a:	46a8      	mov	r8, r5
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	2400      	movs	r4, #0
 8000912:	e7f3      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000914:	2c00      	cmp	r4, #0
 8000916:	d120      	bne.n	800095a <__aeabi_fdiv+0x10e>
 8000918:	2302      	movs	r3, #2
 800091a:	3fff      	subs	r7, #255	@ 0xff
 800091c:	e7d8      	b.n	80008d0 <__aeabi_fdiv+0x84>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d105      	bne.n	800092e <__aeabi_fdiv+0xe2>
 8000922:	2304      	movs	r3, #4
 8000924:	4699      	mov	r9, r3
 8000926:	3b03      	subs	r3, #3
 8000928:	2700      	movs	r7, #0
 800092a:	469a      	mov	sl, r3
 800092c:	e7a5      	b.n	800087a <__aeabi_fdiv+0x2e>
 800092e:	0028      	movs	r0, r5
 8000930:	f001 fa18 	bl	8001d64 <__clzsi2>
 8000934:	2776      	movs	r7, #118	@ 0x76
 8000936:	1f43      	subs	r3, r0, #5
 8000938:	409d      	lsls	r5, r3
 800093a:	2300      	movs	r3, #0
 800093c:	427f      	negs	r7, r7
 800093e:	4699      	mov	r9, r3
 8000940:	469a      	mov	sl, r3
 8000942:	1a3f      	subs	r7, r7, r0
 8000944:	e799      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000946:	0020      	movs	r0, r4
 8000948:	f001 fa0c 	bl	8001d64 <__clzsi2>
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409c      	lsls	r4, r3
 8000950:	2376      	movs	r3, #118	@ 0x76
 8000952:	425b      	negs	r3, r3
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	2000      	movs	r0, #0
 8000958:	e79e      	b.n	8000898 <__aeabi_fdiv+0x4c>
 800095a:	2303      	movs	r3, #3
 800095c:	464a      	mov	r2, r9
 800095e:	431a      	orrs	r2, r3
 8000960:	4691      	mov	r9, r2
 8000962:	2003      	movs	r0, #3
 8000964:	33fc      	adds	r3, #252	@ 0xfc
 8000966:	e797      	b.n	8000898 <__aeabi_fdiv+0x4c>
 8000968:	230c      	movs	r3, #12
 800096a:	4699      	mov	r9, r3
 800096c:	3b09      	subs	r3, #9
 800096e:	27ff      	movs	r7, #255	@ 0xff
 8000970:	469a      	mov	sl, r3
 8000972:	e782      	b.n	800087a <__aeabi_fdiv+0x2e>
 8000974:	2803      	cmp	r0, #3
 8000976:	d02c      	beq.n	80009d2 <__aeabi_fdiv+0x186>
 8000978:	0032      	movs	r2, r6
 800097a:	0038      	movs	r0, r7
 800097c:	307f      	adds	r0, #127	@ 0x7f
 800097e:	2800      	cmp	r0, #0
 8000980:	dd47      	ble.n	8000a12 <__aeabi_fdiv+0x1c6>
 8000982:	0763      	lsls	r3, r4, #29
 8000984:	d004      	beq.n	8000990 <__aeabi_fdiv+0x144>
 8000986:	230f      	movs	r3, #15
 8000988:	4023      	ands	r3, r4
 800098a:	2b04      	cmp	r3, #4
 800098c:	d000      	beq.n	8000990 <__aeabi_fdiv+0x144>
 800098e:	3404      	adds	r4, #4
 8000990:	0123      	lsls	r3, r4, #4
 8000992:	d503      	bpl.n	800099c <__aeabi_fdiv+0x150>
 8000994:	0038      	movs	r0, r7
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <__aeabi_fdiv+0x228>)
 8000998:	3080      	adds	r0, #128	@ 0x80
 800099a:	401c      	ands	r4, r3
 800099c:	28fe      	cmp	r0, #254	@ 0xfe
 800099e:	dcb6      	bgt.n	800090e <__aeabi_fdiv+0xc2>
 80009a0:	01a4      	lsls	r4, r4, #6
 80009a2:	0a64      	lsrs	r4, r4, #9
 80009a4:	b2c0      	uxtb	r0, r0
 80009a6:	e7a9      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009a8:	2480      	movs	r4, #128	@ 0x80
 80009aa:	2200      	movs	r2, #0
 80009ac:	20ff      	movs	r0, #255	@ 0xff
 80009ae:	03e4      	lsls	r4, r4, #15
 80009b0:	e7a4      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	421d      	tst	r5, r3
 80009b8:	d001      	beq.n	80009be <__aeabi_fdiv+0x172>
 80009ba:	421c      	tst	r4, r3
 80009bc:	d00b      	beq.n	80009d6 <__aeabi_fdiv+0x18a>
 80009be:	2480      	movs	r4, #128	@ 0x80
 80009c0:	03e4      	lsls	r4, r4, #15
 80009c2:	432c      	orrs	r4, r5
 80009c4:	0264      	lsls	r4, r4, #9
 80009c6:	4642      	mov	r2, r8
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	e796      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009ce:	4646      	mov	r6, r8
 80009d0:	002c      	movs	r4, r5
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	03db      	lsls	r3, r3, #15
 80009d6:	431c      	orrs	r4, r3
 80009d8:	0264      	lsls	r4, r4, #9
 80009da:	0032      	movs	r2, r6
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	e78c      	b.n	80008fc <__aeabi_fdiv+0xb0>
 80009e2:	016d      	lsls	r5, r5, #5
 80009e4:	0160      	lsls	r0, r4, #5
 80009e6:	4285      	cmp	r5, r0
 80009e8:	d22d      	bcs.n	8000a46 <__aeabi_fdiv+0x1fa>
 80009ea:	231b      	movs	r3, #27
 80009ec:	2400      	movs	r4, #0
 80009ee:	3f01      	subs	r7, #1
 80009f0:	2601      	movs	r6, #1
 80009f2:	0029      	movs	r1, r5
 80009f4:	0064      	lsls	r4, r4, #1
 80009f6:	006d      	lsls	r5, r5, #1
 80009f8:	2900      	cmp	r1, #0
 80009fa:	db01      	blt.n	8000a00 <__aeabi_fdiv+0x1b4>
 80009fc:	4285      	cmp	r5, r0
 80009fe:	d301      	bcc.n	8000a04 <__aeabi_fdiv+0x1b8>
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	4334      	orrs	r4, r6
 8000a04:	3b01      	subs	r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f3      	bne.n	80009f2 <__aeabi_fdiv+0x1a6>
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	432c      	orrs	r4, r5
 8000a10:	e7b3      	b.n	800097a <__aeabi_fdiv+0x12e>
 8000a12:	2301      	movs	r3, #1
 8000a14:	1a1b      	subs	r3, r3, r0
 8000a16:	2b1b      	cmp	r3, #27
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fdiv+0x1d0>
 8000a1a:	e76d      	b.n	80008f8 <__aeabi_fdiv+0xac>
 8000a1c:	0021      	movs	r1, r4
 8000a1e:	379e      	adds	r7, #158	@ 0x9e
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	40bc      	lsls	r4, r7
 8000a24:	000b      	movs	r3, r1
 8000a26:	1e61      	subs	r1, r4, #1
 8000a28:	418c      	sbcs	r4, r1
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	0759      	lsls	r1, r3, #29
 8000a2e:	d004      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a30:	210f      	movs	r1, #15
 8000a32:	4019      	ands	r1, r3
 8000a34:	2904      	cmp	r1, #4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fdiv+0x1ee>
 8000a38:	3304      	adds	r3, #4
 8000a3a:	0159      	lsls	r1, r3, #5
 8000a3c:	d413      	bmi.n	8000a66 <__aeabi_fdiv+0x21a>
 8000a3e:	019b      	lsls	r3, r3, #6
 8000a40:	2000      	movs	r0, #0
 8000a42:	0a5c      	lsrs	r4, r3, #9
 8000a44:	e75a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a46:	231a      	movs	r3, #26
 8000a48:	2401      	movs	r4, #1
 8000a4a:	1a2d      	subs	r5, r5, r0
 8000a4c:	e7d0      	b.n	80009f0 <__aeabi_fdiv+0x1a4>
 8000a4e:	1e98      	subs	r0, r3, #2
 8000a50:	4243      	negs	r3, r0
 8000a52:	4158      	adcs	r0, r3
 8000a54:	4240      	negs	r0, r0
 8000a56:	0032      	movs	r2, r6
 8000a58:	2400      	movs	r4, #0
 8000a5a:	b2c0      	uxtb	r0, r0
 8000a5c:	e74e      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a5e:	4642      	mov	r2, r8
 8000a60:	20ff      	movs	r0, #255	@ 0xff
 8000a62:	2400      	movs	r4, #0
 8000a64:	e74a      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a66:	2001      	movs	r0, #1
 8000a68:	2400      	movs	r4, #0
 8000a6a:	e747      	b.n	80008fc <__aeabi_fdiv+0xb0>
 8000a6c:	08007410 	.word	0x08007410
 8000a70:	08007450 	.word	0x08007450
 8000a74:	f7ffffff 	.word	0xf7ffffff

08000a78 <__eqsf2>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0042      	lsls	r2, r0, #1
 8000a7c:	024e      	lsls	r6, r1, #9
 8000a7e:	004c      	lsls	r4, r1, #1
 8000a80:	0245      	lsls	r5, r0, #9
 8000a82:	0a6d      	lsrs	r5, r5, #9
 8000a84:	0e12      	lsrs	r2, r2, #24
 8000a86:	0fc3      	lsrs	r3, r0, #31
 8000a88:	0a76      	lsrs	r6, r6, #9
 8000a8a:	0e24      	lsrs	r4, r4, #24
 8000a8c:	0fc9      	lsrs	r1, r1, #31
 8000a8e:	2aff      	cmp	r2, #255	@ 0xff
 8000a90:	d010      	beq.n	8000ab4 <__eqsf2+0x3c>
 8000a92:	2cff      	cmp	r4, #255	@ 0xff
 8000a94:	d00c      	beq.n	8000ab0 <__eqsf2+0x38>
 8000a96:	2001      	movs	r0, #1
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	d10a      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000a9c:	42b5      	cmp	r5, r6
 8000a9e:	d108      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d00f      	beq.n	8000ac4 <__eqsf2+0x4c>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d104      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aa8:	0028      	movs	r0, r5
 8000aaa:	1e43      	subs	r3, r0, #1
 8000aac:	4198      	sbcs	r0, r3
 8000aae:	e000      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	2cff      	cmp	r4, #255	@ 0xff
 8000ab8:	d1fb      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000aba:	4335      	orrs	r5, r6
 8000abc:	d1f9      	bne.n	8000ab2 <__eqsf2+0x3a>
 8000abe:	404b      	eors	r3, r1
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	e7f6      	b.n	8000ab2 <__eqsf2+0x3a>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7f4      	b.n	8000ab2 <__eqsf2+0x3a>

08000ac8 <__gesf2>:
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	0042      	lsls	r2, r0, #1
 8000acc:	0244      	lsls	r4, r0, #9
 8000ace:	024d      	lsls	r5, r1, #9
 8000ad0:	0fc3      	lsrs	r3, r0, #31
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	0e12      	lsrs	r2, r2, #24
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e00      	lsrs	r0, r0, #24
 8000adc:	0fc9      	lsrs	r1, r1, #31
 8000ade:	2aff      	cmp	r2, #255	@ 0xff
 8000ae0:	d018      	beq.n	8000b14 <__gesf2+0x4c>
 8000ae2:	28ff      	cmp	r0, #255	@ 0xff
 8000ae4:	d00a      	beq.n	8000afc <__gesf2+0x34>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d11e      	bne.n	8000b28 <__gesf2+0x60>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d10a      	bne.n	8000b04 <__gesf2+0x3c>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d029      	beq.n	8000b46 <__gesf2+0x7e>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d12d      	bne.n	8000b52 <__gesf2+0x8a>
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	3801      	subs	r0, #1
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d125      	bne.n	8000b4c <__gesf2+0x84>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d101      	bne.n	8000b08 <__gesf2+0x40>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d0f6      	beq.n	8000af6 <__gesf2+0x2e>
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d019      	beq.n	8000b40 <__gesf2+0x78>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	4318      	orrs	r0, r3
 8000b12:	e7f2      	b.n	8000afa <__gesf2+0x32>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d119      	bne.n	8000b4c <__gesf2+0x84>
 8000b18:	28ff      	cmp	r0, #255	@ 0xff
 8000b1a:	d1f7      	bne.n	8000b0c <__gesf2+0x44>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d115      	bne.n	8000b4c <__gesf2+0x84>
 8000b20:	2000      	movs	r0, #0
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d1f2      	bne.n	8000b0c <__gesf2+0x44>
 8000b26:	e7e8      	b.n	8000afa <__gesf2+0x32>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d0ef      	beq.n	8000b0c <__gesf2+0x44>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d1ed      	bne.n	8000b0c <__gesf2+0x44>
 8000b30:	4282      	cmp	r2, r0
 8000b32:	dceb      	bgt.n	8000b0c <__gesf2+0x44>
 8000b34:	db04      	blt.n	8000b40 <__gesf2+0x78>
 8000b36:	42ac      	cmp	r4, r5
 8000b38:	d8e8      	bhi.n	8000b0c <__gesf2+0x44>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d2dc      	bcs.n	8000afa <__gesf2+0x32>
 8000b40:	0058      	lsls	r0, r3, #1
 8000b42:	3801      	subs	r0, #1
 8000b44:	e7d9      	b.n	8000afa <__gesf2+0x32>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d0d7      	beq.n	8000afa <__gesf2+0x32>
 8000b4a:	e7df      	b.n	8000b0c <__gesf2+0x44>
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	4240      	negs	r0, r0
 8000b50:	e7d3      	b.n	8000afa <__gesf2+0x32>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d1da      	bne.n	8000b0c <__gesf2+0x44>
 8000b56:	e7ee      	b.n	8000b36 <__gesf2+0x6e>

08000b58 <__lesf2>:
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	0042      	lsls	r2, r0, #1
 8000b5c:	0244      	lsls	r4, r0, #9
 8000b5e:	024d      	lsls	r5, r1, #9
 8000b60:	0fc3      	lsrs	r3, r0, #31
 8000b62:	0048      	lsls	r0, r1, #1
 8000b64:	0a64      	lsrs	r4, r4, #9
 8000b66:	0e12      	lsrs	r2, r2, #24
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	0e00      	lsrs	r0, r0, #24
 8000b6c:	0fc9      	lsrs	r1, r1, #31
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d017      	beq.n	8000ba2 <__lesf2+0x4a>
 8000b72:	28ff      	cmp	r0, #255	@ 0xff
 8000b74:	d00a      	beq.n	8000b8c <__lesf2+0x34>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d11b      	bne.n	8000bb2 <__lesf2+0x5a>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d10a      	bne.n	8000b94 <__lesf2+0x3c>
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d01d      	beq.n	8000bbe <__lesf2+0x66>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d12d      	bne.n	8000be2 <__lesf2+0x8a>
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e011      	b.n	8000bb0 <__lesf2+0x58>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d10e      	bne.n	8000bae <__lesf2+0x56>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d101      	bne.n	8000b98 <__lesf2+0x40>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d0f6      	beq.n	8000b86 <__lesf2+0x2e>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d10c      	bne.n	8000bb6 <__lesf2+0x5e>
 8000b9c:	0058      	lsls	r0, r3, #1
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e006      	b.n	8000bb0 <__lesf2+0x58>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d103      	bne.n	8000bae <__lesf2+0x56>
 8000ba6:	28ff      	cmp	r0, #255	@ 0xff
 8000ba8:	d105      	bne.n	8000bb6 <__lesf2+0x5e>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d015      	beq.n	8000bda <__lesf2+0x82>
 8000bae:	2002      	movs	r0, #2
 8000bb0:	bd30      	pop	{r4, r5, pc}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d106      	bne.n	8000bc4 <__lesf2+0x6c>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	e7f8      	b.n	8000bb0 <__lesf2+0x58>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <__lesf2+0x58>
 8000bc2:	e7f8      	b.n	8000bb6 <__lesf2+0x5e>
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d1f6      	bne.n	8000bb6 <__lesf2+0x5e>
 8000bc8:	4282      	cmp	r2, r0
 8000bca:	dcf4      	bgt.n	8000bb6 <__lesf2+0x5e>
 8000bcc:	dbe6      	blt.n	8000b9c <__lesf2+0x44>
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	d8f1      	bhi.n	8000bb6 <__lesf2+0x5e>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	42ac      	cmp	r4, r5
 8000bd6:	d2eb      	bcs.n	8000bb0 <__lesf2+0x58>
 8000bd8:	e7e0      	b.n	8000b9c <__lesf2+0x44>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d1ea      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be0:	e7e6      	b.n	8000bb0 <__lesf2+0x58>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d1e7      	bne.n	8000bb6 <__lesf2+0x5e>
 8000be6:	e7f2      	b.n	8000bce <__lesf2+0x76>

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0044      	lsls	r4, r0, #1
 8000bf2:	b5c0      	push	{r6, r7, lr}
 8000bf4:	0246      	lsls	r6, r0, #9
 8000bf6:	1c0f      	adds	r7, r1, #0
 8000bf8:	0a76      	lsrs	r6, r6, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	0fc5      	lsrs	r5, r0, #31
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e0da      	b.n	8000dba <__aeabi_fmul+0x1d2>
 8000c04:	2cff      	cmp	r4, #255	@ 0xff
 8000c06:	d074      	beq.n	8000cf2 <__aeabi_fmul+0x10a>
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	00f6      	lsls	r6, r6, #3
 8000c0c:	04db      	lsls	r3, r3, #19
 8000c0e:	431e      	orrs	r6, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	4699      	mov	r9, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	3c7f      	subs	r4, #127	@ 0x7f
 8000c18:	027b      	lsls	r3, r7, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	007b      	lsls	r3, r7, #1
 8000c20:	0e1b      	lsrs	r3, r3, #24
 8000c22:	0fff      	lsrs	r7, r7, #31
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d074      	beq.n	8000d12 <__aeabi_fmul+0x12a>
 8000c28:	2bff      	cmp	r3, #255	@ 0xff
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x46>
 8000c2c:	e08e      	b.n	8000d4c <__aeabi_fmul+0x164>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	04c9      	lsls	r1, r1, #19
 8000c36:	4311      	orrs	r1, r2
 8000c38:	3b7f      	subs	r3, #127	@ 0x7f
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	18e4      	adds	r4, r4, r3
 8000c3e:	464b      	mov	r3, r9
 8000c40:	407a      	eors	r2, r7
 8000c42:	4688      	mov	r8, r1
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	dc75      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	dd0f      	ble.n	8000c72 <__aeabi_fmul+0x8a>
 8000c52:	4649      	mov	r1, r9
 8000c54:	2301      	movs	r3, #1
 8000c56:	408b      	lsls	r3, r1
 8000c58:	21a6      	movs	r1, #166	@ 0xa6
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	420b      	tst	r3, r1
 8000c5e:	d169      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000c60:	2190      	movs	r1, #144	@ 0x90
 8000c62:	0089      	lsls	r1, r1, #2
 8000c64:	420b      	tst	r3, r1
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0x82>
 8000c68:	e100      	b.n	8000e6c <__aeabi_fmul+0x284>
 8000c6a:	2188      	movs	r1, #136	@ 0x88
 8000c6c:	4219      	tst	r1, r3
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fmul+0x8a>
 8000c70:	e0f5      	b.n	8000e5e <__aeabi_fmul+0x276>
 8000c72:	4641      	mov	r1, r8
 8000c74:	0409      	lsls	r1, r1, #16
 8000c76:	0c09      	lsrs	r1, r1, #16
 8000c78:	4643      	mov	r3, r8
 8000c7a:	0008      	movs	r0, r1
 8000c7c:	0c35      	lsrs	r5, r6, #16
 8000c7e:	0436      	lsls	r6, r6, #16
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	4370      	muls	r0, r6
 8000c86:	4369      	muls	r1, r5
 8000c88:	435e      	muls	r6, r3
 8000c8a:	435d      	muls	r5, r3
 8000c8c:	1876      	adds	r6, r6, r1
 8000c8e:	0c03      	lsrs	r3, r0, #16
 8000c90:	199b      	adds	r3, r3, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d903      	bls.n	8000c9e <__aeabi_fmul+0xb6>
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4465      	add	r5, ip
 8000c9e:	0400      	lsls	r0, r0, #16
 8000ca0:	0419      	lsls	r1, r3, #16
 8000ca2:	0c00      	lsrs	r0, r0, #16
 8000ca4:	1809      	adds	r1, r1, r0
 8000ca6:	018e      	lsls	r6, r1, #6
 8000ca8:	1e70      	subs	r0, r6, #1
 8000caa:	4186      	sbcs	r6, r0
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	0e89      	lsrs	r1, r1, #26
 8000cb0:	195b      	adds	r3, r3, r5
 8000cb2:	430e      	orrs	r6, r1
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	431e      	orrs	r6, r3
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	d46c      	bmi.n	8000d96 <__aeabi_fmul+0x1ae>
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	337f      	adds	r3, #127	@ 0x7f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_fmul+0xde>
 8000cc4:	e0b1      	b.n	8000e2a <__aeabi_fmul+0x242>
 8000cc6:	0015      	movs	r5, r2
 8000cc8:	0771      	lsls	r1, r6, #29
 8000cca:	d00b      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000ccc:	200f      	movs	r0, #15
 8000cce:	0021      	movs	r1, r4
 8000cd0:	4030      	ands	r0, r6
 8000cd2:	2804      	cmp	r0, #4
 8000cd4:	d006      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cd6:	3604      	adds	r6, #4
 8000cd8:	0132      	lsls	r2, r6, #4
 8000cda:	d503      	bpl.n	8000ce4 <__aeabi_fmul+0xfc>
 8000cdc:	4b6e      	ldr	r3, [pc, #440]	@ (8000e98 <__aeabi_fmul+0x2b0>)
 8000cde:	401e      	ands	r6, r3
 8000ce0:	000b      	movs	r3, r1
 8000ce2:	3380      	adds	r3, #128	@ 0x80
 8000ce4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_fmul+0x102>
 8000ce8:	e0bd      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000cea:	01b2      	lsls	r2, r6, #6
 8000cec:	0a52      	lsrs	r2, r2, #9
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	e048      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fmul+0x110>
 8000cf6:	e092      	b.n	8000e1e <__aeabi_fmul+0x236>
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b06      	subs	r3, #6
 8000cfe:	469a      	mov	sl, r3
 8000d00:	027b      	lsls	r3, r7, #9
 8000d02:	0a5b      	lsrs	r3, r3, #9
 8000d04:	4698      	mov	r8, r3
 8000d06:	007b      	lsls	r3, r7, #1
 8000d08:	24ff      	movs	r4, #255	@ 0xff
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	0fff      	lsrs	r7, r7, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d18a      	bne.n	8000c28 <__aeabi_fmul+0x40>
 8000d12:	4642      	mov	r2, r8
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d164      	bne.n	8000de2 <__aeabi_fmul+0x1fa>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	4689      	mov	r9, r1
 8000d20:	290a      	cmp	r1, #10
 8000d22:	dc08      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000d24:	407d      	eors	r5, r7
 8000d26:	2001      	movs	r0, #1
 8000d28:	b2ea      	uxtb	r2, r5
 8000d2a:	2902      	cmp	r1, #2
 8000d2c:	dc91      	bgt.n	8000c52 <__aeabi_fmul+0x6a>
 8000d2e:	0015      	movs	r5, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	e027      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d34:	0015      	movs	r5, r2
 8000d36:	4653      	mov	r3, sl
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_fmul+0x156>
 8000d3c:	e093      	b.n	8000e66 <__aeabi_fmul+0x27e>
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d01a      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12c      	bne.n	8000da0 <__aeabi_fmul+0x1b8>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e01b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	34ff      	adds	r4, #255	@ 0xff
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d055      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000d54:	2103      	movs	r1, #3
 8000d56:	464b      	mov	r3, r9
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	2b0a      	cmp	r3, #10
 8000d5e:	dc00      	bgt.n	8000d62 <__aeabi_fmul+0x17a>
 8000d60:	e092      	b.n	8000e88 <__aeabi_fmul+0x2a0>
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fmul+0x180>
 8000d66:	e08c      	b.n	8000e82 <__aeabi_fmul+0x29a>
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	03d2      	lsls	r2, r2, #15
 8000d6c:	4216      	tst	r6, r2
 8000d6e:	d003      	beq.n	8000d78 <__aeabi_fmul+0x190>
 8000d70:	4643      	mov	r3, r8
 8000d72:	4213      	tst	r3, r2
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d76:	e07d      	b.n	8000e74 <__aeabi_fmul+0x28c>
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4332      	orrs	r2, r6
 8000d7e:	0252      	lsls	r2, r2, #9
 8000d80:	0a52      	lsrs	r2, r2, #9
 8000d82:	23ff      	movs	r3, #255	@ 0xff
 8000d84:	05d8      	lsls	r0, r3, #23
 8000d86:	07ed      	lsls	r5, r5, #31
 8000d88:	4310      	orrs	r0, r2
 8000d8a:	4328      	orrs	r0, r5
 8000d8c:	bce0      	pop	{r5, r6, r7}
 8000d8e:	46ba      	mov	sl, r7
 8000d90:	46b1      	mov	r9, r6
 8000d92:	46a8      	mov	r8, r5
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	2301      	movs	r3, #1
 8000d98:	0015      	movs	r5, r2
 8000d9a:	0871      	lsrs	r1, r6, #1
 8000d9c:	401e      	ands	r6, r3
 8000d9e:	430e      	orrs	r6, r1
 8000da0:	0023      	movs	r3, r4
 8000da2:	3380      	adds	r3, #128	@ 0x80
 8000da4:	1c61      	adds	r1, r4, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dd41      	ble.n	8000e2e <__aeabi_fmul+0x246>
 8000daa:	0772      	lsls	r2, r6, #29
 8000dac:	d094      	beq.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dae:	220f      	movs	r2, #15
 8000db0:	4032      	ands	r2, r6
 8000db2:	2a04      	cmp	r2, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x1d0>
 8000db6:	e78e      	b.n	8000cd6 <__aeabi_fmul+0xee>
 8000db8:	e78e      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d105      	bne.n	8000dca <__aeabi_fmul+0x1e2>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	3b03      	subs	r3, #3
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	469a      	mov	sl, r3
 8000dc8:	e726      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000dca:	0030      	movs	r0, r6
 8000dcc:	f000 ffca 	bl	8001d64 <__clzsi2>
 8000dd0:	2476      	movs	r4, #118	@ 0x76
 8000dd2:	1f43      	subs	r3, r0, #5
 8000dd4:	409e      	lsls	r6, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4264      	negs	r4, r4
 8000dda:	4699      	mov	r9, r3
 8000ddc:	469a      	mov	sl, r3
 8000dde:	1a24      	subs	r4, r4, r0
 8000de0:	e71a      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000de2:	4640      	mov	r0, r8
 8000de4:	f000 ffbe 	bl	8001d64 <__clzsi2>
 8000de8:	464b      	mov	r3, r9
 8000dea:	1a24      	subs	r4, r4, r0
 8000dec:	3c76      	subs	r4, #118	@ 0x76
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	dca1      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000df2:	4643      	mov	r3, r8
 8000df4:	3805      	subs	r0, #5
 8000df6:	4083      	lsls	r3, r0
 8000df8:	407d      	eors	r5, r7
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	b2ea      	uxtb	r2, r5
 8000dfe:	e724      	b.n	8000c4a <__aeabi_fmul+0x62>
 8000e00:	464a      	mov	r2, r9
 8000e02:	3302      	adds	r3, #2
 8000e04:	4313      	orrs	r3, r2
 8000e06:	002a      	movs	r2, r5
 8000e08:	407a      	eors	r2, r7
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	dc92      	bgt.n	8000d36 <__aeabi_fmul+0x14e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	0015      	movs	r5, r2
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d026      	beq.n	8000e66 <__aeabi_fmul+0x27e>
 8000e18:	4699      	mov	r9, r3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	e719      	b.n	8000c52 <__aeabi_fmul+0x6a>
 8000e1e:	230c      	movs	r3, #12
 8000e20:	4699      	mov	r9, r3
 8000e22:	3b09      	subs	r3, #9
 8000e24:	24ff      	movs	r4, #255	@ 0xff
 8000e26:	469a      	mov	sl, r3
 8000e28:	e6f6      	b.n	8000c18 <__aeabi_fmul+0x30>
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	2201      	movs	r2, #1
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b1b      	cmp	r3, #27
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fmul+0x250>
 8000e36:	e786      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e38:	319e      	adds	r1, #158	@ 0x9e
 8000e3a:	0032      	movs	r2, r6
 8000e3c:	408e      	lsls	r6, r1
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e73      	subs	r3, r6, #1
 8000e42:	419e      	sbcs	r6, r3
 8000e44:	4332      	orrs	r2, r6
 8000e46:	0753      	lsls	r3, r2, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x26c>
 8000e52:	3204      	adds	r2, #4
 8000e54:	0153      	lsls	r3, r2, #5
 8000e56:	d510      	bpl.n	8000e7a <__aeabi_fmul+0x292>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e792      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e5e:	003d      	movs	r5, r7
 8000e60:	4646      	mov	r6, r8
 8000e62:	4682      	mov	sl, r0
 8000e64:	e767      	b.n	8000d36 <__aeabi_fmul+0x14e>
 8000e66:	23ff      	movs	r3, #255	@ 0xff
 8000e68:	2200      	movs	r2, #0
 8000e6a:	e78b      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	2500      	movs	r5, #0
 8000e70:	03d2      	lsls	r2, r2, #15
 8000e72:	e786      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e74:	003d      	movs	r5, r7
 8000e76:	431a      	orrs	r2, r3
 8000e78:	e783      	b.n	8000d82 <__aeabi_fmul+0x19a>
 8000e7a:	0192      	lsls	r2, r2, #6
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	0a52      	lsrs	r2, r2, #9
 8000e80:	e780      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000e82:	003d      	movs	r5, r7
 8000e84:	4646      	mov	r6, r8
 8000e86:	e777      	b.n	8000d78 <__aeabi_fmul+0x190>
 8000e88:	002a      	movs	r2, r5
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	2003      	movs	r0, #3
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	e6e9      	b.n	8000c6a <__aeabi_fmul+0x82>
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	f7ffffff 	.word	0xf7ffffff

08000e9c <__aeabi_fsub>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	4647      	mov	r7, r8
 8000ea0:	46ce      	mov	lr, r9
 8000ea2:	0243      	lsls	r3, r0, #9
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	0a5f      	lsrs	r7, r3, #9
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	0045      	lsls	r5, r0, #1
 8000eac:	004a      	lsls	r2, r1, #1
 8000eae:	469c      	mov	ip, r3
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	0fc4      	lsrs	r4, r0, #31
 8000eb4:	0fce      	lsrs	r6, r1, #31
 8000eb6:	0e2d      	lsrs	r5, r5, #24
 8000eb8:	0a58      	lsrs	r0, r3, #9
 8000eba:	0e12      	lsrs	r2, r2, #24
 8000ebc:	0999      	lsrs	r1, r3, #6
 8000ebe:	2aff      	cmp	r2, #255	@ 0xff
 8000ec0:	d06b      	beq.n	8000f9a <__aeabi_fsub+0xfe>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	405e      	eors	r6, r3
 8000ec6:	1aab      	subs	r3, r5, r2
 8000ec8:	42b4      	cmp	r4, r6
 8000eca:	d04b      	beq.n	8000f64 <__aeabi_fsub+0xc8>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x36>
 8000ed0:	e0ff      	b.n	80010d2 <__aeabi_fsub+0x236>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x3c>
 8000ed6:	e088      	b.n	8000fea <__aeabi_fsub+0x14e>
 8000ed8:	2dff      	cmp	r5, #255	@ 0xff
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x42>
 8000edc:	e0ef      	b.n	80010be <__aeabi_fsub+0x222>
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	04d2      	lsls	r2, r2, #19
 8000ee2:	4311      	orrs	r1, r2
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	2b1b      	cmp	r3, #27
 8000ee8:	dc08      	bgt.n	8000efc <__aeabi_fsub+0x60>
 8000eea:	0008      	movs	r0, r1
 8000eec:	2220      	movs	r2, #32
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4193      	sbcs	r3, r2
 8000efa:	4318      	orrs	r0, r3
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a1b      	subs	r3, r3, r0
 8000f00:	469c      	mov	ip, r3
 8000f02:	4663      	mov	r3, ip
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	d400      	bmi.n	8000f0a <__aeabi_fsub+0x6e>
 8000f08:	e0cd      	b.n	80010a6 <__aeabi_fsub+0x20a>
 8000f0a:	4663      	mov	r3, ip
 8000f0c:	019f      	lsls	r7, r3, #6
 8000f0e:	09bf      	lsrs	r7, r7, #6
 8000f10:	0038      	movs	r0, r7
 8000f12:	f000 ff27 	bl	8001d64 <__clzsi2>
 8000f16:	003b      	movs	r3, r7
 8000f18:	3805      	subs	r0, #5
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	4285      	cmp	r5, r0
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_fsub+0x86>
 8000f20:	e0a2      	b.n	8001068 <__aeabi_fsub+0x1cc>
 8000f22:	4ab7      	ldr	r2, [pc, #732]	@ (8001200 <__aeabi_fsub+0x364>)
 8000f24:	1a2d      	subs	r5, r5, r0
 8000f26:	401a      	ands	r2, r3
 8000f28:	4694      	mov	ip, r2
 8000f2a:	075a      	lsls	r2, r3, #29
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x94>
 8000f2e:	e0c3      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f30:	220f      	movs	r2, #15
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x9e>
 8000f38:	e0be      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	44c4      	add	ip, r8
 8000f40:	4663      	mov	r3, ip
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fsub+0xac>
 8000f46:	e0b7      	b.n	80010b8 <__aeabi_fsub+0x21c>
 8000f48:	1c68      	adds	r0, r5, #1
 8000f4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0xb4>
 8000f4e:	e0a5      	b.n	800109c <__aeabi_fsub+0x200>
 8000f50:	20ff      	movs	r0, #255	@ 0xff
 8000f52:	2200      	movs	r2, #0
 8000f54:	05c0      	lsls	r0, r0, #23
 8000f56:	4310      	orrs	r0, r2
 8000f58:	07e4      	lsls	r4, r4, #31
 8000f5a:	4320      	orrs	r0, r4
 8000f5c:	bcc0      	pop	{r6, r7}
 8000f5e:	46b9      	mov	r9, r7
 8000f60:	46b0      	mov	r8, r6
 8000f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dc00      	bgt.n	8000f6a <__aeabi_fsub+0xce>
 8000f68:	e1eb      	b.n	8001342 <__aeabi_fsub+0x4a6>
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d046      	beq.n	8000ffc <__aeabi_fsub+0x160>
 8000f6e:	2dff      	cmp	r5, #255	@ 0xff
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0xd8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_fsub+0x222>
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	04d2      	lsls	r2, r2, #19
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	2b1b      	cmp	r3, #27
 8000f7c:	dc00      	bgt.n	8000f80 <__aeabi_fsub+0xe4>
 8000f7e:	e0fb      	b.n	8001178 <__aeabi_fsub+0x2dc>
 8000f80:	2305      	movs	r3, #5
 8000f82:	4698      	mov	r8, r3
 8000f84:	002b      	movs	r3, r5
 8000f86:	44c4      	add	ip, r8
 8000f88:	4662      	mov	r2, ip
 8000f8a:	08d7      	lsrs	r7, r2, #3
 8000f8c:	2bff      	cmp	r3, #255	@ 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0xf6>
 8000f90:	e095      	b.n	80010be <__aeabi_fsub+0x222>
 8000f92:	027a      	lsls	r2, r7, #9
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7dc      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8000f9a:	002b      	movs	r3, r5
 8000f9c:	3bff      	subs	r3, #255	@ 0xff
 8000f9e:	4699      	mov	r9, r3
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d118      	bne.n	8000fd6 <__aeabi_fsub+0x13a>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	405e      	eors	r6, r3
 8000fa8:	42b4      	cmp	r4, r6
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x112>
 8000fac:	e0ca      	b.n	8001144 <__aeabi_fsub+0x2a8>
 8000fae:	464b      	mov	r3, r9
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d02d      	beq.n	8001010 <__aeabi_fsub+0x174>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_fsub+0x11e>
 8000fb8:	e13c      	b.n	8001234 <__aeabi_fsub+0x398>
 8000fba:	23ff      	movs	r3, #255	@ 0xff
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x128>
 8000fc2:	e15f      	b.n	8001284 <__aeabi_fsub+0x3e8>
 8000fc4:	1e5d      	subs	r5, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x130>
 8000fca:	e174      	b.n	80012b6 <__aeabi_fsub+0x41a>
 8000fcc:	0034      	movs	r4, r6
 8000fce:	2bff      	cmp	r3, #255	@ 0xff
 8000fd0:	d074      	beq.n	80010bc <__aeabi_fsub+0x220>
 8000fd2:	002b      	movs	r3, r5
 8000fd4:	e103      	b.n	80011de <__aeabi_fsub+0x342>
 8000fd6:	42b4      	cmp	r4, r6
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x140>
 8000fda:	e09c      	b.n	8001116 <__aeabi_fsub+0x27a>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d017      	beq.n	8001010 <__aeabi_fsub+0x174>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d0ea      	beq.n	8000fba <__aeabi_fsub+0x11e>
 8000fe4:	0007      	movs	r7, r0
 8000fe6:	0034      	movs	r4, r6
 8000fe8:	e06c      	b.n	80010c4 <__aeabi_fsub+0x228>
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d0cc      	beq.n	8000f88 <__aeabi_fsub+0xec>
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d02b      	beq.n	800104c <__aeabi_fsub+0x1b0>
 8000ff4:	2bff      	cmp	r3, #255	@ 0xff
 8000ff6:	d062      	beq.n	80010be <__aeabi_fsub+0x222>
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	e773      	b.n	8000ee4 <__aeabi_fsub+0x48>
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	d0c3      	beq.n	8000f88 <__aeabi_fsub+0xec>
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x16c>
 8001006:	e11e      	b.n	8001246 <__aeabi_fsub+0x3aa>
 8001008:	2bff      	cmp	r3, #255	@ 0xff
 800100a:	d058      	beq.n	80010be <__aeabi_fsub+0x222>
 800100c:	0013      	movs	r3, r2
 800100e:	e7b4      	b.n	8000f7a <__aeabi_fsub+0xde>
 8001010:	22fe      	movs	r2, #254	@ 0xfe
 8001012:	1c6b      	adds	r3, r5, #1
 8001014:	421a      	tst	r2, r3
 8001016:	d10d      	bne.n	8001034 <__aeabi_fsub+0x198>
 8001018:	2d00      	cmp	r5, #0
 800101a:	d060      	beq.n	80010de <__aeabi_fsub+0x242>
 800101c:	4663      	mov	r3, ip
 800101e:	2b00      	cmp	r3, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_fsub+0x188>
 8001022:	e120      	b.n	8001266 <__aeabi_fsub+0x3ca>
 8001024:	2900      	cmp	r1, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x18e>
 8001028:	e128      	b.n	800127c <__aeabi_fsub+0x3e0>
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	2400      	movs	r4, #0
 800102e:	20ff      	movs	r0, #255	@ 0xff
 8001030:	03d2      	lsls	r2, r2, #15
 8001032:	e78f      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8001034:	4663      	mov	r3, ip
 8001036:	1a5f      	subs	r7, r3, r1
 8001038:	017b      	lsls	r3, r7, #5
 800103a:	d500      	bpl.n	800103e <__aeabi_fsub+0x1a2>
 800103c:	e0fe      	b.n	800123c <__aeabi_fsub+0x3a0>
 800103e:	2f00      	cmp	r7, #0
 8001040:	d000      	beq.n	8001044 <__aeabi_fsub+0x1a8>
 8001042:	e765      	b.n	8000f10 <__aeabi_fsub+0x74>
 8001044:	2400      	movs	r4, #0
 8001046:	2000      	movs	r0, #0
 8001048:	2200      	movs	r2, #0
 800104a:	e783      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800104c:	4663      	mov	r3, ip
 800104e:	1a59      	subs	r1, r3, r1
 8001050:	014b      	lsls	r3, r1, #5
 8001052:	d400      	bmi.n	8001056 <__aeabi_fsub+0x1ba>
 8001054:	e119      	b.n	800128a <__aeabi_fsub+0x3ee>
 8001056:	018f      	lsls	r7, r1, #6
 8001058:	09bf      	lsrs	r7, r7, #6
 800105a:	0038      	movs	r0, r7
 800105c:	f000 fe82 	bl	8001d64 <__clzsi2>
 8001060:	003b      	movs	r3, r7
 8001062:	3805      	subs	r0, #5
 8001064:	4083      	lsls	r3, r0
 8001066:	2501      	movs	r5, #1
 8001068:	2220      	movs	r2, #32
 800106a:	1b40      	subs	r0, r0, r5
 800106c:	3001      	adds	r0, #1
 800106e:	1a12      	subs	r2, r2, r0
 8001070:	0019      	movs	r1, r3
 8001072:	4093      	lsls	r3, r2
 8001074:	40c1      	lsrs	r1, r0
 8001076:	1e5a      	subs	r2, r3, #1
 8001078:	4193      	sbcs	r3, r2
 800107a:	4319      	orrs	r1, r3
 800107c:	468c      	mov	ip, r1
 800107e:	1e0b      	subs	r3, r1, #0
 8001080:	d0e1      	beq.n	8001046 <__aeabi_fsub+0x1aa>
 8001082:	075b      	lsls	r3, r3, #29
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x1ec>
 8001086:	e152      	b.n	800132e <__aeabi_fsub+0x492>
 8001088:	230f      	movs	r3, #15
 800108a:	2500      	movs	r5, #0
 800108c:	400b      	ands	r3, r1
 800108e:	2b04      	cmp	r3, #4
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x1f8>
 8001092:	e752      	b.n	8000f3a <__aeabi_fsub+0x9e>
 8001094:	2001      	movs	r0, #1
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d400      	bmi.n	800109c <__aeabi_fsub+0x200>
 800109a:	e092      	b.n	80011c2 <__aeabi_fsub+0x326>
 800109c:	b2c0      	uxtb	r0, r0
 800109e:	4663      	mov	r3, ip
 80010a0:	019a      	lsls	r2, r3, #6
 80010a2:	0a52      	lsrs	r2, r2, #9
 80010a4:	e756      	b.n	8000f54 <__aeabi_fsub+0xb8>
 80010a6:	4663      	mov	r3, ip
 80010a8:	075b      	lsls	r3, r3, #29
 80010aa:	d005      	beq.n	80010b8 <__aeabi_fsub+0x21c>
 80010ac:	230f      	movs	r3, #15
 80010ae:	4662      	mov	r2, ip
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x21c>
 80010b6:	e740      	b.n	8000f3a <__aeabi_fsub+0x9e>
 80010b8:	002b      	movs	r3, r5
 80010ba:	e765      	b.n	8000f88 <__aeabi_fsub+0xec>
 80010bc:	0007      	movs	r7, r0
 80010be:	2f00      	cmp	r7, #0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x228>
 80010c2:	e745      	b.n	8000f50 <__aeabi_fsub+0xb4>
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	03d2      	lsls	r2, r2, #15
 80010c8:	433a      	orrs	r2, r7
 80010ca:	0252      	lsls	r2, r2, #9
 80010cc:	20ff      	movs	r0, #255	@ 0xff
 80010ce:	0a52      	lsrs	r2, r2, #9
 80010d0:	e740      	b.n	8000f54 <__aeabi_fsub+0xb8>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d179      	bne.n	80011ca <__aeabi_fsub+0x32e>
 80010d6:	22fe      	movs	r2, #254	@ 0xfe
 80010d8:	1c6b      	adds	r3, r5, #1
 80010da:	421a      	tst	r2, r3
 80010dc:	d1aa      	bne.n	8001034 <__aeabi_fsub+0x198>
 80010de:	4663      	mov	r3, ip
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x24a>
 80010e4:	e0f5      	b.n	80012d2 <__aeabi_fsub+0x436>
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x250>
 80010ea:	e0d1      	b.n	8001290 <__aeabi_fsub+0x3f4>
 80010ec:	1a5f      	subs	r7, r3, r1
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	04db      	lsls	r3, r3, #19
 80010f2:	421f      	tst	r7, r3
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x25c>
 80010f6:	e10e      	b.n	8001316 <__aeabi_fsub+0x47a>
 80010f8:	4662      	mov	r2, ip
 80010fa:	2401      	movs	r4, #1
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	4694      	mov	ip, r2
 8001100:	2000      	movs	r0, #0
 8001102:	4034      	ands	r4, r6
 8001104:	2a00      	cmp	r2, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x26e>
 8001108:	e724      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800110a:	2001      	movs	r0, #1
 800110c:	421a      	tst	r2, r3
 800110e:	d1c6      	bne.n	800109e <__aeabi_fsub+0x202>
 8001110:	2300      	movs	r3, #0
 8001112:	08d7      	lsrs	r7, r2, #3
 8001114:	e73d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d017      	beq.n	800114a <__aeabi_fsub+0x2ae>
 800111a:	2d00      	cmp	r5, #0
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x284>
 800111e:	e0af      	b.n	8001280 <__aeabi_fsub+0x3e4>
 8001120:	23ff      	movs	r3, #255	@ 0xff
 8001122:	4665      	mov	r5, ip
 8001124:	2d00      	cmp	r5, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x28e>
 8001128:	e0ad      	b.n	8001286 <__aeabi_fsub+0x3ea>
 800112a:	1e5e      	subs	r6, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x296>
 8001130:	e089      	b.n	8001246 <__aeabi_fsub+0x3aa>
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d0c2      	beq.n	80010bc <__aeabi_fsub+0x220>
 8001136:	2e1b      	cmp	r6, #27
 8001138:	dc00      	bgt.n	800113c <__aeabi_fsub+0x2a0>
 800113a:	e0ab      	b.n	8001294 <__aeabi_fsub+0x3f8>
 800113c:	1d4b      	adds	r3, r1, #5
 800113e:	469c      	mov	ip, r3
 8001140:	0013      	movs	r3, r2
 8001142:	e721      	b.n	8000f88 <__aeabi_fsub+0xec>
 8001144:	464b      	mov	r3, r9
 8001146:	2b00      	cmp	r3, #0
 8001148:	d170      	bne.n	800122c <__aeabi_fsub+0x390>
 800114a:	22fe      	movs	r2, #254	@ 0xfe
 800114c:	1c6b      	adds	r3, r5, #1
 800114e:	421a      	tst	r2, r3
 8001150:	d15e      	bne.n	8001210 <__aeabi_fsub+0x374>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d000      	beq.n	8001158 <__aeabi_fsub+0x2bc>
 8001156:	e0c3      	b.n	80012e0 <__aeabi_fsub+0x444>
 8001158:	4663      	mov	r3, ip
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x2c4>
 800115e:	e0d0      	b.n	8001302 <__aeabi_fsub+0x466>
 8001160:	2900      	cmp	r1, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x2ca>
 8001164:	e094      	b.n	8001290 <__aeabi_fsub+0x3f4>
 8001166:	000a      	movs	r2, r1
 8001168:	4462      	add	r2, ip
 800116a:	0153      	lsls	r3, r2, #5
 800116c:	d400      	bmi.n	8001170 <__aeabi_fsub+0x2d4>
 800116e:	e0d8      	b.n	8001322 <__aeabi_fsub+0x486>
 8001170:	0192      	lsls	r2, r2, #6
 8001172:	2001      	movs	r0, #1
 8001174:	0a52      	lsrs	r2, r2, #9
 8001176:	e6ed      	b.n	8000f54 <__aeabi_fsub+0xb8>
 8001178:	0008      	movs	r0, r1
 800117a:	2220      	movs	r2, #32
 800117c:	40d8      	lsrs	r0, r3
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4099      	lsls	r1, r3
 8001182:	000b      	movs	r3, r1
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	4193      	sbcs	r3, r2
 8001188:	4303      	orrs	r3, r0
 800118a:	449c      	add	ip, r3
 800118c:	4663      	mov	r3, ip
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	d589      	bpl.n	80010a6 <__aeabi_fsub+0x20a>
 8001192:	3501      	adds	r5, #1
 8001194:	2dff      	cmp	r5, #255	@ 0xff
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x2fe>
 8001198:	e6da      	b.n	8000f50 <__aeabi_fsub+0xb4>
 800119a:	4662      	mov	r2, ip
 800119c:	2301      	movs	r3, #1
 800119e:	4919      	ldr	r1, [pc, #100]	@ (8001204 <__aeabi_fsub+0x368>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	0852      	lsrs	r2, r2, #1
 80011a4:	400a      	ands	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	4694      	mov	ip, r2
 80011ac:	075b      	lsls	r3, r3, #29
 80011ae:	d004      	beq.n	80011ba <__aeabi_fsub+0x31e>
 80011b0:	230f      	movs	r3, #15
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0x31e>
 80011b8:	e6bf      	b.n	8000f3a <__aeabi_fsub+0x9e>
 80011ba:	4663      	mov	r3, ip
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	d500      	bpl.n	80011c2 <__aeabi_fsub+0x326>
 80011c0:	e6c2      	b.n	8000f48 <__aeabi_fsub+0xac>
 80011c2:	4663      	mov	r3, ip
 80011c4:	08df      	lsrs	r7, r3, #3
 80011c6:	002b      	movs	r3, r5
 80011c8:	e6e3      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80011ca:	1b53      	subs	r3, r2, r5
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_fsub+0x336>
 80011d0:	e6f4      	b.n	8000fbc <__aeabi_fsub+0x120>
 80011d2:	2080      	movs	r0, #128	@ 0x80
 80011d4:	4664      	mov	r4, ip
 80011d6:	04c0      	lsls	r0, r0, #19
 80011d8:	4304      	orrs	r4, r0
 80011da:	46a4      	mov	ip, r4
 80011dc:	0034      	movs	r4, r6
 80011de:	2001      	movs	r0, #1
 80011e0:	2b1b      	cmp	r3, #27
 80011e2:	dc09      	bgt.n	80011f8 <__aeabi_fsub+0x35c>
 80011e4:	2520      	movs	r5, #32
 80011e6:	4660      	mov	r0, ip
 80011e8:	40d8      	lsrs	r0, r3
 80011ea:	1aeb      	subs	r3, r5, r3
 80011ec:	4665      	mov	r5, ip
 80011ee:	409d      	lsls	r5, r3
 80011f0:	002b      	movs	r3, r5
 80011f2:	1e5d      	subs	r5, r3, #1
 80011f4:	41ab      	sbcs	r3, r5
 80011f6:	4318      	orrs	r0, r3
 80011f8:	1a0b      	subs	r3, r1, r0
 80011fa:	469c      	mov	ip, r3
 80011fc:	0015      	movs	r5, r2
 80011fe:	e680      	b.n	8000f02 <__aeabi_fsub+0x66>
 8001200:	fbffffff 	.word	0xfbffffff
 8001204:	7dffffff 	.word	0x7dffffff
 8001208:	22fe      	movs	r2, #254	@ 0xfe
 800120a:	1c6b      	adds	r3, r5, #1
 800120c:	4213      	tst	r3, r2
 800120e:	d0a3      	beq.n	8001158 <__aeabi_fsub+0x2bc>
 8001210:	2bff      	cmp	r3, #255	@ 0xff
 8001212:	d100      	bne.n	8001216 <__aeabi_fsub+0x37a>
 8001214:	e69c      	b.n	8000f50 <__aeabi_fsub+0xb4>
 8001216:	4461      	add	r1, ip
 8001218:	0849      	lsrs	r1, r1, #1
 800121a:	074a      	lsls	r2, r1, #29
 800121c:	d049      	beq.n	80012b2 <__aeabi_fsub+0x416>
 800121e:	220f      	movs	r2, #15
 8001220:	400a      	ands	r2, r1
 8001222:	2a04      	cmp	r2, #4
 8001224:	d045      	beq.n	80012b2 <__aeabi_fsub+0x416>
 8001226:	1d0a      	adds	r2, r1, #4
 8001228:	4694      	mov	ip, r2
 800122a:	e6ad      	b.n	8000f88 <__aeabi_fsub+0xec>
 800122c:	2d00      	cmp	r5, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_fsub+0x396>
 8001230:	e776      	b.n	8001120 <__aeabi_fsub+0x284>
 8001232:	e68d      	b.n	8000f50 <__aeabi_fsub+0xb4>
 8001234:	0034      	movs	r4, r6
 8001236:	20ff      	movs	r0, #255	@ 0xff
 8001238:	2200      	movs	r2, #0
 800123a:	e68b      	b.n	8000f54 <__aeabi_fsub+0xb8>
 800123c:	4663      	mov	r3, ip
 800123e:	2401      	movs	r4, #1
 8001240:	1acf      	subs	r7, r1, r3
 8001242:	4034      	ands	r4, r6
 8001244:	e664      	b.n	8000f10 <__aeabi_fsub+0x74>
 8001246:	4461      	add	r1, ip
 8001248:	014b      	lsls	r3, r1, #5
 800124a:	d56d      	bpl.n	8001328 <__aeabi_fsub+0x48c>
 800124c:	0848      	lsrs	r0, r1, #1
 800124e:	4944      	ldr	r1, [pc, #272]	@ (8001360 <__aeabi_fsub+0x4c4>)
 8001250:	4001      	ands	r1, r0
 8001252:	0743      	lsls	r3, r0, #29
 8001254:	d02c      	beq.n	80012b0 <__aeabi_fsub+0x414>
 8001256:	230f      	movs	r3, #15
 8001258:	4003      	ands	r3, r0
 800125a:	2b04      	cmp	r3, #4
 800125c:	d028      	beq.n	80012b0 <__aeabi_fsub+0x414>
 800125e:	1d0b      	adds	r3, r1, #4
 8001260:	469c      	mov	ip, r3
 8001262:	2302      	movs	r3, #2
 8001264:	e690      	b.n	8000f88 <__aeabi_fsub+0xec>
 8001266:	2900      	cmp	r1, #0
 8001268:	d100      	bne.n	800126c <__aeabi_fsub+0x3d0>
 800126a:	e72b      	b.n	80010c4 <__aeabi_fsub+0x228>
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	03db      	lsls	r3, r3, #15
 8001270:	429f      	cmp	r7, r3
 8001272:	d200      	bcs.n	8001276 <__aeabi_fsub+0x3da>
 8001274:	e726      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001276:	4298      	cmp	r0, r3
 8001278:	d300      	bcc.n	800127c <__aeabi_fsub+0x3e0>
 800127a:	e723      	b.n	80010c4 <__aeabi_fsub+0x228>
 800127c:	2401      	movs	r4, #1
 800127e:	4034      	ands	r4, r6
 8001280:	0007      	movs	r7, r0
 8001282:	e71f      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001284:	0034      	movs	r4, r6
 8001286:	468c      	mov	ip, r1
 8001288:	e67e      	b.n	8000f88 <__aeabi_fsub+0xec>
 800128a:	2301      	movs	r3, #1
 800128c:	08cf      	lsrs	r7, r1, #3
 800128e:	e680      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001290:	2300      	movs	r3, #0
 8001292:	e67e      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001294:	2020      	movs	r0, #32
 8001296:	4665      	mov	r5, ip
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	4085      	lsls	r5, r0
 800129c:	4663      	mov	r3, ip
 800129e:	0028      	movs	r0, r5
 80012a0:	40f3      	lsrs	r3, r6
 80012a2:	1e45      	subs	r5, r0, #1
 80012a4:	41a8      	sbcs	r0, r5
 80012a6:	4303      	orrs	r3, r0
 80012a8:	469c      	mov	ip, r3
 80012aa:	0015      	movs	r5, r2
 80012ac:	448c      	add	ip, r1
 80012ae:	e76d      	b.n	800118c <__aeabi_fsub+0x2f0>
 80012b0:	2302      	movs	r3, #2
 80012b2:	08cf      	lsrs	r7, r1, #3
 80012b4:	e66d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80012b6:	1b0f      	subs	r7, r1, r4
 80012b8:	017b      	lsls	r3, r7, #5
 80012ba:	d528      	bpl.n	800130e <__aeabi_fsub+0x472>
 80012bc:	01bf      	lsls	r7, r7, #6
 80012be:	09bf      	lsrs	r7, r7, #6
 80012c0:	0038      	movs	r0, r7
 80012c2:	f000 fd4f 	bl	8001d64 <__clzsi2>
 80012c6:	003b      	movs	r3, r7
 80012c8:	3805      	subs	r0, #5
 80012ca:	4083      	lsls	r3, r0
 80012cc:	0034      	movs	r4, r6
 80012ce:	2501      	movs	r5, #1
 80012d0:	e6ca      	b.n	8001068 <__aeabi_fsub+0x1cc>
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x43c>
 80012d6:	e6b5      	b.n	8001044 <__aeabi_fsub+0x1a8>
 80012d8:	2401      	movs	r4, #1
 80012da:	0007      	movs	r7, r0
 80012dc:	4034      	ands	r4, r6
 80012de:	e658      	b.n	8000f92 <__aeabi_fsub+0xf6>
 80012e0:	4663      	mov	r3, ip
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_fsub+0x44c>
 80012e6:	e6e9      	b.n	80010bc <__aeabi_fsub+0x220>
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0x452>
 80012ec:	e6ea      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	03db      	lsls	r3, r3, #15
 80012f2:	429f      	cmp	r7, r3
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_fsub+0x45c>
 80012f6:	e6e5      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012f8:	4298      	cmp	r0, r3
 80012fa:	d300      	bcc.n	80012fe <__aeabi_fsub+0x462>
 80012fc:	e6e2      	b.n	80010c4 <__aeabi_fsub+0x228>
 80012fe:	0007      	movs	r7, r0
 8001300:	e6e0      	b.n	80010c4 <__aeabi_fsub+0x228>
 8001302:	2900      	cmp	r1, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_fsub+0x46c>
 8001306:	e69e      	b.n	8001046 <__aeabi_fsub+0x1aa>
 8001308:	2300      	movs	r3, #0
 800130a:	08cf      	lsrs	r7, r1, #3
 800130c:	e641      	b.n	8000f92 <__aeabi_fsub+0xf6>
 800130e:	0034      	movs	r4, r6
 8001310:	2301      	movs	r3, #1
 8001312:	08ff      	lsrs	r7, r7, #3
 8001314:	e63d      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001316:	2f00      	cmp	r7, #0
 8001318:	d100      	bne.n	800131c <__aeabi_fsub+0x480>
 800131a:	e693      	b.n	8001044 <__aeabi_fsub+0x1a8>
 800131c:	2300      	movs	r3, #0
 800131e:	08ff      	lsrs	r7, r7, #3
 8001320:	e637      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001322:	2300      	movs	r3, #0
 8001324:	08d7      	lsrs	r7, r2, #3
 8001326:	e634      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001328:	2301      	movs	r3, #1
 800132a:	08cf      	lsrs	r7, r1, #3
 800132c:	e631      	b.n	8000f92 <__aeabi_fsub+0xf6>
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	000b      	movs	r3, r1
 8001332:	04d2      	lsls	r2, r2, #19
 8001334:	2001      	movs	r0, #1
 8001336:	4013      	ands	r3, r2
 8001338:	4211      	tst	r1, r2
 800133a:	d000      	beq.n	800133e <__aeabi_fsub+0x4a2>
 800133c:	e6ae      	b.n	800109c <__aeabi_fsub+0x200>
 800133e:	08cf      	lsrs	r7, r1, #3
 8001340:	e627      	b.n	8000f92 <__aeabi_fsub+0xf6>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x4ac>
 8001346:	e75f      	b.n	8001208 <__aeabi_fsub+0x36c>
 8001348:	1b56      	subs	r6, r2, r5
 800134a:	2d00      	cmp	r5, #0
 800134c:	d101      	bne.n	8001352 <__aeabi_fsub+0x4b6>
 800134e:	0033      	movs	r3, r6
 8001350:	e6e7      	b.n	8001122 <__aeabi_fsub+0x286>
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	4660      	mov	r0, ip
 8001356:	04db      	lsls	r3, r3, #19
 8001358:	4318      	orrs	r0, r3
 800135a:	4684      	mov	ip, r0
 800135c:	e6eb      	b.n	8001136 <__aeabi_fsub+0x29a>
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	7dffffff 	.word	0x7dffffff

08001364 <__aeabi_f2iz>:
 8001364:	0241      	lsls	r1, r0, #9
 8001366:	0042      	lsls	r2, r0, #1
 8001368:	0fc3      	lsrs	r3, r0, #31
 800136a:	0a49      	lsrs	r1, r1, #9
 800136c:	2000      	movs	r0, #0
 800136e:	0e12      	lsrs	r2, r2, #24
 8001370:	2a7e      	cmp	r2, #126	@ 0x7e
 8001372:	dd03      	ble.n	800137c <__aeabi_f2iz+0x18>
 8001374:	2a9d      	cmp	r2, #157	@ 0x9d
 8001376:	dd02      	ble.n	800137e <__aeabi_f2iz+0x1a>
 8001378:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <__aeabi_f2iz+0x3c>)
 800137a:	1898      	adds	r0, r3, r2
 800137c:	4770      	bx	lr
 800137e:	2080      	movs	r0, #128	@ 0x80
 8001380:	0400      	lsls	r0, r0, #16
 8001382:	4301      	orrs	r1, r0
 8001384:	2a95      	cmp	r2, #149	@ 0x95
 8001386:	dc07      	bgt.n	8001398 <__aeabi_f2iz+0x34>
 8001388:	2096      	movs	r0, #150	@ 0x96
 800138a:	1a82      	subs	r2, r0, r2
 800138c:	40d1      	lsrs	r1, r2
 800138e:	4248      	negs	r0, r1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f3      	bne.n	800137c <__aeabi_f2iz+0x18>
 8001394:	0008      	movs	r0, r1
 8001396:	e7f1      	b.n	800137c <__aeabi_f2iz+0x18>
 8001398:	3a96      	subs	r2, #150	@ 0x96
 800139a:	4091      	lsls	r1, r2
 800139c:	e7f7      	b.n	800138e <__aeabi_f2iz+0x2a>
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	7fffffff 	.word	0x7fffffff

080013a4 <__aeabi_i2f>:
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d012      	beq.n	80013d0 <__aeabi_i2f+0x2c>
 80013aa:	17c3      	asrs	r3, r0, #31
 80013ac:	18c5      	adds	r5, r0, r3
 80013ae:	405d      	eors	r5, r3
 80013b0:	0fc4      	lsrs	r4, r0, #31
 80013b2:	0028      	movs	r0, r5
 80013b4:	f000 fcd6 	bl	8001d64 <__clzsi2>
 80013b8:	239e      	movs	r3, #158	@ 0x9e
 80013ba:	1a1b      	subs	r3, r3, r0
 80013bc:	2b96      	cmp	r3, #150	@ 0x96
 80013be:	dc0f      	bgt.n	80013e0 <__aeabi_i2f+0x3c>
 80013c0:	2808      	cmp	r0, #8
 80013c2:	d038      	beq.n	8001436 <__aeabi_i2f+0x92>
 80013c4:	3808      	subs	r0, #8
 80013c6:	4085      	lsls	r5, r0
 80013c8:	026d      	lsls	r5, r5, #9
 80013ca:	0a6d      	lsrs	r5, r5, #9
 80013cc:	b2d8      	uxtb	r0, r3
 80013ce:	e002      	b.n	80013d6 <__aeabi_i2f+0x32>
 80013d0:	2400      	movs	r4, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	05c0      	lsls	r0, r0, #23
 80013d8:	4328      	orrs	r0, r5
 80013da:	07e4      	lsls	r4, r4, #31
 80013dc:	4320      	orrs	r0, r4
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	2b99      	cmp	r3, #153	@ 0x99
 80013e2:	dc14      	bgt.n	800140e <__aeabi_i2f+0x6a>
 80013e4:	1f42      	subs	r2, r0, #5
 80013e6:	4095      	lsls	r5, r2
 80013e8:	002a      	movs	r2, r5
 80013ea:	4915      	ldr	r1, [pc, #84]	@ (8001440 <__aeabi_i2f+0x9c>)
 80013ec:	4011      	ands	r1, r2
 80013ee:	0755      	lsls	r5, r2, #29
 80013f0:	d01c      	beq.n	800142c <__aeabi_i2f+0x88>
 80013f2:	250f      	movs	r5, #15
 80013f4:	402a      	ands	r2, r5
 80013f6:	2a04      	cmp	r2, #4
 80013f8:	d018      	beq.n	800142c <__aeabi_i2f+0x88>
 80013fa:	3104      	adds	r1, #4
 80013fc:	08ca      	lsrs	r2, r1, #3
 80013fe:	0149      	lsls	r1, r1, #5
 8001400:	d515      	bpl.n	800142e <__aeabi_i2f+0x8a>
 8001402:	239f      	movs	r3, #159	@ 0x9f
 8001404:	0252      	lsls	r2, r2, #9
 8001406:	1a18      	subs	r0, r3, r0
 8001408:	0a55      	lsrs	r5, r2, #9
 800140a:	b2c0      	uxtb	r0, r0
 800140c:	e7e3      	b.n	80013d6 <__aeabi_i2f+0x32>
 800140e:	2205      	movs	r2, #5
 8001410:	0029      	movs	r1, r5
 8001412:	1a12      	subs	r2, r2, r0
 8001414:	40d1      	lsrs	r1, r2
 8001416:	0002      	movs	r2, r0
 8001418:	321b      	adds	r2, #27
 800141a:	4095      	lsls	r5, r2
 800141c:	002a      	movs	r2, r5
 800141e:	1e55      	subs	r5, r2, #1
 8001420:	41aa      	sbcs	r2, r5
 8001422:	430a      	orrs	r2, r1
 8001424:	4906      	ldr	r1, [pc, #24]	@ (8001440 <__aeabi_i2f+0x9c>)
 8001426:	4011      	ands	r1, r2
 8001428:	0755      	lsls	r5, r2, #29
 800142a:	d1e2      	bne.n	80013f2 <__aeabi_i2f+0x4e>
 800142c:	08ca      	lsrs	r2, r1, #3
 800142e:	0252      	lsls	r2, r2, #9
 8001430:	0a55      	lsrs	r5, r2, #9
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	e7cf      	b.n	80013d6 <__aeabi_i2f+0x32>
 8001436:	026d      	lsls	r5, r5, #9
 8001438:	0a6d      	lsrs	r5, r5, #9
 800143a:	308e      	adds	r0, #142	@ 0x8e
 800143c:	e7cb      	b.n	80013d6 <__aeabi_i2f+0x32>
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	fbffffff 	.word	0xfbffffff

08001444 <__aeabi_dadd>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	464f      	mov	r7, r9
 8001448:	4646      	mov	r6, r8
 800144a:	46d6      	mov	lr, sl
 800144c:	b5c0      	push	{r6, r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	9000      	str	r0, [sp, #0]
 8001452:	9101      	str	r1, [sp, #4]
 8001454:	030e      	lsls	r6, r1, #12
 8001456:	004c      	lsls	r4, r1, #1
 8001458:	0fcd      	lsrs	r5, r1, #31
 800145a:	0a71      	lsrs	r1, r6, #9
 800145c:	9e00      	ldr	r6, [sp, #0]
 800145e:	005f      	lsls	r7, r3, #1
 8001460:	0f76      	lsrs	r6, r6, #29
 8001462:	430e      	orrs	r6, r1
 8001464:	9900      	ldr	r1, [sp, #0]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	00c9      	lsls	r1, r1, #3
 800146c:	4689      	mov	r9, r1
 800146e:	0319      	lsls	r1, r3, #12
 8001470:	0d7b      	lsrs	r3, r7, #21
 8001472:	4698      	mov	r8, r3
 8001474:	9b01      	ldr	r3, [sp, #4]
 8001476:	0a49      	lsrs	r1, r1, #9
 8001478:	0fdb      	lsrs	r3, r3, #31
 800147a:	469c      	mov	ip, r3
 800147c:	9b00      	ldr	r3, [sp, #0]
 800147e:	9a00      	ldr	r2, [sp, #0]
 8001480:	0f5b      	lsrs	r3, r3, #29
 8001482:	430b      	orrs	r3, r1
 8001484:	4641      	mov	r1, r8
 8001486:	0d64      	lsrs	r4, r4, #21
 8001488:	00d2      	lsls	r2, r2, #3
 800148a:	1a61      	subs	r1, r4, r1
 800148c:	4565      	cmp	r5, ip
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4e>
 8001490:	e0a6      	b.n	80015e0 <__aeabi_dadd+0x19c>
 8001492:	2900      	cmp	r1, #0
 8001494:	dd72      	ble.n	800157c <__aeabi_dadd+0x138>
 8001496:	4647      	mov	r7, r8
 8001498:	2f00      	cmp	r7, #0
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x5a>
 800149c:	e0dd      	b.n	800165a <__aeabi_dadd+0x216>
 800149e:	4fcc      	ldr	r7, [pc, #816]	@ (80017d0 <__aeabi_dadd+0x38c>)
 80014a0:	42bc      	cmp	r4, r7
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x62>
 80014a4:	e19a      	b.n	80017dc <__aeabi_dadd+0x398>
 80014a6:	2701      	movs	r7, #1
 80014a8:	2938      	cmp	r1, #56	@ 0x38
 80014aa:	dc17      	bgt.n	80014dc <__aeabi_dadd+0x98>
 80014ac:	2780      	movs	r7, #128	@ 0x80
 80014ae:	043f      	lsls	r7, r7, #16
 80014b0:	433b      	orrs	r3, r7
 80014b2:	291f      	cmp	r1, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x74>
 80014b6:	e1dd      	b.n	8001874 <__aeabi_dadd+0x430>
 80014b8:	2720      	movs	r7, #32
 80014ba:	1a78      	subs	r0, r7, r1
 80014bc:	001f      	movs	r7, r3
 80014be:	4087      	lsls	r7, r0
 80014c0:	46ba      	mov	sl, r7
 80014c2:	0017      	movs	r7, r2
 80014c4:	40cf      	lsrs	r7, r1
 80014c6:	4684      	mov	ip, r0
 80014c8:	0038      	movs	r0, r7
 80014ca:	4657      	mov	r7, sl
 80014cc:	4307      	orrs	r7, r0
 80014ce:	4660      	mov	r0, ip
 80014d0:	4082      	lsls	r2, r0
 80014d2:	40cb      	lsrs	r3, r1
 80014d4:	1e50      	subs	r0, r2, #1
 80014d6:	4182      	sbcs	r2, r0
 80014d8:	1af6      	subs	r6, r6, r3
 80014da:	4317      	orrs	r7, r2
 80014dc:	464b      	mov	r3, r9
 80014de:	1bdf      	subs	r7, r3, r7
 80014e0:	45b9      	cmp	r9, r7
 80014e2:	4180      	sbcs	r0, r0
 80014e4:	4240      	negs	r0, r0
 80014e6:	1a36      	subs	r6, r6, r0
 80014e8:	0233      	lsls	r3, r6, #8
 80014ea:	d400      	bmi.n	80014ee <__aeabi_dadd+0xaa>
 80014ec:	e0ff      	b.n	80016ee <__aeabi_dadd+0x2aa>
 80014ee:	0276      	lsls	r6, r6, #9
 80014f0:	0a76      	lsrs	r6, r6, #9
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0xb4>
 80014f6:	e13c      	b.n	8001772 <__aeabi_dadd+0x32e>
 80014f8:	0030      	movs	r0, r6
 80014fa:	f000 fc33 	bl	8001d64 <__clzsi2>
 80014fe:	0003      	movs	r3, r0
 8001500:	3b08      	subs	r3, #8
 8001502:	2120      	movs	r1, #32
 8001504:	0038      	movs	r0, r7
 8001506:	1aca      	subs	r2, r1, r3
 8001508:	40d0      	lsrs	r0, r2
 800150a:	409e      	lsls	r6, r3
 800150c:	0002      	movs	r2, r0
 800150e:	409f      	lsls	r7, r3
 8001510:	4332      	orrs	r2, r6
 8001512:	429c      	cmp	r4, r3
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0xd4>
 8001516:	e1a6      	b.n	8001866 <__aeabi_dadd+0x422>
 8001518:	1b18      	subs	r0, r3, r4
 800151a:	3001      	adds	r0, #1
 800151c:	1a09      	subs	r1, r1, r0
 800151e:	003e      	movs	r6, r7
 8001520:	408f      	lsls	r7, r1
 8001522:	40c6      	lsrs	r6, r0
 8001524:	1e7b      	subs	r3, r7, #1
 8001526:	419f      	sbcs	r7, r3
 8001528:	0013      	movs	r3, r2
 800152a:	408b      	lsls	r3, r1
 800152c:	4337      	orrs	r7, r6
 800152e:	431f      	orrs	r7, r3
 8001530:	40c2      	lsrs	r2, r0
 8001532:	003b      	movs	r3, r7
 8001534:	0016      	movs	r6, r2
 8001536:	2400      	movs	r4, #0
 8001538:	4313      	orrs	r3, r2
 800153a:	d100      	bne.n	800153e <__aeabi_dadd+0xfa>
 800153c:	e1df      	b.n	80018fe <__aeabi_dadd+0x4ba>
 800153e:	077b      	lsls	r3, r7, #29
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x100>
 8001542:	e332      	b.n	8001baa <__aeabi_dadd+0x766>
 8001544:	230f      	movs	r3, #15
 8001546:	003a      	movs	r2, r7
 8001548:	403b      	ands	r3, r7
 800154a:	2b04      	cmp	r3, #4
 800154c:	d004      	beq.n	8001558 <__aeabi_dadd+0x114>
 800154e:	1d3a      	adds	r2, r7, #4
 8001550:	42ba      	cmp	r2, r7
 8001552:	41bf      	sbcs	r7, r7
 8001554:	427f      	negs	r7, r7
 8001556:	19f6      	adds	r6, r6, r7
 8001558:	0233      	lsls	r3, r6, #8
 800155a:	d400      	bmi.n	800155e <__aeabi_dadd+0x11a>
 800155c:	e323      	b.n	8001ba6 <__aeabi_dadd+0x762>
 800155e:	4b9c      	ldr	r3, [pc, #624]	@ (80017d0 <__aeabi_dadd+0x38c>)
 8001560:	3401      	adds	r4, #1
 8001562:	429c      	cmp	r4, r3
 8001564:	d100      	bne.n	8001568 <__aeabi_dadd+0x124>
 8001566:	e0b4      	b.n	80016d2 <__aeabi_dadd+0x28e>
 8001568:	4b9a      	ldr	r3, [pc, #616]	@ (80017d4 <__aeabi_dadd+0x390>)
 800156a:	0564      	lsls	r4, r4, #21
 800156c:	401e      	ands	r6, r3
 800156e:	0d64      	lsrs	r4, r4, #21
 8001570:	0777      	lsls	r7, r6, #29
 8001572:	08d2      	lsrs	r2, r2, #3
 8001574:	0276      	lsls	r6, r6, #9
 8001576:	4317      	orrs	r7, r2
 8001578:	0b36      	lsrs	r6, r6, #12
 800157a:	e0ac      	b.n	80016d6 <__aeabi_dadd+0x292>
 800157c:	2900      	cmp	r1, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x13e>
 8001580:	e07e      	b.n	8001680 <__aeabi_dadd+0x23c>
 8001582:	4641      	mov	r1, r8
 8001584:	1b09      	subs	r1, r1, r4
 8001586:	2c00      	cmp	r4, #0
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x148>
 800158a:	e160      	b.n	800184e <__aeabi_dadd+0x40a>
 800158c:	0034      	movs	r4, r6
 800158e:	4648      	mov	r0, r9
 8001590:	4304      	orrs	r4, r0
 8001592:	d100      	bne.n	8001596 <__aeabi_dadd+0x152>
 8001594:	e1c9      	b.n	800192a <__aeabi_dadd+0x4e6>
 8001596:	1e4c      	subs	r4, r1, #1
 8001598:	2901      	cmp	r1, #1
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x15a>
 800159c:	e22e      	b.n	80019fc <__aeabi_dadd+0x5b8>
 800159e:	4d8c      	ldr	r5, [pc, #560]	@ (80017d0 <__aeabi_dadd+0x38c>)
 80015a0:	42a9      	cmp	r1, r5
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x162>
 80015a4:	e224      	b.n	80019f0 <__aeabi_dadd+0x5ac>
 80015a6:	2701      	movs	r7, #1
 80015a8:	2c38      	cmp	r4, #56	@ 0x38
 80015aa:	dc11      	bgt.n	80015d0 <__aeabi_dadd+0x18c>
 80015ac:	0021      	movs	r1, r4
 80015ae:	291f      	cmp	r1, #31
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dadd+0x170>
 80015b2:	e20b      	b.n	80019cc <__aeabi_dadd+0x588>
 80015b4:	2420      	movs	r4, #32
 80015b6:	0037      	movs	r7, r6
 80015b8:	4648      	mov	r0, r9
 80015ba:	1a64      	subs	r4, r4, r1
 80015bc:	40a7      	lsls	r7, r4
 80015be:	40c8      	lsrs	r0, r1
 80015c0:	4307      	orrs	r7, r0
 80015c2:	4648      	mov	r0, r9
 80015c4:	40a0      	lsls	r0, r4
 80015c6:	40ce      	lsrs	r6, r1
 80015c8:	1e44      	subs	r4, r0, #1
 80015ca:	41a0      	sbcs	r0, r4
 80015cc:	1b9b      	subs	r3, r3, r6
 80015ce:	4307      	orrs	r7, r0
 80015d0:	1bd7      	subs	r7, r2, r7
 80015d2:	42ba      	cmp	r2, r7
 80015d4:	4192      	sbcs	r2, r2
 80015d6:	4252      	negs	r2, r2
 80015d8:	4665      	mov	r5, ip
 80015da:	4644      	mov	r4, r8
 80015dc:	1a9e      	subs	r6, r3, r2
 80015de:	e783      	b.n	80014e8 <__aeabi_dadd+0xa4>
 80015e0:	2900      	cmp	r1, #0
 80015e2:	dc00      	bgt.n	80015e6 <__aeabi_dadd+0x1a2>
 80015e4:	e09c      	b.n	8001720 <__aeabi_dadd+0x2dc>
 80015e6:	4647      	mov	r7, r8
 80015e8:	2f00      	cmp	r7, #0
 80015ea:	d167      	bne.n	80016bc <__aeabi_dadd+0x278>
 80015ec:	001f      	movs	r7, r3
 80015ee:	4317      	orrs	r7, r2
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x1b0>
 80015f2:	e0e4      	b.n	80017be <__aeabi_dadd+0x37a>
 80015f4:	1e48      	subs	r0, r1, #1
 80015f6:	2901      	cmp	r1, #1
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x1b8>
 80015fa:	e19b      	b.n	8001934 <__aeabi_dadd+0x4f0>
 80015fc:	4f74      	ldr	r7, [pc, #464]	@ (80017d0 <__aeabi_dadd+0x38c>)
 80015fe:	42b9      	cmp	r1, r7
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x1c0>
 8001602:	e0eb      	b.n	80017dc <__aeabi_dadd+0x398>
 8001604:	2701      	movs	r7, #1
 8001606:	0001      	movs	r1, r0
 8001608:	2838      	cmp	r0, #56	@ 0x38
 800160a:	dc11      	bgt.n	8001630 <__aeabi_dadd+0x1ec>
 800160c:	291f      	cmp	r1, #31
 800160e:	dd00      	ble.n	8001612 <__aeabi_dadd+0x1ce>
 8001610:	e1c7      	b.n	80019a2 <__aeabi_dadd+0x55e>
 8001612:	2720      	movs	r7, #32
 8001614:	1a78      	subs	r0, r7, r1
 8001616:	001f      	movs	r7, r3
 8001618:	4684      	mov	ip, r0
 800161a:	4087      	lsls	r7, r0
 800161c:	0010      	movs	r0, r2
 800161e:	40c8      	lsrs	r0, r1
 8001620:	4307      	orrs	r7, r0
 8001622:	4660      	mov	r0, ip
 8001624:	4082      	lsls	r2, r0
 8001626:	40cb      	lsrs	r3, r1
 8001628:	1e50      	subs	r0, r2, #1
 800162a:	4182      	sbcs	r2, r0
 800162c:	18f6      	adds	r6, r6, r3
 800162e:	4317      	orrs	r7, r2
 8001630:	444f      	add	r7, r9
 8001632:	454f      	cmp	r7, r9
 8001634:	4180      	sbcs	r0, r0
 8001636:	4240      	negs	r0, r0
 8001638:	1836      	adds	r6, r6, r0
 800163a:	0233      	lsls	r3, r6, #8
 800163c:	d557      	bpl.n	80016ee <__aeabi_dadd+0x2aa>
 800163e:	4b64      	ldr	r3, [pc, #400]	@ (80017d0 <__aeabi_dadd+0x38c>)
 8001640:	3401      	adds	r4, #1
 8001642:	429c      	cmp	r4, r3
 8001644:	d045      	beq.n	80016d2 <__aeabi_dadd+0x28e>
 8001646:	2101      	movs	r1, #1
 8001648:	4b62      	ldr	r3, [pc, #392]	@ (80017d4 <__aeabi_dadd+0x390>)
 800164a:	087a      	lsrs	r2, r7, #1
 800164c:	401e      	ands	r6, r3
 800164e:	4039      	ands	r1, r7
 8001650:	430a      	orrs	r2, r1
 8001652:	07f7      	lsls	r7, r6, #31
 8001654:	4317      	orrs	r7, r2
 8001656:	0876      	lsrs	r6, r6, #1
 8001658:	e771      	b.n	800153e <__aeabi_dadd+0xfa>
 800165a:	001f      	movs	r7, r3
 800165c:	4317      	orrs	r7, r2
 800165e:	d100      	bne.n	8001662 <__aeabi_dadd+0x21e>
 8001660:	e0ad      	b.n	80017be <__aeabi_dadd+0x37a>
 8001662:	1e4f      	subs	r7, r1, #1
 8001664:	46bc      	mov	ip, r7
 8001666:	2901      	cmp	r1, #1
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x228>
 800166a:	e182      	b.n	8001972 <__aeabi_dadd+0x52e>
 800166c:	4f58      	ldr	r7, [pc, #352]	@ (80017d0 <__aeabi_dadd+0x38c>)
 800166e:	42b9      	cmp	r1, r7
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x230>
 8001672:	e190      	b.n	8001996 <__aeabi_dadd+0x552>
 8001674:	4661      	mov	r1, ip
 8001676:	2701      	movs	r7, #1
 8001678:	2938      	cmp	r1, #56	@ 0x38
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x23a>
 800167c:	e72e      	b.n	80014dc <__aeabi_dadd+0x98>
 800167e:	e718      	b.n	80014b2 <__aeabi_dadd+0x6e>
 8001680:	4f55      	ldr	r7, [pc, #340]	@ (80017d8 <__aeabi_dadd+0x394>)
 8001682:	1c61      	adds	r1, r4, #1
 8001684:	4239      	tst	r1, r7
 8001686:	d000      	beq.n	800168a <__aeabi_dadd+0x246>
 8001688:	e0d0      	b.n	800182c <__aeabi_dadd+0x3e8>
 800168a:	0031      	movs	r1, r6
 800168c:	4648      	mov	r0, r9
 800168e:	001f      	movs	r7, r3
 8001690:	4301      	orrs	r1, r0
 8001692:	4317      	orrs	r7, r2
 8001694:	2c00      	cmp	r4, #0
 8001696:	d000      	beq.n	800169a <__aeabi_dadd+0x256>
 8001698:	e13d      	b.n	8001916 <__aeabi_dadd+0x4d2>
 800169a:	2900      	cmp	r1, #0
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x25c>
 800169e:	e1bc      	b.n	8001a1a <__aeabi_dadd+0x5d6>
 80016a0:	2f00      	cmp	r7, #0
 80016a2:	d000      	beq.n	80016a6 <__aeabi_dadd+0x262>
 80016a4:	e1bf      	b.n	8001a26 <__aeabi_dadd+0x5e2>
 80016a6:	464b      	mov	r3, r9
 80016a8:	2100      	movs	r1, #0
 80016aa:	08d8      	lsrs	r0, r3, #3
 80016ac:	0777      	lsls	r7, r6, #29
 80016ae:	4307      	orrs	r7, r0
 80016b0:	08f0      	lsrs	r0, r6, #3
 80016b2:	0306      	lsls	r6, r0, #12
 80016b4:	054c      	lsls	r4, r1, #21
 80016b6:	0b36      	lsrs	r6, r6, #12
 80016b8:	0d64      	lsrs	r4, r4, #21
 80016ba:	e00c      	b.n	80016d6 <__aeabi_dadd+0x292>
 80016bc:	4f44      	ldr	r7, [pc, #272]	@ (80017d0 <__aeabi_dadd+0x38c>)
 80016be:	42bc      	cmp	r4, r7
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x280>
 80016c2:	e08b      	b.n	80017dc <__aeabi_dadd+0x398>
 80016c4:	2701      	movs	r7, #1
 80016c6:	2938      	cmp	r1, #56	@ 0x38
 80016c8:	dcb2      	bgt.n	8001630 <__aeabi_dadd+0x1ec>
 80016ca:	2780      	movs	r7, #128	@ 0x80
 80016cc:	043f      	lsls	r7, r7, #16
 80016ce:	433b      	orrs	r3, r7
 80016d0:	e79c      	b.n	800160c <__aeabi_dadd+0x1c8>
 80016d2:	2600      	movs	r6, #0
 80016d4:	2700      	movs	r7, #0
 80016d6:	0524      	lsls	r4, r4, #20
 80016d8:	4334      	orrs	r4, r6
 80016da:	07ed      	lsls	r5, r5, #31
 80016dc:	432c      	orrs	r4, r5
 80016de:	0038      	movs	r0, r7
 80016e0:	0021      	movs	r1, r4
 80016e2:	b002      	add	sp, #8
 80016e4:	bce0      	pop	{r5, r6, r7}
 80016e6:	46ba      	mov	sl, r7
 80016e8:	46b1      	mov	r9, r6
 80016ea:	46a8      	mov	r8, r5
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ee:	077b      	lsls	r3, r7, #29
 80016f0:	d004      	beq.n	80016fc <__aeabi_dadd+0x2b8>
 80016f2:	230f      	movs	r3, #15
 80016f4:	403b      	ands	r3, r7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d000      	beq.n	80016fc <__aeabi_dadd+0x2b8>
 80016fa:	e728      	b.n	800154e <__aeabi_dadd+0x10a>
 80016fc:	08f8      	lsrs	r0, r7, #3
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <__aeabi_dadd+0x38c>)
 8001700:	0777      	lsls	r7, r6, #29
 8001702:	4307      	orrs	r7, r0
 8001704:	08f0      	lsrs	r0, r6, #3
 8001706:	429c      	cmp	r4, r3
 8001708:	d000      	beq.n	800170c <__aeabi_dadd+0x2c8>
 800170a:	e24a      	b.n	8001ba2 <__aeabi_dadd+0x75e>
 800170c:	003b      	movs	r3, r7
 800170e:	4303      	orrs	r3, r0
 8001710:	d059      	beq.n	80017c6 <__aeabi_dadd+0x382>
 8001712:	2680      	movs	r6, #128	@ 0x80
 8001714:	0336      	lsls	r6, r6, #12
 8001716:	4306      	orrs	r6, r0
 8001718:	0336      	lsls	r6, r6, #12
 800171a:	4c2d      	ldr	r4, [pc, #180]	@ (80017d0 <__aeabi_dadd+0x38c>)
 800171c:	0b36      	lsrs	r6, r6, #12
 800171e:	e7da      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001720:	2900      	cmp	r1, #0
 8001722:	d061      	beq.n	80017e8 <__aeabi_dadd+0x3a4>
 8001724:	4641      	mov	r1, r8
 8001726:	1b09      	subs	r1, r1, r4
 8001728:	2c00      	cmp	r4, #0
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x2ea>
 800172c:	e0b9      	b.n	80018a2 <__aeabi_dadd+0x45e>
 800172e:	4c28      	ldr	r4, [pc, #160]	@ (80017d0 <__aeabi_dadd+0x38c>)
 8001730:	45a0      	cmp	r8, r4
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x2f2>
 8001734:	e1a5      	b.n	8001a82 <__aeabi_dadd+0x63e>
 8001736:	2701      	movs	r7, #1
 8001738:	2938      	cmp	r1, #56	@ 0x38
 800173a:	dc13      	bgt.n	8001764 <__aeabi_dadd+0x320>
 800173c:	2480      	movs	r4, #128	@ 0x80
 800173e:	0424      	lsls	r4, r4, #16
 8001740:	4326      	orrs	r6, r4
 8001742:	291f      	cmp	r1, #31
 8001744:	dd00      	ble.n	8001748 <__aeabi_dadd+0x304>
 8001746:	e1c8      	b.n	8001ada <__aeabi_dadd+0x696>
 8001748:	2420      	movs	r4, #32
 800174a:	0037      	movs	r7, r6
 800174c:	4648      	mov	r0, r9
 800174e:	1a64      	subs	r4, r4, r1
 8001750:	40a7      	lsls	r7, r4
 8001752:	40c8      	lsrs	r0, r1
 8001754:	4307      	orrs	r7, r0
 8001756:	4648      	mov	r0, r9
 8001758:	40a0      	lsls	r0, r4
 800175a:	40ce      	lsrs	r6, r1
 800175c:	1e44      	subs	r4, r0, #1
 800175e:	41a0      	sbcs	r0, r4
 8001760:	199b      	adds	r3, r3, r6
 8001762:	4307      	orrs	r7, r0
 8001764:	18bf      	adds	r7, r7, r2
 8001766:	4297      	cmp	r7, r2
 8001768:	4192      	sbcs	r2, r2
 800176a:	4252      	negs	r2, r2
 800176c:	4644      	mov	r4, r8
 800176e:	18d6      	adds	r6, r2, r3
 8001770:	e763      	b.n	800163a <__aeabi_dadd+0x1f6>
 8001772:	0038      	movs	r0, r7
 8001774:	f000 faf6 	bl	8001d64 <__clzsi2>
 8001778:	0003      	movs	r3, r0
 800177a:	3318      	adds	r3, #24
 800177c:	2b1f      	cmp	r3, #31
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dadd+0x33e>
 8001780:	e6bf      	b.n	8001502 <__aeabi_dadd+0xbe>
 8001782:	003a      	movs	r2, r7
 8001784:	3808      	subs	r0, #8
 8001786:	4082      	lsls	r2, r0
 8001788:	429c      	cmp	r4, r3
 800178a:	dd00      	ble.n	800178e <__aeabi_dadd+0x34a>
 800178c:	e083      	b.n	8001896 <__aeabi_dadd+0x452>
 800178e:	1b1b      	subs	r3, r3, r4
 8001790:	1c58      	adds	r0, r3, #1
 8001792:	281f      	cmp	r0, #31
 8001794:	dc00      	bgt.n	8001798 <__aeabi_dadd+0x354>
 8001796:	e1b4      	b.n	8001b02 <__aeabi_dadd+0x6be>
 8001798:	0017      	movs	r7, r2
 800179a:	3b1f      	subs	r3, #31
 800179c:	40df      	lsrs	r7, r3
 800179e:	2820      	cmp	r0, #32
 80017a0:	d005      	beq.n	80017ae <__aeabi_dadd+0x36a>
 80017a2:	2340      	movs	r3, #64	@ 0x40
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	409a      	lsls	r2, r3
 80017a8:	1e53      	subs	r3, r2, #1
 80017aa:	419a      	sbcs	r2, r3
 80017ac:	4317      	orrs	r7, r2
 80017ae:	2400      	movs	r4, #0
 80017b0:	2f00      	cmp	r7, #0
 80017b2:	d00a      	beq.n	80017ca <__aeabi_dadd+0x386>
 80017b4:	077b      	lsls	r3, r7, #29
 80017b6:	d000      	beq.n	80017ba <__aeabi_dadd+0x376>
 80017b8:	e6c4      	b.n	8001544 <__aeabi_dadd+0x100>
 80017ba:	0026      	movs	r6, r4
 80017bc:	e79e      	b.n	80016fc <__aeabi_dadd+0x2b8>
 80017be:	464b      	mov	r3, r9
 80017c0:	000c      	movs	r4, r1
 80017c2:	08d8      	lsrs	r0, r3, #3
 80017c4:	e79b      	b.n	80016fe <__aeabi_dadd+0x2ba>
 80017c6:	2700      	movs	r7, #0
 80017c8:	4c01      	ldr	r4, [pc, #4]	@ (80017d0 <__aeabi_dadd+0x38c>)
 80017ca:	2600      	movs	r6, #0
 80017cc:	e783      	b.n	80016d6 <__aeabi_dadd+0x292>
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	000007ff 	.word	0x000007ff
 80017d4:	ff7fffff 	.word	0xff7fffff
 80017d8:	000007fe 	.word	0x000007fe
 80017dc:	464b      	mov	r3, r9
 80017de:	0777      	lsls	r7, r6, #29
 80017e0:	08d8      	lsrs	r0, r3, #3
 80017e2:	4307      	orrs	r7, r0
 80017e4:	08f0      	lsrs	r0, r6, #3
 80017e6:	e791      	b.n	800170c <__aeabi_dadd+0x2c8>
 80017e8:	4fcd      	ldr	r7, [pc, #820]	@ (8001b20 <__aeabi_dadd+0x6dc>)
 80017ea:	1c61      	adds	r1, r4, #1
 80017ec:	4239      	tst	r1, r7
 80017ee:	d16b      	bne.n	80018c8 <__aeabi_dadd+0x484>
 80017f0:	0031      	movs	r1, r6
 80017f2:	4648      	mov	r0, r9
 80017f4:	4301      	orrs	r1, r0
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_dadd+0x3b8>
 80017fa:	e14b      	b.n	8001a94 <__aeabi_dadd+0x650>
 80017fc:	001f      	movs	r7, r3
 80017fe:	4317      	orrs	r7, r2
 8001800:	2900      	cmp	r1, #0
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x3c2>
 8001804:	e181      	b.n	8001b0a <__aeabi_dadd+0x6c6>
 8001806:	2f00      	cmp	r7, #0
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x3c8>
 800180a:	e74c      	b.n	80016a6 <__aeabi_dadd+0x262>
 800180c:	444a      	add	r2, r9
 800180e:	454a      	cmp	r2, r9
 8001810:	4180      	sbcs	r0, r0
 8001812:	18f6      	adds	r6, r6, r3
 8001814:	4240      	negs	r0, r0
 8001816:	1836      	adds	r6, r6, r0
 8001818:	0233      	lsls	r3, r6, #8
 800181a:	d500      	bpl.n	800181e <__aeabi_dadd+0x3da>
 800181c:	e1b0      	b.n	8001b80 <__aeabi_dadd+0x73c>
 800181e:	0017      	movs	r7, r2
 8001820:	4691      	mov	r9, r2
 8001822:	4337      	orrs	r7, r6
 8001824:	d000      	beq.n	8001828 <__aeabi_dadd+0x3e4>
 8001826:	e73e      	b.n	80016a6 <__aeabi_dadd+0x262>
 8001828:	2600      	movs	r6, #0
 800182a:	e754      	b.n	80016d6 <__aeabi_dadd+0x292>
 800182c:	4649      	mov	r1, r9
 800182e:	1a89      	subs	r1, r1, r2
 8001830:	4688      	mov	r8, r1
 8001832:	45c1      	cmp	r9, r8
 8001834:	41bf      	sbcs	r7, r7
 8001836:	1af1      	subs	r1, r6, r3
 8001838:	427f      	negs	r7, r7
 800183a:	1bc9      	subs	r1, r1, r7
 800183c:	020f      	lsls	r7, r1, #8
 800183e:	d461      	bmi.n	8001904 <__aeabi_dadd+0x4c0>
 8001840:	4647      	mov	r7, r8
 8001842:	430f      	orrs	r7, r1
 8001844:	d100      	bne.n	8001848 <__aeabi_dadd+0x404>
 8001846:	e0bd      	b.n	80019c4 <__aeabi_dadd+0x580>
 8001848:	000e      	movs	r6, r1
 800184a:	4647      	mov	r7, r8
 800184c:	e651      	b.n	80014f2 <__aeabi_dadd+0xae>
 800184e:	4cb5      	ldr	r4, [pc, #724]	@ (8001b24 <__aeabi_dadd+0x6e0>)
 8001850:	45a0      	cmp	r8, r4
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x412>
 8001854:	e100      	b.n	8001a58 <__aeabi_dadd+0x614>
 8001856:	2701      	movs	r7, #1
 8001858:	2938      	cmp	r1, #56	@ 0x38
 800185a:	dd00      	ble.n	800185e <__aeabi_dadd+0x41a>
 800185c:	e6b8      	b.n	80015d0 <__aeabi_dadd+0x18c>
 800185e:	2480      	movs	r4, #128	@ 0x80
 8001860:	0424      	lsls	r4, r4, #16
 8001862:	4326      	orrs	r6, r4
 8001864:	e6a3      	b.n	80015ae <__aeabi_dadd+0x16a>
 8001866:	4eb0      	ldr	r6, [pc, #704]	@ (8001b28 <__aeabi_dadd+0x6e4>)
 8001868:	1ae4      	subs	r4, r4, r3
 800186a:	4016      	ands	r6, r2
 800186c:	077b      	lsls	r3, r7, #29
 800186e:	d000      	beq.n	8001872 <__aeabi_dadd+0x42e>
 8001870:	e73f      	b.n	80016f2 <__aeabi_dadd+0x2ae>
 8001872:	e743      	b.n	80016fc <__aeabi_dadd+0x2b8>
 8001874:	000f      	movs	r7, r1
 8001876:	0018      	movs	r0, r3
 8001878:	3f20      	subs	r7, #32
 800187a:	40f8      	lsrs	r0, r7
 800187c:	4684      	mov	ip, r0
 800187e:	2920      	cmp	r1, #32
 8001880:	d003      	beq.n	800188a <__aeabi_dadd+0x446>
 8001882:	2740      	movs	r7, #64	@ 0x40
 8001884:	1a79      	subs	r1, r7, r1
 8001886:	408b      	lsls	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	1e53      	subs	r3, r2, #1
 800188c:	419a      	sbcs	r2, r3
 800188e:	4663      	mov	r3, ip
 8001890:	0017      	movs	r7, r2
 8001892:	431f      	orrs	r7, r3
 8001894:	e622      	b.n	80014dc <__aeabi_dadd+0x98>
 8001896:	48a4      	ldr	r0, [pc, #656]	@ (8001b28 <__aeabi_dadd+0x6e4>)
 8001898:	1ae1      	subs	r1, r4, r3
 800189a:	4010      	ands	r0, r2
 800189c:	0747      	lsls	r7, r0, #29
 800189e:	08c0      	lsrs	r0, r0, #3
 80018a0:	e707      	b.n	80016b2 <__aeabi_dadd+0x26e>
 80018a2:	0034      	movs	r4, r6
 80018a4:	4648      	mov	r0, r9
 80018a6:	4304      	orrs	r4, r0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x468>
 80018aa:	e0fa      	b.n	8001aa2 <__aeabi_dadd+0x65e>
 80018ac:	1e4c      	subs	r4, r1, #1
 80018ae:	2901      	cmp	r1, #1
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dadd+0x470>
 80018b2:	e0d7      	b.n	8001a64 <__aeabi_dadd+0x620>
 80018b4:	4f9b      	ldr	r7, [pc, #620]	@ (8001b24 <__aeabi_dadd+0x6e0>)
 80018b6:	42b9      	cmp	r1, r7
 80018b8:	d100      	bne.n	80018bc <__aeabi_dadd+0x478>
 80018ba:	e0e2      	b.n	8001a82 <__aeabi_dadd+0x63e>
 80018bc:	2701      	movs	r7, #1
 80018be:	2c38      	cmp	r4, #56	@ 0x38
 80018c0:	dd00      	ble.n	80018c4 <__aeabi_dadd+0x480>
 80018c2:	e74f      	b.n	8001764 <__aeabi_dadd+0x320>
 80018c4:	0021      	movs	r1, r4
 80018c6:	e73c      	b.n	8001742 <__aeabi_dadd+0x2fe>
 80018c8:	4c96      	ldr	r4, [pc, #600]	@ (8001b24 <__aeabi_dadd+0x6e0>)
 80018ca:	42a1      	cmp	r1, r4
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dadd+0x48c>
 80018ce:	e0dd      	b.n	8001a8c <__aeabi_dadd+0x648>
 80018d0:	444a      	add	r2, r9
 80018d2:	454a      	cmp	r2, r9
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	18f3      	adds	r3, r6, r3
 80018d8:	4240      	negs	r0, r0
 80018da:	1818      	adds	r0, r3, r0
 80018dc:	07c7      	lsls	r7, r0, #31
 80018de:	0852      	lsrs	r2, r2, #1
 80018e0:	4317      	orrs	r7, r2
 80018e2:	0846      	lsrs	r6, r0, #1
 80018e4:	0752      	lsls	r2, r2, #29
 80018e6:	d005      	beq.n	80018f4 <__aeabi_dadd+0x4b0>
 80018e8:	220f      	movs	r2, #15
 80018ea:	000c      	movs	r4, r1
 80018ec:	403a      	ands	r2, r7
 80018ee:	2a04      	cmp	r2, #4
 80018f0:	d000      	beq.n	80018f4 <__aeabi_dadd+0x4b0>
 80018f2:	e62c      	b.n	800154e <__aeabi_dadd+0x10a>
 80018f4:	0776      	lsls	r6, r6, #29
 80018f6:	08ff      	lsrs	r7, r7, #3
 80018f8:	4337      	orrs	r7, r6
 80018fa:	0900      	lsrs	r0, r0, #4
 80018fc:	e6d9      	b.n	80016b2 <__aeabi_dadd+0x26e>
 80018fe:	2700      	movs	r7, #0
 8001900:	2600      	movs	r6, #0
 8001902:	e6e8      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001904:	4649      	mov	r1, r9
 8001906:	1a57      	subs	r7, r2, r1
 8001908:	42ba      	cmp	r2, r7
 800190a:	4192      	sbcs	r2, r2
 800190c:	1b9e      	subs	r6, r3, r6
 800190e:	4252      	negs	r2, r2
 8001910:	4665      	mov	r5, ip
 8001912:	1ab6      	subs	r6, r6, r2
 8001914:	e5ed      	b.n	80014f2 <__aeabi_dadd+0xae>
 8001916:	2900      	cmp	r1, #0
 8001918:	d000      	beq.n	800191c <__aeabi_dadd+0x4d8>
 800191a:	e0c6      	b.n	8001aaa <__aeabi_dadd+0x666>
 800191c:	2f00      	cmp	r7, #0
 800191e:	d167      	bne.n	80019f0 <__aeabi_dadd+0x5ac>
 8001920:	2680      	movs	r6, #128	@ 0x80
 8001922:	2500      	movs	r5, #0
 8001924:	4c7f      	ldr	r4, [pc, #508]	@ (8001b24 <__aeabi_dadd+0x6e0>)
 8001926:	0336      	lsls	r6, r6, #12
 8001928:	e6d5      	b.n	80016d6 <__aeabi_dadd+0x292>
 800192a:	4665      	mov	r5, ip
 800192c:	000c      	movs	r4, r1
 800192e:	001e      	movs	r6, r3
 8001930:	08d0      	lsrs	r0, r2, #3
 8001932:	e6e4      	b.n	80016fe <__aeabi_dadd+0x2ba>
 8001934:	444a      	add	r2, r9
 8001936:	454a      	cmp	r2, r9
 8001938:	4180      	sbcs	r0, r0
 800193a:	18f3      	adds	r3, r6, r3
 800193c:	4240      	negs	r0, r0
 800193e:	1818      	adds	r0, r3, r0
 8001940:	0011      	movs	r1, r2
 8001942:	0203      	lsls	r3, r0, #8
 8001944:	d400      	bmi.n	8001948 <__aeabi_dadd+0x504>
 8001946:	e096      	b.n	8001a76 <__aeabi_dadd+0x632>
 8001948:	4b77      	ldr	r3, [pc, #476]	@ (8001b28 <__aeabi_dadd+0x6e4>)
 800194a:	0849      	lsrs	r1, r1, #1
 800194c:	4018      	ands	r0, r3
 800194e:	07c3      	lsls	r3, r0, #31
 8001950:	430b      	orrs	r3, r1
 8001952:	0844      	lsrs	r4, r0, #1
 8001954:	0749      	lsls	r1, r1, #29
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x516>
 8001958:	e129      	b.n	8001bae <__aeabi_dadd+0x76a>
 800195a:	220f      	movs	r2, #15
 800195c:	401a      	ands	r2, r3
 800195e:	2a04      	cmp	r2, #4
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x520>
 8001962:	e0ea      	b.n	8001b3a <__aeabi_dadd+0x6f6>
 8001964:	1d1f      	adds	r7, r3, #4
 8001966:	429f      	cmp	r7, r3
 8001968:	41b6      	sbcs	r6, r6
 800196a:	4276      	negs	r6, r6
 800196c:	1936      	adds	r6, r6, r4
 800196e:	2402      	movs	r4, #2
 8001970:	e6c4      	b.n	80016fc <__aeabi_dadd+0x2b8>
 8001972:	4649      	mov	r1, r9
 8001974:	1a8f      	subs	r7, r1, r2
 8001976:	45b9      	cmp	r9, r7
 8001978:	4180      	sbcs	r0, r0
 800197a:	1af6      	subs	r6, r6, r3
 800197c:	4240      	negs	r0, r0
 800197e:	1a36      	subs	r6, r6, r0
 8001980:	0233      	lsls	r3, r6, #8
 8001982:	d406      	bmi.n	8001992 <__aeabi_dadd+0x54e>
 8001984:	0773      	lsls	r3, r6, #29
 8001986:	08ff      	lsrs	r7, r7, #3
 8001988:	2101      	movs	r1, #1
 800198a:	431f      	orrs	r7, r3
 800198c:	08f0      	lsrs	r0, r6, #3
 800198e:	e690      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001990:	4665      	mov	r5, ip
 8001992:	2401      	movs	r4, #1
 8001994:	e5ab      	b.n	80014ee <__aeabi_dadd+0xaa>
 8001996:	464b      	mov	r3, r9
 8001998:	0777      	lsls	r7, r6, #29
 800199a:	08d8      	lsrs	r0, r3, #3
 800199c:	4307      	orrs	r7, r0
 800199e:	08f0      	lsrs	r0, r6, #3
 80019a0:	e6b4      	b.n	800170c <__aeabi_dadd+0x2c8>
 80019a2:	000f      	movs	r7, r1
 80019a4:	0018      	movs	r0, r3
 80019a6:	3f20      	subs	r7, #32
 80019a8:	40f8      	lsrs	r0, r7
 80019aa:	4684      	mov	ip, r0
 80019ac:	2920      	cmp	r1, #32
 80019ae:	d003      	beq.n	80019b8 <__aeabi_dadd+0x574>
 80019b0:	2740      	movs	r7, #64	@ 0x40
 80019b2:	1a79      	subs	r1, r7, r1
 80019b4:	408b      	lsls	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	1e53      	subs	r3, r2, #1
 80019ba:	419a      	sbcs	r2, r3
 80019bc:	4663      	mov	r3, ip
 80019be:	0017      	movs	r7, r2
 80019c0:	431f      	orrs	r7, r3
 80019c2:	e635      	b.n	8001630 <__aeabi_dadd+0x1ec>
 80019c4:	2500      	movs	r5, #0
 80019c6:	2400      	movs	r4, #0
 80019c8:	2600      	movs	r6, #0
 80019ca:	e684      	b.n	80016d6 <__aeabi_dadd+0x292>
 80019cc:	000c      	movs	r4, r1
 80019ce:	0035      	movs	r5, r6
 80019d0:	3c20      	subs	r4, #32
 80019d2:	40e5      	lsrs	r5, r4
 80019d4:	2920      	cmp	r1, #32
 80019d6:	d005      	beq.n	80019e4 <__aeabi_dadd+0x5a0>
 80019d8:	2440      	movs	r4, #64	@ 0x40
 80019da:	1a61      	subs	r1, r4, r1
 80019dc:	408e      	lsls	r6, r1
 80019de:	4649      	mov	r1, r9
 80019e0:	4331      	orrs	r1, r6
 80019e2:	4689      	mov	r9, r1
 80019e4:	4648      	mov	r0, r9
 80019e6:	1e41      	subs	r1, r0, #1
 80019e8:	4188      	sbcs	r0, r1
 80019ea:	0007      	movs	r7, r0
 80019ec:	432f      	orrs	r7, r5
 80019ee:	e5ef      	b.n	80015d0 <__aeabi_dadd+0x18c>
 80019f0:	08d2      	lsrs	r2, r2, #3
 80019f2:	075f      	lsls	r7, r3, #29
 80019f4:	4665      	mov	r5, ip
 80019f6:	4317      	orrs	r7, r2
 80019f8:	08d8      	lsrs	r0, r3, #3
 80019fa:	e687      	b.n	800170c <__aeabi_dadd+0x2c8>
 80019fc:	1a17      	subs	r7, r2, r0
 80019fe:	42ba      	cmp	r2, r7
 8001a00:	4192      	sbcs	r2, r2
 8001a02:	1b9e      	subs	r6, r3, r6
 8001a04:	4252      	negs	r2, r2
 8001a06:	1ab6      	subs	r6, r6, r2
 8001a08:	0233      	lsls	r3, r6, #8
 8001a0a:	d4c1      	bmi.n	8001990 <__aeabi_dadd+0x54c>
 8001a0c:	0773      	lsls	r3, r6, #29
 8001a0e:	08ff      	lsrs	r7, r7, #3
 8001a10:	4665      	mov	r5, ip
 8001a12:	2101      	movs	r1, #1
 8001a14:	431f      	orrs	r7, r3
 8001a16:	08f0      	lsrs	r0, r6, #3
 8001a18:	e64b      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001a1a:	2f00      	cmp	r7, #0
 8001a1c:	d07b      	beq.n	8001b16 <__aeabi_dadd+0x6d2>
 8001a1e:	4665      	mov	r5, ip
 8001a20:	001e      	movs	r6, r3
 8001a22:	4691      	mov	r9, r2
 8001a24:	e63f      	b.n	80016a6 <__aeabi_dadd+0x262>
 8001a26:	1a81      	subs	r1, r0, r2
 8001a28:	4688      	mov	r8, r1
 8001a2a:	45c1      	cmp	r9, r8
 8001a2c:	41a4      	sbcs	r4, r4
 8001a2e:	1af1      	subs	r1, r6, r3
 8001a30:	4264      	negs	r4, r4
 8001a32:	1b09      	subs	r1, r1, r4
 8001a34:	2480      	movs	r4, #128	@ 0x80
 8001a36:	0424      	lsls	r4, r4, #16
 8001a38:	4221      	tst	r1, r4
 8001a3a:	d077      	beq.n	8001b2c <__aeabi_dadd+0x6e8>
 8001a3c:	1a10      	subs	r0, r2, r0
 8001a3e:	4282      	cmp	r2, r0
 8001a40:	4192      	sbcs	r2, r2
 8001a42:	0007      	movs	r7, r0
 8001a44:	1b9e      	subs	r6, r3, r6
 8001a46:	4252      	negs	r2, r2
 8001a48:	1ab6      	subs	r6, r6, r2
 8001a4a:	4337      	orrs	r7, r6
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dadd+0x60c>
 8001a4e:	e0a0      	b.n	8001b92 <__aeabi_dadd+0x74e>
 8001a50:	4665      	mov	r5, ip
 8001a52:	2400      	movs	r4, #0
 8001a54:	2600      	movs	r6, #0
 8001a56:	e63e      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001a58:	075f      	lsls	r7, r3, #29
 8001a5a:	08d2      	lsrs	r2, r2, #3
 8001a5c:	4665      	mov	r5, ip
 8001a5e:	4317      	orrs	r7, r2
 8001a60:	08d8      	lsrs	r0, r3, #3
 8001a62:	e653      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001a64:	1881      	adds	r1, r0, r2
 8001a66:	4291      	cmp	r1, r2
 8001a68:	4192      	sbcs	r2, r2
 8001a6a:	18f0      	adds	r0, r6, r3
 8001a6c:	4252      	negs	r2, r2
 8001a6e:	1880      	adds	r0, r0, r2
 8001a70:	0203      	lsls	r3, r0, #8
 8001a72:	d500      	bpl.n	8001a76 <__aeabi_dadd+0x632>
 8001a74:	e768      	b.n	8001948 <__aeabi_dadd+0x504>
 8001a76:	0747      	lsls	r7, r0, #29
 8001a78:	08c9      	lsrs	r1, r1, #3
 8001a7a:	430f      	orrs	r7, r1
 8001a7c:	08c0      	lsrs	r0, r0, #3
 8001a7e:	2101      	movs	r1, #1
 8001a80:	e617      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	075f      	lsls	r7, r3, #29
 8001a86:	4317      	orrs	r7, r2
 8001a88:	08d8      	lsrs	r0, r3, #3
 8001a8a:	e63f      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001a8c:	000c      	movs	r4, r1
 8001a8e:	2600      	movs	r6, #0
 8001a90:	2700      	movs	r7, #0
 8001a92:	e620      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001a94:	2900      	cmp	r1, #0
 8001a96:	d156      	bne.n	8001b46 <__aeabi_dadd+0x702>
 8001a98:	075f      	lsls	r7, r3, #29
 8001a9a:	08d2      	lsrs	r2, r2, #3
 8001a9c:	4317      	orrs	r7, r2
 8001a9e:	08d8      	lsrs	r0, r3, #3
 8001aa0:	e634      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001aa2:	000c      	movs	r4, r1
 8001aa4:	001e      	movs	r6, r3
 8001aa6:	08d0      	lsrs	r0, r2, #3
 8001aa8:	e629      	b.n	80016fe <__aeabi_dadd+0x2ba>
 8001aaa:	08c1      	lsrs	r1, r0, #3
 8001aac:	0770      	lsls	r0, r6, #29
 8001aae:	4301      	orrs	r1, r0
 8001ab0:	08f0      	lsrs	r0, r6, #3
 8001ab2:	2f00      	cmp	r7, #0
 8001ab4:	d062      	beq.n	8001b7c <__aeabi_dadd+0x738>
 8001ab6:	2480      	movs	r4, #128	@ 0x80
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	4220      	tst	r0, r4
 8001abc:	d007      	beq.n	8001ace <__aeabi_dadd+0x68a>
 8001abe:	08de      	lsrs	r6, r3, #3
 8001ac0:	4226      	tst	r6, r4
 8001ac2:	d104      	bne.n	8001ace <__aeabi_dadd+0x68a>
 8001ac4:	4665      	mov	r5, ip
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	08d1      	lsrs	r1, r2, #3
 8001aca:	075b      	lsls	r3, r3, #29
 8001acc:	4319      	orrs	r1, r3
 8001ace:	0f4f      	lsrs	r7, r1, #29
 8001ad0:	00c9      	lsls	r1, r1, #3
 8001ad2:	08c9      	lsrs	r1, r1, #3
 8001ad4:	077f      	lsls	r7, r7, #29
 8001ad6:	430f      	orrs	r7, r1
 8001ad8:	e618      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001ada:	000c      	movs	r4, r1
 8001adc:	0030      	movs	r0, r6
 8001ade:	3c20      	subs	r4, #32
 8001ae0:	40e0      	lsrs	r0, r4
 8001ae2:	4684      	mov	ip, r0
 8001ae4:	2920      	cmp	r1, #32
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dadd+0x6b0>
 8001ae8:	2440      	movs	r4, #64	@ 0x40
 8001aea:	1a61      	subs	r1, r4, r1
 8001aec:	408e      	lsls	r6, r1
 8001aee:	4649      	mov	r1, r9
 8001af0:	4331      	orrs	r1, r6
 8001af2:	4689      	mov	r9, r1
 8001af4:	4648      	mov	r0, r9
 8001af6:	1e41      	subs	r1, r0, #1
 8001af8:	4188      	sbcs	r0, r1
 8001afa:	4661      	mov	r1, ip
 8001afc:	0007      	movs	r7, r0
 8001afe:	430f      	orrs	r7, r1
 8001b00:	e630      	b.n	8001764 <__aeabi_dadd+0x320>
 8001b02:	2120      	movs	r1, #32
 8001b04:	2700      	movs	r7, #0
 8001b06:	1a09      	subs	r1, r1, r0
 8001b08:	e50e      	b.n	8001528 <__aeabi_dadd+0xe4>
 8001b0a:	001e      	movs	r6, r3
 8001b0c:	2f00      	cmp	r7, #0
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dadd+0x6ce>
 8001b10:	e522      	b.n	8001558 <__aeabi_dadd+0x114>
 8001b12:	2400      	movs	r4, #0
 8001b14:	e758      	b.n	80019c8 <__aeabi_dadd+0x584>
 8001b16:	2500      	movs	r5, #0
 8001b18:	2400      	movs	r4, #0
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	e5db      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	000007fe 	.word	0x000007fe
 8001b24:	000007ff 	.word	0x000007ff
 8001b28:	ff7fffff 	.word	0xff7fffff
 8001b2c:	4647      	mov	r7, r8
 8001b2e:	430f      	orrs	r7, r1
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dadd+0x6f0>
 8001b32:	e747      	b.n	80019c4 <__aeabi_dadd+0x580>
 8001b34:	000e      	movs	r6, r1
 8001b36:	46c1      	mov	r9, r8
 8001b38:	e5b5      	b.n	80016a6 <__aeabi_dadd+0x262>
 8001b3a:	08df      	lsrs	r7, r3, #3
 8001b3c:	0764      	lsls	r4, r4, #29
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4327      	orrs	r7, r4
 8001b42:	0900      	lsrs	r0, r0, #4
 8001b44:	e5b5      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001b46:	0019      	movs	r1, r3
 8001b48:	08c0      	lsrs	r0, r0, #3
 8001b4a:	0777      	lsls	r7, r6, #29
 8001b4c:	4307      	orrs	r7, r0
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	08f0      	lsrs	r0, r6, #3
 8001b52:	2900      	cmp	r1, #0
 8001b54:	d100      	bne.n	8001b58 <__aeabi_dadd+0x714>
 8001b56:	e5d9      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	0309      	lsls	r1, r1, #12
 8001b5c:	4208      	tst	r0, r1
 8001b5e:	d007      	beq.n	8001b70 <__aeabi_dadd+0x72c>
 8001b60:	08dc      	lsrs	r4, r3, #3
 8001b62:	420c      	tst	r4, r1
 8001b64:	d104      	bne.n	8001b70 <__aeabi_dadd+0x72c>
 8001b66:	08d2      	lsrs	r2, r2, #3
 8001b68:	075b      	lsls	r3, r3, #29
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	0017      	movs	r7, r2
 8001b6e:	0020      	movs	r0, r4
 8001b70:	0f7b      	lsrs	r3, r7, #29
 8001b72:	00ff      	lsls	r7, r7, #3
 8001b74:	08ff      	lsrs	r7, r7, #3
 8001b76:	075b      	lsls	r3, r3, #29
 8001b78:	431f      	orrs	r7, r3
 8001b7a:	e5c7      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001b7c:	000f      	movs	r7, r1
 8001b7e:	e5c5      	b.n	800170c <__aeabi_dadd+0x2c8>
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <__aeabi_dadd+0x788>)
 8001b82:	08d2      	lsrs	r2, r2, #3
 8001b84:	4033      	ands	r3, r6
 8001b86:	075f      	lsls	r7, r3, #29
 8001b88:	025b      	lsls	r3, r3, #9
 8001b8a:	2401      	movs	r4, #1
 8001b8c:	4317      	orrs	r7, r2
 8001b8e:	0b1e      	lsrs	r6, r3, #12
 8001b90:	e5a1      	b.n	80016d6 <__aeabi_dadd+0x292>
 8001b92:	4226      	tst	r6, r4
 8001b94:	d012      	beq.n	8001bbc <__aeabi_dadd+0x778>
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <__aeabi_dadd+0x788>)
 8001b98:	4665      	mov	r5, ip
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	2401      	movs	r4, #1
 8001b9e:	401e      	ands	r6, r3
 8001ba0:	e4e6      	b.n	8001570 <__aeabi_dadd+0x12c>
 8001ba2:	0021      	movs	r1, r4
 8001ba4:	e585      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001ba6:	0017      	movs	r7, r2
 8001ba8:	e5a8      	b.n	80016fc <__aeabi_dadd+0x2b8>
 8001baa:	003a      	movs	r2, r7
 8001bac:	e4d4      	b.n	8001558 <__aeabi_dadd+0x114>
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	0764      	lsls	r4, r4, #29
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	0027      	movs	r7, r4
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	0900      	lsrs	r0, r0, #4
 8001bba:	e57a      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001bbc:	08c0      	lsrs	r0, r0, #3
 8001bbe:	0777      	lsls	r7, r6, #29
 8001bc0:	4307      	orrs	r7, r0
 8001bc2:	4665      	mov	r5, ip
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	08f0      	lsrs	r0, r6, #3
 8001bc8:	e573      	b.n	80016b2 <__aeabi_dadd+0x26e>
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	ff7fffff 	.word	0xff7fffff

08001bd0 <__aeabi_f2d>:
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	0242      	lsls	r2, r0, #9
 8001bd4:	0043      	lsls	r3, r0, #1
 8001bd6:	0fc4      	lsrs	r4, r0, #31
 8001bd8:	20fe      	movs	r0, #254	@ 0xfe
 8001bda:	0e1b      	lsrs	r3, r3, #24
 8001bdc:	1c59      	adds	r1, r3, #1
 8001bde:	0a55      	lsrs	r5, r2, #9
 8001be0:	4208      	tst	r0, r1
 8001be2:	d00c      	beq.n	8001bfe <__aeabi_f2d+0x2e>
 8001be4:	21e0      	movs	r1, #224	@ 0xe0
 8001be6:	0089      	lsls	r1, r1, #2
 8001be8:	468c      	mov	ip, r1
 8001bea:	076d      	lsls	r5, r5, #29
 8001bec:	0b12      	lsrs	r2, r2, #12
 8001bee:	4463      	add	r3, ip
 8001bf0:	051b      	lsls	r3, r3, #20
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	07e4      	lsls	r4, r4, #31
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	0028      	movs	r0, r5
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d114      	bne.n	8001c2c <__aeabi_f2d+0x5c>
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	d01b      	beq.n	8001c3e <__aeabi_f2d+0x6e>
 8001c06:	0028      	movs	r0, r5
 8001c08:	f000 f8ac 	bl	8001d64 <__clzsi2>
 8001c0c:	280a      	cmp	r0, #10
 8001c0e:	dc1c      	bgt.n	8001c4a <__aeabi_f2d+0x7a>
 8001c10:	230b      	movs	r3, #11
 8001c12:	002a      	movs	r2, r5
 8001c14:	1a1b      	subs	r3, r3, r0
 8001c16:	40da      	lsrs	r2, r3
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3315      	adds	r3, #21
 8001c1c:	409d      	lsls	r5, r3
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <__aeabi_f2d+0x88>)
 8001c20:	0312      	lsls	r2, r2, #12
 8001c22:	1a1b      	subs	r3, r3, r0
 8001c24:	055b      	lsls	r3, r3, #21
 8001c26:	0b12      	lsrs	r2, r2, #12
 8001c28:	0d5b      	lsrs	r3, r3, #21
 8001c2a:	e7e1      	b.n	8001bf0 <__aeabi_f2d+0x20>
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	d009      	beq.n	8001c44 <__aeabi_f2d+0x74>
 8001c30:	0b13      	lsrs	r3, r2, #12
 8001c32:	2280      	movs	r2, #128	@ 0x80
 8001c34:	0312      	lsls	r2, r2, #12
 8001c36:	431a      	orrs	r2, r3
 8001c38:	076d      	lsls	r5, r5, #29
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <__aeabi_f2d+0x8c>)
 8001c3c:	e7d8      	b.n	8001bf0 <__aeabi_f2d+0x20>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2200      	movs	r2, #0
 8001c42:	e7d5      	b.n	8001bf0 <__aeabi_f2d+0x20>
 8001c44:	2200      	movs	r2, #0
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <__aeabi_f2d+0x8c>)
 8001c48:	e7d2      	b.n	8001bf0 <__aeabi_f2d+0x20>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	002a      	movs	r2, r5
 8001c4e:	3b0b      	subs	r3, #11
 8001c50:	409a      	lsls	r2, r3
 8001c52:	2500      	movs	r5, #0
 8001c54:	e7e3      	b.n	8001c1e <__aeabi_f2d+0x4e>
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	00000389 	.word	0x00000389
 8001c5c:	000007ff 	.word	0x000007ff

08001c60 <__aeabi_d2f>:
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	004b      	lsls	r3, r1, #1
 8001c64:	030f      	lsls	r7, r1, #12
 8001c66:	0d5b      	lsrs	r3, r3, #21
 8001c68:	4c3a      	ldr	r4, [pc, #232]	@ (8001d54 <__aeabi_d2f+0xf4>)
 8001c6a:	0f45      	lsrs	r5, r0, #29
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	0a7f      	lsrs	r7, r7, #9
 8001c70:	1c5e      	adds	r6, r3, #1
 8001c72:	432f      	orrs	r7, r5
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	9101      	str	r1, [sp, #4]
 8001c78:	0fca      	lsrs	r2, r1, #31
 8001c7a:	00c5      	lsls	r5, r0, #3
 8001c7c:	4226      	tst	r6, r4
 8001c7e:	d00b      	beq.n	8001c98 <__aeabi_d2f+0x38>
 8001c80:	4935      	ldr	r1, [pc, #212]	@ (8001d58 <__aeabi_d2f+0xf8>)
 8001c82:	185c      	adds	r4, r3, r1
 8001c84:	2cfe      	cmp	r4, #254	@ 0xfe
 8001c86:	dd13      	ble.n	8001cb0 <__aeabi_d2f+0x50>
 8001c88:	20ff      	movs	r0, #255	@ 0xff
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	05c0      	lsls	r0, r0, #23
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	07d2      	lsls	r2, r2, #31
 8001c92:	4310      	orrs	r0, r2
 8001c94:	b003      	add	sp, #12
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	433d      	orrs	r5, r7
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <__aeabi_d2f+0x42>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e7f4      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	d0f0      	beq.n	8001c88 <__aeabi_d2f+0x28>
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	03db      	lsls	r3, r3, #15
 8001caa:	20ff      	movs	r0, #255	@ 0xff
 8001cac:	433b      	orrs	r3, r7
 8001cae:	e7ed      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001cb0:	2c00      	cmp	r4, #0
 8001cb2:	dd0c      	ble.n	8001cce <__aeabi_d2f+0x6e>
 8001cb4:	9b00      	ldr	r3, [sp, #0]
 8001cb6:	00ff      	lsls	r7, r7, #3
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	4183      	sbcs	r3, r0
 8001cbe:	0f69      	lsrs	r1, r5, #29
 8001cc0:	433b      	orrs	r3, r7
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	0759      	lsls	r1, r3, #29
 8001cc6:	d127      	bne.n	8001d18 <__aeabi_d2f+0xb8>
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	b2e0      	uxtb	r0, r4
 8001ccc:	e7de      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001cce:	0021      	movs	r1, r4
 8001cd0:	3117      	adds	r1, #23
 8001cd2:	db31      	blt.n	8001d38 <__aeabi_d2f+0xd8>
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	201e      	movs	r0, #30
 8001cd8:	0409      	lsls	r1, r1, #16
 8001cda:	4339      	orrs	r1, r7
 8001cdc:	1b00      	subs	r0, r0, r4
 8001cde:	281f      	cmp	r0, #31
 8001ce0:	dd2d      	ble.n	8001d3e <__aeabi_d2f+0xde>
 8001ce2:	2602      	movs	r6, #2
 8001ce4:	4276      	negs	r6, r6
 8001ce6:	1b34      	subs	r4, r6, r4
 8001ce8:	000e      	movs	r6, r1
 8001cea:	40e6      	lsrs	r6, r4
 8001cec:	0034      	movs	r4, r6
 8001cee:	2820      	cmp	r0, #32
 8001cf0:	d004      	beq.n	8001cfc <__aeabi_d2f+0x9c>
 8001cf2:	481a      	ldr	r0, [pc, #104]	@ (8001d5c <__aeabi_d2f+0xfc>)
 8001cf4:	4684      	mov	ip, r0
 8001cf6:	4463      	add	r3, ip
 8001cf8:	4099      	lsls	r1, r3
 8001cfa:	430d      	orrs	r5, r1
 8001cfc:	002b      	movs	r3, r5
 8001cfe:	1e59      	subs	r1, r3, #1
 8001d00:	418b      	sbcs	r3, r1
 8001d02:	4323      	orrs	r3, r4
 8001d04:	0759      	lsls	r1, r3, #29
 8001d06:	d003      	beq.n	8001d10 <__aeabi_d2f+0xb0>
 8001d08:	210f      	movs	r1, #15
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	2904      	cmp	r1, #4
 8001d0e:	d10b      	bne.n	8001d28 <__aeabi_d2f+0xc8>
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	2000      	movs	r0, #0
 8001d14:	0a5b      	lsrs	r3, r3, #9
 8001d16:	e7b9      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001d18:	210f      	movs	r1, #15
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	2904      	cmp	r1, #4
 8001d1e:	d104      	bne.n	8001d2a <__aeabi_d2f+0xca>
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	b2e0      	uxtb	r0, r4
 8001d26:	e7b1      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001d28:	2400      	movs	r4, #0
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	0159      	lsls	r1, r3, #5
 8001d2e:	d5f7      	bpl.n	8001d20 <__aeabi_d2f+0xc0>
 8001d30:	3401      	adds	r4, #1
 8001d32:	2300      	movs	r3, #0
 8001d34:	b2e0      	uxtb	r0, r4
 8001d36:	e7a9      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e7a6      	b.n	8001c8c <__aeabi_d2f+0x2c>
 8001d3e:	4c08      	ldr	r4, [pc, #32]	@ (8001d60 <__aeabi_d2f+0x100>)
 8001d40:	191c      	adds	r4, r3, r4
 8001d42:	002b      	movs	r3, r5
 8001d44:	40a5      	lsls	r5, r4
 8001d46:	40c3      	lsrs	r3, r0
 8001d48:	40a1      	lsls	r1, r4
 8001d4a:	1e68      	subs	r0, r5, #1
 8001d4c:	4185      	sbcs	r5, r0
 8001d4e:	4329      	orrs	r1, r5
 8001d50:	430b      	orrs	r3, r1
 8001d52:	e7d7      	b.n	8001d04 <__aeabi_d2f+0xa4>
 8001d54:	000007fe 	.word	0x000007fe
 8001d58:	fffffc80 	.word	0xfffffc80
 8001d5c:	fffffca2 	.word	0xfffffca2
 8001d60:	fffffc82 	.word	0xfffffc82

08001d64 <__clzsi2>:
 8001d64:	211c      	movs	r1, #28
 8001d66:	2301      	movs	r3, #1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	4298      	cmp	r0, r3
 8001d6c:	d301      	bcc.n	8001d72 <__clzsi2+0xe>
 8001d6e:	0c00      	lsrs	r0, r0, #16
 8001d70:	3910      	subs	r1, #16
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d301      	bcc.n	8001d7c <__clzsi2+0x18>
 8001d78:	0a00      	lsrs	r0, r0, #8
 8001d7a:	3908      	subs	r1, #8
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d301      	bcc.n	8001d86 <__clzsi2+0x22>
 8001d82:	0900      	lsrs	r0, r0, #4
 8001d84:	3904      	subs	r1, #4
 8001d86:	a202      	add	r2, pc, #8	@ (adr r2, 8001d90 <__clzsi2+0x2c>)
 8001d88:	5c10      	ldrb	r0, [r2, r0]
 8001d8a:	1840      	adds	r0, r0, r1
 8001d8c:	4770      	bx	lr
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	02020304 	.word	0x02020304
 8001d94:	01010101 	.word	0x01010101
	...

08001da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da6:	f000 fe66 	bl	8002a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001daa:	f000 f873 	bl	8001e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dae:	f000 f9b3 	bl	8002118 <MX_GPIO_Init>
  MX_DMA_Init();
 8001db2:	f000 f993 	bl	80020dc <MX_DMA_Init>
  MX_TIM3_Init();
 8001db6:	f000 f8b5 	bl	8001f24 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001dba:	f000 f939 	bl	8002030 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, data, 6);
 8001dbe:	4924      	ldr	r1, [pc, #144]	@ (8001e50 <main+0xb0>)
 8001dc0:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <main+0xb4>)
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f003 fbf1 	bl	80055ac <HAL_UART_Receive_IT>
  while (1)
  {
	  if (new_value) {
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <main+0xb8>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0fb      	beq.n	8001dca <main+0x2a>
		  new_value = 0;
 8001dd2:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <main+0xb8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
		  for (float i = 0; i < 1.0; i += 0.02) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	e02e      	b.n	8001e3c <main+0x9c>
			  for (int j = 0; j < NUM_LEDS; j++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	e010      	b.n	8001e06 <main+0x66>
				  send_data_hue(j, 0, 1.0, 1.0 - i);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2dc      	uxtb	r4, r3
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	20fe      	movs	r0, #254	@ 0xfe
 8001dec:	0580      	lsls	r0, r0, #22
 8001dee:	f7ff f855 	bl	8000e9c <__aeabi_fsub>
 8001df2:	1c03      	adds	r3, r0, #0
 8001df4:	22fe      	movs	r2, #254	@ 0xfe
 8001df6:	0592      	lsls	r2, r2, #22
 8001df8:	2100      	movs	r1, #0
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	f000 fb4a 	bl	8002494 <send_data_hue>
			  for (int j = 0; j < NUM_LEDS; j++) {
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	ddeb      	ble.n	8001de4 <main+0x44>
			  }
			  show_leds();
 8001e0c:	f000 fd9a 	bl	8002944 <show_leds>
			  if (new_value) break;
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <main+0xb8>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d119      	bne.n	8001e4c <main+0xac>
			  HAL_Delay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f000 fea9 	bl	8002b70 <HAL_Delay>
		  for (float i = 0; i < 1.0; i += 0.02) {
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fed6 	bl	8001bd0 <__aeabi_f2d>
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <main+0xbc>)
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <main+0xc0>)
 8001e28:	f7ff fb0c 	bl	8001444 <__aeabi_dadd>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	000b      	movs	r3, r1
 8001e30:	0010      	movs	r0, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	f7ff ff14 	bl	8001c60 <__aeabi_d2f>
 8001e38:	1c03      	adds	r3, r0, #0
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	21fe      	movs	r1, #254	@ 0xfe
 8001e3e:	0589      	lsls	r1, r1, #22
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7fe fae9 	bl	8000418 <__aeabi_fcmplt>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d1c9      	bne.n	8001dde <main+0x3e>
 8001e4a:	e7be      	b.n	8001dca <main+0x2a>
			  if (new_value) break;
 8001e4c:	46c0      	nop			@ (mov r8, r8)
	  if (new_value) {
 8001e4e:	e7bc      	b.n	8001dca <main+0x2a>
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200000d8 	.word	0x200000d8
 8001e58:	2000016c 	.word	0x2000016c
 8001e5c:	47ae147b 	.word	0x47ae147b
 8001e60:	3f947ae1 	.word	0x3f947ae1

08001e64 <HAL_UART_RxCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	new_value = 1;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_UART_RxCpltCallback+0x24>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, data, 6);
 8001e72:	4906      	ldr	r1, [pc, #24]	@ (8001e8c <HAL_UART_RxCpltCallback+0x28>)
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_UART_RxCpltCallback+0x2c>)
 8001e76:	2206      	movs	r2, #6
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f003 fb97 	bl	80055ac <HAL_UART_Receive_IT>
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	2000016c 	.word	0x2000016c
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	200000d8 	.word	0x200000d8

08001e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b08d      	sub	sp, #52	@ 0x34
 8001e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9a:	2414      	movs	r4, #20
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	231c      	movs	r3, #28
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f005 fa7b 	bl	80073a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eaa:	003b      	movs	r3, r7
 8001eac:	0018      	movs	r0, r3
 8001eae:	2314      	movs	r3, #20
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f005 fa74 	bl	80073a0 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <SystemClock_Config+0x8c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <SystemClock_Config+0x8c>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed0:	193b      	adds	r3, r7, r4
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	0252      	lsls	r2, r2, #9
 8001ed6:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	0018      	movs	r0, r3
 8001edc:	f001 fc0a 	bl	80036f4 <HAL_RCC_OscConfig>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001ee4:	f000 f97c 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee8:	003b      	movs	r3, r7
 8001eea:	2207      	movs	r2, #7
 8001eec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001eee:	003b      	movs	r3, r7
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ef4:	003b      	movs	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001efa:	003b      	movs	r3, r7
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001f00:	003b      	movs	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f06:	003b      	movs	r3, r7
 8001f08:	2101      	movs	r1, #1
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f001 fdd6 	bl	8003abc <HAL_RCC_ClockConfig>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f14:	f000 f964 	bl	80021e0 <Error_Handler>
  }
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b00d      	add	sp, #52	@ 0x34
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	40022000 	.word	0x40022000

08001f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	@ 0x38
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	2328      	movs	r3, #40	@ 0x28
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	0018      	movs	r0, r3
 8001f30:	2310      	movs	r3, #16
 8001f32:	001a      	movs	r2, r3
 8001f34:	2100      	movs	r1, #0
 8001f36:	f005 fa33 	bl	80073a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3a:	231c      	movs	r3, #28
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	0018      	movs	r0, r3
 8001f40:	230c      	movs	r3, #12
 8001f42:	001a      	movs	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f005 fa2b 	bl	80073a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	231c      	movs	r3, #28
 8001f50:	001a      	movs	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f005 fa24 	bl	80073a0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f58:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f5a:	4a34      	ldr	r2, [pc, #208]	@ (800202c <MX_TIM3_Init+0x108>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f5e:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60-1;
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f6c:	223b      	movs	r2, #59	@ 0x3b
 8001f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f001 fffe 	bl	8003f80 <HAL_TIM_Base_Init>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f88:	f000 f92a 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8c:	2128      	movs	r1, #40	@ 0x28
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	0152      	lsls	r2, r2, #5
 8001f94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f96:	187a      	adds	r2, r7, r1
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f002 fcc5 	bl	800492c <HAL_TIM_ConfigClockSource>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001fa6:	f000 f91b 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001fac:	0018      	movs	r0, r3
 8001fae:	f002 f885 	bl	80040bc <HAL_TIM_PWM_Init>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001fb6:	f000 f913 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	211c      	movs	r1, #28
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fc8:	187a      	adds	r2, r7, r1
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001fcc:	0011      	movs	r1, r2
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f003 fa34 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001fd8:	f000 f902 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fdc:	003b      	movs	r3, r7
 8001fde:	2260      	movs	r2, #96	@ 0x60
 8001fe0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fe2:	003b      	movs	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	003b      	movs	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fee:	003b      	movs	r3, r7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff4:	0039      	movs	r1, r7
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <MX_TIM3_Init+0x104>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f002 fb96 	bl	800472c <HAL_TIM_PWM_ConfigChannel>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002004:	f000 f8ec 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8002008:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <MX_TIM3_Init+0x104>)
 800200a:	0018      	movs	r0, r3
 800200c:	f002 f810 	bl	8004030 <HAL_TIM_Base_Start>
 8002010:	1e03      	subs	r3, r0, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM3_Init+0xf4>
    {
     	Error_Handler();
 8002014:	f000 f8e4 	bl	80021e0 <Error_Handler>
    }
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <MX_TIM3_Init+0x104>)
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f958 	bl	80022d0 <HAL_TIM_MspPostInit>

}
 8002020:	46c0      	nop			@ (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b00e      	add	sp, #56	@ 0x38
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000030 	.word	0x20000030
 800202c:	40000400 	.word	0x40000400

08002030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002034:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002036:	4a28      	ldr	r2, [pc, #160]	@ (80020d8 <MX_USART1_UART_Init+0xa8>)
 8002038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800203c:	2296      	movs	r2, #150	@ 0x96
 800203e:	0192      	lsls	r2, r2, #6
 8002040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800204e:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002054:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002056:	2204      	movs	r2, #4
 8002058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206c:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800206e:	2200      	movs	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800207a:	0018      	movs	r0, r3
 800207c:	f003 fa40 	bl	8005500 <HAL_UART_Init>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d001      	beq.n	8002088 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002084:	f000 f8ac 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800208a:	2100      	movs	r1, #0
 800208c:	0018      	movs	r0, r3
 800208e:	f005 f8a7 	bl	80071e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d001      	beq.n	800209a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002096:	f000 f8a3 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 800209c:	2100      	movs	r1, #0
 800209e:	0018      	movs	r0, r3
 80020a0:	f005 f8de 	bl	8007260 <HAL_UARTEx_SetRxFifoThreshold>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d001      	beq.n	80020ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020a8:	f000 f89a 	bl	80021e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_USART1_UART_Init+0xa4>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f005 f85c 	bl	800716c <HAL_UARTEx_DisableFifoMode>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f000 f892 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	201b      	movs	r0, #27
 80020c2:	f000 fe25 	bl	8002d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c6:	201b      	movs	r0, #27
 80020c8:	f000 fe37 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	200000d8 	.word	0x200000d8
 80020d8:	40013800 	.word	0x40013800

080020dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_DMA_Init+0x38>)
 80020e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <MX_DMA_Init+0x38>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_DMA_Init+0x38>)
 80020f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f2:	2201      	movs	r2, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	200a      	movs	r0, #10
 8002100:	f000 fe06 	bl	8002d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002104:	200a      	movs	r0, #10
 8002106:	f000 fe18 	bl	8002d3a <HAL_NVIC_EnableIRQ>

}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	40021000 	.word	0x40021000

08002118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	240c      	movs	r4, #12
 8002120:	193b      	adds	r3, r7, r4
 8002122:	0018      	movs	r0, r3
 8002124:	2314      	movs	r3, #20
 8002126:	001a      	movs	r2, r3
 8002128:	2100      	movs	r1, #0
 800212a:	f005 f939 	bl	80073a0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002134:	2104      	movs	r1, #4
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002146:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 800214c:	2120      	movs	r1, #32
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	2220      	movs	r2, #32
 8002158:	4013      	ands	r3, r2
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <MX_GPIO_Init+0xbc>)
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8002176:	23a0      	movs	r3, #160	@ 0xa0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	2201      	movs	r2, #1
 800217c:	2120      	movs	r1, #32
 800217e:	0018      	movs	r0, r3
 8002180:	f001 fa9a 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8002184:	193b      	adds	r3, r7, r4
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	0192      	lsls	r2, r2, #6
 800218a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218c:	193b      	adds	r3, r7, r4
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <MX_GPIO_Init+0xc0>)
 8002190:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	193b      	adds	r3, r7, r4
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8002198:	193b      	adds	r3, r7, r4
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <MX_GPIO_Init+0xc4>)
 800219c:	0019      	movs	r1, r3
 800219e:	0010      	movs	r0, r2
 80021a0:	f001 f918 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80021a4:	0021      	movs	r1, r4
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2220      	movs	r2, #32
 80021aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	2201      	movs	r2, #1
 80021b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2203      	movs	r2, #3
 80021bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80021be:	187a      	adds	r2, r7, r1
 80021c0:	23a0      	movs	r3, #160	@ 0xa0
 80021c2:	05db      	lsls	r3, r3, #23
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f001 f904 	bl	80033d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021cc:	46c0      	nop			@ (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b009      	add	sp, #36	@ 0x24
 80021d2:	bd90      	pop	{r4, r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10110000 	.word	0x10110000
 80021dc:	50000800 	.word	0x50000800

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_MspInit+0x44>)
 80021f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_MspInit+0x44>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <HAL_MspInit+0x44>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_MspInit+0x44>)
 800220c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_MspInit+0x44>)
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	0549      	lsls	r1, r1, #21
 8002214:	430a      	orrs	r2, r1
 8002216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_MspInit+0x44>)
 800221a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	4013      	ands	r3, r2
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <HAL_TIM_Base_MspInit+0x8c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d137      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002246:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <HAL_TIM_Base_MspInit+0x90>)
 8002248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800224a:	4b1e      	ldr	r3, [pc, #120]	@ (80022c4 <HAL_TIM_Base_MspInit+0x90>)
 800224c:	2102      	movs	r1, #2
 800224e:	430a      	orrs	r2, r1
 8002250:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002252:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <HAL_TIM_Base_MspInit+0x90>)
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel2;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002260:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <HAL_TIM_Base_MspInit+0x98>)
 8002262:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002264:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002266:	2220      	movs	r2, #32
 8002268:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 800226c:	2210      	movs	r2, #16
 800226e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 800227e:	2280      	movs	r2, #128	@ 0x80
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002286:	2280      	movs	r2, #128	@ 0x80
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	0192      	lsls	r2, r2, #6
 8002298:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 800229c:	0018      	movs	r0, r3
 800229e:	f000 fd69 	bl	8002d74 <HAL_DMA_Init>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d001      	beq.n	80022aa <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80022a6:	f7ff ff9b 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a06      	ldr	r2, [pc, #24]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_TIM_Base_MspInit+0x94>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40021000 	.word	0x40021000
 80022c8:	2000007c 	.word	0x2000007c
 80022cc:	4002001c 	.word	0x4002001c

080022d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	@ 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	240c      	movs	r4, #12
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	0018      	movs	r0, r3
 80022de:	2314      	movs	r3, #20
 80022e0:	001a      	movs	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f005 f85c 	bl	80073a0 <memset>
  if(htim->Instance==TIM3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_TIM_MspPostInit+0x70>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_TIM_MspPostInit+0x74>)
 80022f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_TIM_MspPostInit+0x74>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_TIM_MspPostInit+0x74>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = WS2812b_Data_Pin_Pin;
 800230a:	0021      	movs	r1, r4
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	2202      	movs	r2, #2
 8002316:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2201      	movs	r2, #1
 8002328:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WS2812b_Data_Pin_GPIO_Port, &GPIO_InitStruct);
 800232a:	187a      	adds	r2, r7, r1
 800232c:	23a0      	movs	r3, #160	@ 0xa0
 800232e:	05db      	lsls	r3, r3, #23
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f001 f84e 	bl	80033d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b009      	add	sp, #36	@ 0x24
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	40000400 	.word	0x40000400
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b091      	sub	sp, #68	@ 0x44
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	232c      	movs	r3, #44	@ 0x2c
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	0018      	movs	r0, r3
 8002356:	2314      	movs	r3, #20
 8002358:	001a      	movs	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f005 f820 	bl	80073a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	2410      	movs	r4, #16
 8002362:	193b      	adds	r3, r7, r4
 8002364:	0018      	movs	r0, r3
 8002366:	231c      	movs	r3, #28
 8002368:	001a      	movs	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	f005 f818 	bl	80073a0 <memset>
  if(huart->Instance==USART1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <HAL_UART_MspInit+0xc8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d146      	bne.n	8002408 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800237a:	193b      	adds	r3, r7, r4
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002380:	193b      	adds	r3, r7, r4
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002386:	193b      	adds	r3, r7, r4
 8002388:	0018      	movs	r0, r3
 800238a:	f001 fd0d 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002392:	f7ff ff25 	bl	80021e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002396:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 8002398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800239a:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 800239c:	2180      	movs	r1, #128	@ 0x80
 800239e:	01c9      	lsls	r1, r1, #7
 80023a0:	430a      	orrs	r2, r1
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	01db      	lsls	r3, r3, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_UART_MspInit+0xcc>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ca:	212c      	movs	r1, #44	@ 0x2c
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2203      	movs	r2, #3
 80023d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2202      	movs	r2, #2
 80023d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2204      	movs	r2, #4
 80023e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	187a      	adds	r2, r7, r1
 80023ec:	23a0      	movs	r3, #160	@ 0xa0
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 ffee 	bl	80033d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	201b      	movs	r0, #27
 80023fe:	f000 fc87 	bl	8002d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002402:	201b      	movs	r0, #27
 8002404:	f000 fc99 	bl	8002d3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b011      	add	sp, #68	@ 0x44
 800240e:	bd90      	pop	{r4, r7, pc}
 8002410:	40013800 	.word	0x40013800
 8002414:	40021000 	.word	0x40021000

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	e7fd      	b.n	800241c <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	e7fd      	b.n	8002424 <HardFault_Handler+0x4>

08002428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002440:	f000 fb7a 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fe7c 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	2000007c 	.word	0x2000007c

08002464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <USART1_IRQHandler+0x14>)
 800246a:	0018      	movs	r0, r3
 800246c:	f003 f8f6 	bl	800565c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	200000d8 	.word	0x200000d8

0800247c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <SystemInit+0x14>)
 8002482:	2280      	movs	r2, #128	@ 0x80
 8002484:	0512      	lsls	r2, r2, #20
 8002486:	609a      	str	r2, [r3, #8]
#endif
}
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <send_data_hue>:
extern TIM_HandleTypeDef htim3;

uint32_t pwm_data[RGB_DATA_SIZE * NUM_LEDS + 1];
uint8_t dma_in_progress = 0;

void send_data_hue(uint8_t led, uint16_t hue, float saturation, float value) {
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b08b      	sub	sp, #44	@ 0x2c
 8002498:	af00      	add	r7, sp, #0
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	240f      	movs	r4, #15
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	230c      	movs	r3, #12
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	1c0a      	adds	r2, r1, #0
 80024ac:	801a      	strh	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d901      	bls.n	80024ba <send_data_hue+0x26>
		Error_Handler();
 80024b6:	f7ff fe93 	bl	80021e0 <Error_Handler>
	}

	float max_RGB = value;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
	float rgb_range = saturation * value;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f7fe fb91 	bl	8000be8 <__aeabi_fmul>
 80024c6:	1c03      	adds	r3, r0, #0
 80024c8:	623b      	str	r3, [r7, #32]
	float min_RGB = max_RGB - rgb_range;
 80024ca:	6a39      	ldr	r1, [r7, #32]
 80024cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ce:	f7fe fce5 	bl	8000e9c <__aeabi_fsub>
 80024d2:	1c03      	adds	r3, r0, #0
 80024d4:	61fb      	str	r3, [r7, #28]

	RGB_Value rgb = {0,0,0};
 80024d6:	2510      	movs	r5, #16
 80024d8:	197b      	adds	r3, r7, r5
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	197b      	adds	r3, r7, r5
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	197b      	adds	r3, r7, r5
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]

	if (hue >= 0 && hue < 60) {
 80024ea:	260c      	movs	r6, #12
 80024ec:	19bb      	adds	r3, r7, r6
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80024f2:	d83c      	bhi.n	800256e <send_data_hue+0xda>
	    rgb.R = 255 * max_RGB;
 80024f4:	49b7      	ldr	r1, [pc, #732]	@ (80027d4 <send_data_hue+0x340>)
 80024f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024f8:	f7fe fb76 	bl	8000be8 <__aeabi_fmul>
 80024fc:	1c03      	adds	r3, r0, #0
 80024fe:	1c18      	adds	r0, r3, #0
 8002500:	f7fe ff30 	bl	8001364 <__aeabi_f2iz>
 8002504:	0002      	movs	r2, r0
 8002506:	197b      	adds	r3, r7, r5
 8002508:	601a      	str	r2, [r3, #0]
	    rgb.G = ((max_RGB - min_RGB) / 60 * hue + min_RGB) * 255;
 800250a:	69f9      	ldr	r1, [r7, #28]
 800250c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800250e:	f7fe fcc5 	bl	8000e9c <__aeabi_fsub>
 8002512:	1c03      	adds	r3, r0, #0
 8002514:	49b0      	ldr	r1, [pc, #704]	@ (80027d8 <send_data_hue+0x344>)
 8002516:	1c18      	adds	r0, r3, #0
 8002518:	f7fe f998 	bl	800084c <__aeabi_fdiv>
 800251c:	1c03      	adds	r3, r0, #0
 800251e:	1c1c      	adds	r4, r3, #0
 8002520:	19bb      	adds	r3, r7, r6
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe ff3d 	bl	80013a4 <__aeabi_i2f>
 800252a:	1c03      	adds	r3, r0, #0
 800252c:	1c19      	adds	r1, r3, #0
 800252e:	1c20      	adds	r0, r4, #0
 8002530:	f7fe fb5a 	bl	8000be8 <__aeabi_fmul>
 8002534:	1c03      	adds	r3, r0, #0
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	1c18      	adds	r0, r3, #0
 800253a:	f7fd ff95 	bl	8000468 <__aeabi_fadd>
 800253e:	1c03      	adds	r3, r0, #0
 8002540:	49a4      	ldr	r1, [pc, #656]	@ (80027d4 <send_data_hue+0x340>)
 8002542:	1c18      	adds	r0, r3, #0
 8002544:	f7fe fb50 	bl	8000be8 <__aeabi_fmul>
 8002548:	1c03      	adds	r3, r0, #0
 800254a:	1c18      	adds	r0, r3, #0
 800254c:	f7fe ff0a 	bl	8001364 <__aeabi_f2iz>
 8002550:	0002      	movs	r2, r0
 8002552:	197b      	adds	r3, r7, r5
 8002554:	605a      	str	r2, [r3, #4]
	    rgb.B = min_RGB * 255;
 8002556:	499f      	ldr	r1, [pc, #636]	@ (80027d4 <send_data_hue+0x340>)
 8002558:	69f8      	ldr	r0, [r7, #28]
 800255a:	f7fe fb45 	bl	8000be8 <__aeabi_fmul>
 800255e:	1c03      	adds	r3, r0, #0
 8002560:	1c18      	adds	r0, r3, #0
 8002562:	f7fe feff 	bl	8001364 <__aeabi_f2iz>
 8002566:	0002      	movs	r2, r0
 8002568:	197b      	adds	r3, r7, r5
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e189      	b.n	8002882 <send_data_hue+0x3ee>
	}
	else if (hue >= 60 && hue < 120) {
 800256e:	250c      	movs	r5, #12
 8002570:	197b      	adds	r3, r7, r5
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	2b3b      	cmp	r3, #59	@ 0x3b
 8002576:	d946      	bls.n	8002606 <send_data_hue+0x172>
 8002578:	197b      	adds	r3, r7, r5
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b77      	cmp	r3, #119	@ 0x77
 800257e:	d842      	bhi.n	8002606 <send_data_hue+0x172>
	    rgb.R = ((max_RGB - min_RGB) / 60 * (120.0f - hue) + min_RGB) * 255;
 8002580:	69f9      	ldr	r1, [r7, #28]
 8002582:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002584:	f7fe fc8a 	bl	8000e9c <__aeabi_fsub>
 8002588:	1c03      	adds	r3, r0, #0
 800258a:	4993      	ldr	r1, [pc, #588]	@ (80027d8 <send_data_hue+0x344>)
 800258c:	1c18      	adds	r0, r3, #0
 800258e:	f7fe f95d 	bl	800084c <__aeabi_fdiv>
 8002592:	1c03      	adds	r3, r0, #0
 8002594:	1c1c      	adds	r4, r3, #0
 8002596:	197b      	adds	r3, r7, r5
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	f7fe ff02 	bl	80013a4 <__aeabi_i2f>
 80025a0:	1c03      	adds	r3, r0, #0
 80025a2:	1c19      	adds	r1, r3, #0
 80025a4:	488d      	ldr	r0, [pc, #564]	@ (80027dc <send_data_hue+0x348>)
 80025a6:	f7fe fc79 	bl	8000e9c <__aeabi_fsub>
 80025aa:	1c03      	adds	r3, r0, #0
 80025ac:	1c19      	adds	r1, r3, #0
 80025ae:	1c20      	adds	r0, r4, #0
 80025b0:	f7fe fb1a 	bl	8000be8 <__aeabi_fmul>
 80025b4:	1c03      	adds	r3, r0, #0
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	1c18      	adds	r0, r3, #0
 80025ba:	f7fd ff55 	bl	8000468 <__aeabi_fadd>
 80025be:	1c03      	adds	r3, r0, #0
 80025c0:	4984      	ldr	r1, [pc, #528]	@ (80027d4 <send_data_hue+0x340>)
 80025c2:	1c18      	adds	r0, r3, #0
 80025c4:	f7fe fb10 	bl	8000be8 <__aeabi_fmul>
 80025c8:	1c03      	adds	r3, r0, #0
 80025ca:	1c18      	adds	r0, r3, #0
 80025cc:	f7fe feca 	bl	8001364 <__aeabi_f2iz>
 80025d0:	0002      	movs	r2, r0
 80025d2:	2410      	movs	r4, #16
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	601a      	str	r2, [r3, #0]
	    rgb.G = 255 * max_RGB;
 80025d8:	497e      	ldr	r1, [pc, #504]	@ (80027d4 <send_data_hue+0x340>)
 80025da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025dc:	f7fe fb04 	bl	8000be8 <__aeabi_fmul>
 80025e0:	1c03      	adds	r3, r0, #0
 80025e2:	1c18      	adds	r0, r3, #0
 80025e4:	f7fe febe 	bl	8001364 <__aeabi_f2iz>
 80025e8:	0002      	movs	r2, r0
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	605a      	str	r2, [r3, #4]
	    rgb.B = min_RGB * 255;
 80025ee:	4979      	ldr	r1, [pc, #484]	@ (80027d4 <send_data_hue+0x340>)
 80025f0:	69f8      	ldr	r0, [r7, #28]
 80025f2:	f7fe faf9 	bl	8000be8 <__aeabi_fmul>
 80025f6:	1c03      	adds	r3, r0, #0
 80025f8:	1c18      	adds	r0, r3, #0
 80025fa:	f7fe feb3 	bl	8001364 <__aeabi_f2iz>
 80025fe:	0002      	movs	r2, r0
 8002600:	193b      	adds	r3, r7, r4
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e13d      	b.n	8002882 <send_data_hue+0x3ee>
	}
	else if (hue >= 120 && hue < 180) {
 8002606:	250c      	movs	r5, #12
 8002608:	197b      	adds	r3, r7, r5
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	2b77      	cmp	r3, #119	@ 0x77
 800260e:	d946      	bls.n	800269e <send_data_hue+0x20a>
 8002610:	197b      	adds	r3, r7, r5
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2bb3      	cmp	r3, #179	@ 0xb3
 8002616:	d842      	bhi.n	800269e <send_data_hue+0x20a>
	    rgb.R = min_RGB * 255;
 8002618:	496e      	ldr	r1, [pc, #440]	@ (80027d4 <send_data_hue+0x340>)
 800261a:	69f8      	ldr	r0, [r7, #28]
 800261c:	f7fe fae4 	bl	8000be8 <__aeabi_fmul>
 8002620:	1c03      	adds	r3, r0, #0
 8002622:	1c18      	adds	r0, r3, #0
 8002624:	f7fe fe9e 	bl	8001364 <__aeabi_f2iz>
 8002628:	0002      	movs	r2, r0
 800262a:	2610      	movs	r6, #16
 800262c:	19bb      	adds	r3, r7, r6
 800262e:	601a      	str	r2, [r3, #0]
	    rgb.G = 255 * max_RGB;
 8002630:	4968      	ldr	r1, [pc, #416]	@ (80027d4 <send_data_hue+0x340>)
 8002632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002634:	f7fe fad8 	bl	8000be8 <__aeabi_fmul>
 8002638:	1c03      	adds	r3, r0, #0
 800263a:	1c18      	adds	r0, r3, #0
 800263c:	f7fe fe92 	bl	8001364 <__aeabi_f2iz>
 8002640:	0002      	movs	r2, r0
 8002642:	19bb      	adds	r3, r7, r6
 8002644:	605a      	str	r2, [r3, #4]
	    rgb.B = ((max_RGB - min_RGB) / 60 * (hue - 120.0f) + min_RGB) * 255;
 8002646:	69f9      	ldr	r1, [r7, #28]
 8002648:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800264a:	f7fe fc27 	bl	8000e9c <__aeabi_fsub>
 800264e:	1c03      	adds	r3, r0, #0
 8002650:	4961      	ldr	r1, [pc, #388]	@ (80027d8 <send_data_hue+0x344>)
 8002652:	1c18      	adds	r0, r3, #0
 8002654:	f7fe f8fa 	bl	800084c <__aeabi_fdiv>
 8002658:	1c03      	adds	r3, r0, #0
 800265a:	1c1c      	adds	r4, r3, #0
 800265c:	197b      	adds	r3, r7, r5
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fe fe9f 	bl	80013a4 <__aeabi_i2f>
 8002666:	1c03      	adds	r3, r0, #0
 8002668:	495c      	ldr	r1, [pc, #368]	@ (80027dc <send_data_hue+0x348>)
 800266a:	1c18      	adds	r0, r3, #0
 800266c:	f7fe fc16 	bl	8000e9c <__aeabi_fsub>
 8002670:	1c03      	adds	r3, r0, #0
 8002672:	1c19      	adds	r1, r3, #0
 8002674:	1c20      	adds	r0, r4, #0
 8002676:	f7fe fab7 	bl	8000be8 <__aeabi_fmul>
 800267a:	1c03      	adds	r3, r0, #0
 800267c:	69f9      	ldr	r1, [r7, #28]
 800267e:	1c18      	adds	r0, r3, #0
 8002680:	f7fd fef2 	bl	8000468 <__aeabi_fadd>
 8002684:	1c03      	adds	r3, r0, #0
 8002686:	4953      	ldr	r1, [pc, #332]	@ (80027d4 <send_data_hue+0x340>)
 8002688:	1c18      	adds	r0, r3, #0
 800268a:	f7fe faad 	bl	8000be8 <__aeabi_fmul>
 800268e:	1c03      	adds	r3, r0, #0
 8002690:	1c18      	adds	r0, r3, #0
 8002692:	f7fe fe67 	bl	8001364 <__aeabi_f2iz>
 8002696:	0002      	movs	r2, r0
 8002698:	19bb      	adds	r3, r7, r6
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e0f1      	b.n	8002882 <send_data_hue+0x3ee>
	}
	else if (hue >= 180 && hue < 240) {
 800269e:	250c      	movs	r5, #12
 80026a0:	197b      	adds	r3, r7, r5
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	2bb3      	cmp	r3, #179	@ 0xb3
 80026a6:	d946      	bls.n	8002736 <send_data_hue+0x2a2>
 80026a8:	197b      	adds	r3, r7, r5
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2bef      	cmp	r3, #239	@ 0xef
 80026ae:	d842      	bhi.n	8002736 <send_data_hue+0x2a2>
	    rgb.R = min_RGB * 255;
 80026b0:	4948      	ldr	r1, [pc, #288]	@ (80027d4 <send_data_hue+0x340>)
 80026b2:	69f8      	ldr	r0, [r7, #28]
 80026b4:	f7fe fa98 	bl	8000be8 <__aeabi_fmul>
 80026b8:	1c03      	adds	r3, r0, #0
 80026ba:	1c18      	adds	r0, r3, #0
 80026bc:	f7fe fe52 	bl	8001364 <__aeabi_f2iz>
 80026c0:	0002      	movs	r2, r0
 80026c2:	2610      	movs	r6, #16
 80026c4:	19bb      	adds	r3, r7, r6
 80026c6:	601a      	str	r2, [r3, #0]
	    rgb.G = ((max_RGB - min_RGB) / 60 * (240.0f - hue) + min_RGB) * 255;
 80026c8:	69f9      	ldr	r1, [r7, #28]
 80026ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026cc:	f7fe fbe6 	bl	8000e9c <__aeabi_fsub>
 80026d0:	1c03      	adds	r3, r0, #0
 80026d2:	4941      	ldr	r1, [pc, #260]	@ (80027d8 <send_data_hue+0x344>)
 80026d4:	1c18      	adds	r0, r3, #0
 80026d6:	f7fe f8b9 	bl	800084c <__aeabi_fdiv>
 80026da:	1c03      	adds	r3, r0, #0
 80026dc:	1c1c      	adds	r4, r3, #0
 80026de:	197b      	adds	r3, r7, r5
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7fe fe5e 	bl	80013a4 <__aeabi_i2f>
 80026e8:	1c03      	adds	r3, r0, #0
 80026ea:	1c19      	adds	r1, r3, #0
 80026ec:	483c      	ldr	r0, [pc, #240]	@ (80027e0 <send_data_hue+0x34c>)
 80026ee:	f7fe fbd5 	bl	8000e9c <__aeabi_fsub>
 80026f2:	1c03      	adds	r3, r0, #0
 80026f4:	1c19      	adds	r1, r3, #0
 80026f6:	1c20      	adds	r0, r4, #0
 80026f8:	f7fe fa76 	bl	8000be8 <__aeabi_fmul>
 80026fc:	1c03      	adds	r3, r0, #0
 80026fe:	69f9      	ldr	r1, [r7, #28]
 8002700:	1c18      	adds	r0, r3, #0
 8002702:	f7fd feb1 	bl	8000468 <__aeabi_fadd>
 8002706:	1c03      	adds	r3, r0, #0
 8002708:	4932      	ldr	r1, [pc, #200]	@ (80027d4 <send_data_hue+0x340>)
 800270a:	1c18      	adds	r0, r3, #0
 800270c:	f7fe fa6c 	bl	8000be8 <__aeabi_fmul>
 8002710:	1c03      	adds	r3, r0, #0
 8002712:	1c18      	adds	r0, r3, #0
 8002714:	f7fe fe26 	bl	8001364 <__aeabi_f2iz>
 8002718:	0002      	movs	r2, r0
 800271a:	19bb      	adds	r3, r7, r6
 800271c:	605a      	str	r2, [r3, #4]
	    rgb.B = 255 * max_RGB;
 800271e:	492d      	ldr	r1, [pc, #180]	@ (80027d4 <send_data_hue+0x340>)
 8002720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002722:	f7fe fa61 	bl	8000be8 <__aeabi_fmul>
 8002726:	1c03      	adds	r3, r0, #0
 8002728:	1c18      	adds	r0, r3, #0
 800272a:	f7fe fe1b 	bl	8001364 <__aeabi_f2iz>
 800272e:	0002      	movs	r2, r0
 8002730:	19bb      	adds	r3, r7, r6
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	e0a5      	b.n	8002882 <send_data_hue+0x3ee>
	}
	else if (hue >= 240 && hue < 300) {
 8002736:	250c      	movs	r5, #12
 8002738:	197b      	adds	r3, r7, r5
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2bef      	cmp	r3, #239	@ 0xef
 800273e:	d951      	bls.n	80027e4 <send_data_hue+0x350>
 8002740:	197b      	adds	r3, r7, r5
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	2396      	movs	r3, #150	@ 0x96
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	429a      	cmp	r2, r3
 800274a:	d24b      	bcs.n	80027e4 <send_data_hue+0x350>
	    rgb.R = ((max_RGB - min_RGB) / 60 * (hue - 240.0f) + min_RGB) * 255;
 800274c:	69f9      	ldr	r1, [r7, #28]
 800274e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002750:	f7fe fba4 	bl	8000e9c <__aeabi_fsub>
 8002754:	1c03      	adds	r3, r0, #0
 8002756:	4920      	ldr	r1, [pc, #128]	@ (80027d8 <send_data_hue+0x344>)
 8002758:	1c18      	adds	r0, r3, #0
 800275a:	f7fe f877 	bl	800084c <__aeabi_fdiv>
 800275e:	1c03      	adds	r3, r0, #0
 8002760:	1c1c      	adds	r4, r3, #0
 8002762:	197b      	adds	r3, r7, r5
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	0018      	movs	r0, r3
 8002768:	f7fe fe1c 	bl	80013a4 <__aeabi_i2f>
 800276c:	1c03      	adds	r3, r0, #0
 800276e:	491c      	ldr	r1, [pc, #112]	@ (80027e0 <send_data_hue+0x34c>)
 8002770:	1c18      	adds	r0, r3, #0
 8002772:	f7fe fb93 	bl	8000e9c <__aeabi_fsub>
 8002776:	1c03      	adds	r3, r0, #0
 8002778:	1c19      	adds	r1, r3, #0
 800277a:	1c20      	adds	r0, r4, #0
 800277c:	f7fe fa34 	bl	8000be8 <__aeabi_fmul>
 8002780:	1c03      	adds	r3, r0, #0
 8002782:	69f9      	ldr	r1, [r7, #28]
 8002784:	1c18      	adds	r0, r3, #0
 8002786:	f7fd fe6f 	bl	8000468 <__aeabi_fadd>
 800278a:	1c03      	adds	r3, r0, #0
 800278c:	4911      	ldr	r1, [pc, #68]	@ (80027d4 <send_data_hue+0x340>)
 800278e:	1c18      	adds	r0, r3, #0
 8002790:	f7fe fa2a 	bl	8000be8 <__aeabi_fmul>
 8002794:	1c03      	adds	r3, r0, #0
 8002796:	1c18      	adds	r0, r3, #0
 8002798:	f7fe fde4 	bl	8001364 <__aeabi_f2iz>
 800279c:	0002      	movs	r2, r0
 800279e:	2410      	movs	r4, #16
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	601a      	str	r2, [r3, #0]
	    rgb.G = min_RGB * 255;
 80027a4:	490b      	ldr	r1, [pc, #44]	@ (80027d4 <send_data_hue+0x340>)
 80027a6:	69f8      	ldr	r0, [r7, #28]
 80027a8:	f7fe fa1e 	bl	8000be8 <__aeabi_fmul>
 80027ac:	1c03      	adds	r3, r0, #0
 80027ae:	1c18      	adds	r0, r3, #0
 80027b0:	f7fe fdd8 	bl	8001364 <__aeabi_f2iz>
 80027b4:	0002      	movs	r2, r0
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	605a      	str	r2, [r3, #4]
	    rgb.B = 255 * max_RGB;
 80027ba:	4906      	ldr	r1, [pc, #24]	@ (80027d4 <send_data_hue+0x340>)
 80027bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027be:	f7fe fa13 	bl	8000be8 <__aeabi_fmul>
 80027c2:	1c03      	adds	r3, r0, #0
 80027c4:	1c18      	adds	r0, r3, #0
 80027c6:	f7fe fdcd 	bl	8001364 <__aeabi_f2iz>
 80027ca:	0002      	movs	r2, r0
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e057      	b.n	8002882 <send_data_hue+0x3ee>
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	437f0000 	.word	0x437f0000
 80027d8:	42700000 	.word	0x42700000
 80027dc:	42f00000 	.word	0x42f00000
 80027e0:	43700000 	.word	0x43700000
	}
	else if (hue >= 300 && hue < 360) {
 80027e4:	250c      	movs	r5, #12
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	2396      	movs	r3, #150	@ 0x96
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d347      	bcc.n	8002882 <send_data_hue+0x3ee>
 80027f2:	197b      	adds	r3, r7, r5
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	23b4      	movs	r3, #180	@ 0xb4
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d241      	bcs.n	8002882 <send_data_hue+0x3ee>
	    rgb.R = 255 * max_RGB;
 80027fe:	4928      	ldr	r1, [pc, #160]	@ (80028a0 <send_data_hue+0x40c>)
 8002800:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002802:	f7fe f9f1 	bl	8000be8 <__aeabi_fmul>
 8002806:	1c03      	adds	r3, r0, #0
 8002808:	1c18      	adds	r0, r3, #0
 800280a:	f7fe fdab 	bl	8001364 <__aeabi_f2iz>
 800280e:	0002      	movs	r2, r0
 8002810:	2610      	movs	r6, #16
 8002812:	19bb      	adds	r3, r7, r6
 8002814:	601a      	str	r2, [r3, #0]
	    rgb.G = min_RGB * 255;
 8002816:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <send_data_hue+0x40c>)
 8002818:	69f8      	ldr	r0, [r7, #28]
 800281a:	f7fe f9e5 	bl	8000be8 <__aeabi_fmul>
 800281e:	1c03      	adds	r3, r0, #0
 8002820:	1c18      	adds	r0, r3, #0
 8002822:	f7fe fd9f 	bl	8001364 <__aeabi_f2iz>
 8002826:	0002      	movs	r2, r0
 8002828:	19bb      	adds	r3, r7, r6
 800282a:	605a      	str	r2, [r3, #4]
	    rgb.B = ((max_RGB - min_RGB) / 60 * (360.0f - hue) + min_RGB) * 255;
 800282c:	69f9      	ldr	r1, [r7, #28]
 800282e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002830:	f7fe fb34 	bl	8000e9c <__aeabi_fsub>
 8002834:	1c03      	adds	r3, r0, #0
 8002836:	491b      	ldr	r1, [pc, #108]	@ (80028a4 <send_data_hue+0x410>)
 8002838:	1c18      	adds	r0, r3, #0
 800283a:	f7fe f807 	bl	800084c <__aeabi_fdiv>
 800283e:	1c03      	adds	r3, r0, #0
 8002840:	1c1c      	adds	r4, r3, #0
 8002842:	197b      	adds	r3, r7, r5
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	0018      	movs	r0, r3
 8002848:	f7fe fdac 	bl	80013a4 <__aeabi_i2f>
 800284c:	1c03      	adds	r3, r0, #0
 800284e:	1c19      	adds	r1, r3, #0
 8002850:	4815      	ldr	r0, [pc, #84]	@ (80028a8 <send_data_hue+0x414>)
 8002852:	f7fe fb23 	bl	8000e9c <__aeabi_fsub>
 8002856:	1c03      	adds	r3, r0, #0
 8002858:	1c19      	adds	r1, r3, #0
 800285a:	1c20      	adds	r0, r4, #0
 800285c:	f7fe f9c4 	bl	8000be8 <__aeabi_fmul>
 8002860:	1c03      	adds	r3, r0, #0
 8002862:	69f9      	ldr	r1, [r7, #28]
 8002864:	1c18      	adds	r0, r3, #0
 8002866:	f7fd fdff 	bl	8000468 <__aeabi_fadd>
 800286a:	1c03      	adds	r3, r0, #0
 800286c:	490c      	ldr	r1, [pc, #48]	@ (80028a0 <send_data_hue+0x40c>)
 800286e:	1c18      	adds	r0, r3, #0
 8002870:	f7fe f9ba 	bl	8000be8 <__aeabi_fmul>
 8002874:	1c03      	adds	r3, r0, #0
 8002876:	1c18      	adds	r0, r3, #0
 8002878:	f7fe fd74 	bl	8001364 <__aeabi_f2iz>
 800287c:	0002      	movs	r2, r0
 800287e:	19bb      	adds	r3, r7, r6
 8002880:	609a      	str	r2, [r3, #8]
	}

	send_data_rgb(led, rgb);
 8002882:	2310      	movs	r3, #16
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	220f      	movs	r2, #15
 8002888:	18ba      	adds	r2, r7, r2
 800288a:	7810      	ldrb	r0, [r2, #0]
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f000 f879 	bl	8002988 <send_data_rgb>
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b00b      	add	sp, #44	@ 0x2c
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	437f0000 	.word	0x437f0000
 80028a4:	42700000 	.word	0x42700000
 80028a8:	43b40000 	.word	0x43b40000

080028ac <send_data_color_value>:

void send_data_color_value(uint8_t led, uint32_t color_value)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	701a      	strb	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d901      	bls.n	80028c6 <send_data_color_value+0x1a>
			Error_Handler();
 80028c2:	f7ff fc8d 	bl	80021e0 <Error_Handler>
	}

	for (int i = 0; i < 24; i++) {
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e02d      	b.n	8002928 <send_data_color_value+0x7c>
		char bit = color_value & 0x1;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	200b      	movs	r0, #11
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	2101      	movs	r1, #1
 80028d6:	400a      	ands	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
		if (bit == 1) {
 80028da:	183b      	adds	r3, r7, r0
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10e      	bne.n	8002900 <send_data_color_value+0x54>
			pwm_data[23 + led * 24 - i] = 40;
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	0013      	movs	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	3317      	adds	r3, #23
 80028f0:	001a      	movs	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <send_data_color_value+0x94>)
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	2128      	movs	r1, #40	@ 0x28
 80028fc:	50d1      	str	r1, [r2, r3]
 80028fe:	e00d      	b.n	800291c <send_data_color_value+0x70>
		}
		else {
			pwm_data[23 + led * 24 - i] = 20;
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	0013      	movs	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	189b      	adds	r3, r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	3317      	adds	r3, #23
 800290e:	001a      	movs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad2      	subs	r2, r2, r3
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <send_data_color_value+0x94>)
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	2114      	movs	r1, #20
 800291a:	50d1      	str	r1, [r2, r3]
		}
		color_value = color_value >> 1;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 24; i++) {
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b17      	cmp	r3, #23
 800292c:	ddce      	ble.n	80028cc <send_data_color_value+0x20>
	}
	pwm_data[RGB_DATA_SIZE * NUM_LEDS] = 0;
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <send_data_color_value+0x94>)
 8002930:	23c0      	movs	r3, #192	@ 0xc0
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	2100      	movs	r1, #0
 8002936:	50d1      	str	r1, [r2, r3]
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000170 	.word	0x20000170

08002944 <show_leds>:

void show_leds() {
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	while (dma_in_progress) {};
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <show_leds+0x38>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1fb      	bne.n	800294a <show_leds+0x6>
	dma_in_progress = 1;
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <show_leds+0x38>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
	if (HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, pwm_data, sizeof(pwm_data)/sizeof(uint32_t) + 1) != HAL_OK) {
 8002958:	23c1      	movs	r3, #193	@ 0xc1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <show_leds+0x3c>)
 800295e:	4809      	ldr	r0, [pc, #36]	@ (8002984 <show_leds+0x40>)
 8002960:	2100      	movs	r1, #0
 8002962:	f001 fc0b 	bl	800417c <HAL_TIM_PWM_Start_DMA>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d001      	beq.n	800296e <show_leds+0x2a>
			Error_Handler();
 800296a:	f7ff fc39 	bl	80021e0 <Error_Handler>
	}
	HAL_Delay(1);
 800296e:	2001      	movs	r0, #1
 8002970:	f000 f8fe 	bl	8002b70 <HAL_Delay>
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	20000774 	.word	0x20000774
 8002980:	20000170 	.word	0x20000170
 8002984:	20000030 	.word	0x20000030

08002988 <send_data_rgb>:


void send_data_rgb(uint8_t led, RGB_Value rgb)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	0004      	movs	r4, r0
 8002990:	0038      	movs	r0, r7
 8002992:	6001      	str	r1, [r0, #0]
 8002994:	6042      	str	r2, [r0, #4]
 8002996:	6083      	str	r3, [r0, #8]
 8002998:	210f      	movs	r1, #15
 800299a:	187b      	adds	r3, r7, r1
 800299c:	1c22      	adds	r2, r4, #0
 800299e:	701a      	strb	r2, [r3, #0]
	if (NUM_LEDS - 1 < led) {
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d901      	bls.n	80029ac <send_data_rgb+0x24>
			Error_Handler();
 80029a8:	f7ff fc1a 	bl	80021e0 <Error_Handler>
	}

	//GRB format
	uint32_t color_value = rgb.G << 16 | rgb.R << 8 | rgb.B;
 80029ac:	003b      	movs	r3, r7
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	041a      	lsls	r2, r3, #16
 80029b2:	003b      	movs	r3, r7
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	431a      	orrs	r2, r3
 80029ba:	003b      	movs	r3, r7
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
	send_data_color_value(led, color_value);
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	230f      	movs	r3, #15
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	0011      	movs	r1, r2
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ff6d 	bl	80028ac <send_data_color_value>

}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b007      	add	sp, #28
 80029d8:	bd90      	pop	{r4, r7, pc}
	...

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f001 fdb5 	bl	8004558 <HAL_TIM_PWM_Stop_DMA>
  if (htim->hdma[TIM_DMA_ID_CC1]->State == HAL_DMA_STATE_READY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2225      	movs	r2, #37	@ 0x25
 80029f4:	5c9b      	ldrb	r3, [r3, r2]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d109      	bne.n	8002a10 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
  {
      __HAL_UNLOCK(htim->hdma[TIM_DMA_ID_CC1]);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	2224      	movs	r2, #36	@ 0x24
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
      htim->hdma[TIM_DMA_ID_CC1]->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2225      	movs	r2, #37	@ 0x25
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	5499      	strb	r1, [r3, r2]
  }
  dma_in_progress = 0;
 8002a10:	4b03      	ldr	r3, [pc, #12]	@ (8002a20 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	20000774 	.word	0x20000774

08002a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a24:	480d      	ldr	r0, [pc, #52]	@ (8002a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a28:	f7ff fd28 	bl	800247c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a2e:	e003      	b.n	8002a38 <LoopCopyDataInit>

08002a30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002a32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a36:	3104      	adds	r1, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a38:	480a      	ldr	r0, [pc, #40]	@ (8002a64 <LoopForever+0xa>)
  ldr r3, =_edata
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <LoopForever+0xe>)
  adds r2, r0, r1
 8002a3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a40:	d3f6      	bcc.n	8002a30 <CopyDataInit>
  ldr r2, =_sbss
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <LoopForever+0x12>)
  b LoopFillZerobss
 8002a44:	e002      	b.n	8002a4c <LoopFillZerobss>

08002a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a48:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4a:	3204      	adds	r2, #4

08002a4c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <LoopForever+0x16>)
  cmp r2, r3
 8002a4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a50:	d3f9      	bcc.n	8002a46 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002a52:	f004 fcad 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a56:	f7ff f9a3 	bl	8001da0 <main>

08002a5a <LoopForever>:

LoopForever:
    b LoopForever
 8002a5a:	e7fe      	b.n	8002a5a <LoopForever>
  ldr   r0, =_estack
 8002a5c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002a60:	08007570 	.word	0x08007570
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a68:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002a6c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8002a70:	2000077c 	.word	0x2000077c

08002a74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC1_IRQHandler>

08002a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a7c:	1dfb      	adds	r3, r7, #7
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a82:	2003      	movs	r0, #3
 8002a84:	f000 f80e 	bl	8002aa4 <HAL_InitTick>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e001      	b.n	8002a98 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a94:	f7ff fbaa 	bl	80021ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aac:	230f      	movs	r3, #15
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_InitTick+0x88>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002abc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b30 <HAL_InitTick+0x8c>)
 8002abe:	681c      	ldr	r4, [r3, #0]
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b2c <HAL_InitTick+0x88>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	23fa      	movs	r3, #250	@ 0xfa
 8002ac8:	0098      	lsls	r0, r3, #2
 8002aca:	f7fd fb1d 	bl	8000108 <__udivsi3>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0020      	movs	r0, r4
 8002ad4:	f7fd fb18 	bl	8000108 <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f93d 	bl	8002d5a <HAL_SYSTICK_Config>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d80a      	bhi.n	8002b00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	2301      	movs	r3, #1
 8002aee:	425b      	negs	r3, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f90c 	bl	8002d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_InitTick+0x90>)
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00d      	b.n	8002b1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b00:	230f      	movs	r3, #15
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e008      	b.n	8002b1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b0a:	230f      	movs	r3, #15
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e003      	b.n	8002b1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b005      	add	sp, #20
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	20000010 	.word	0x20000010
 8002b30:	20000008 	.word	0x20000008
 8002b34:	2000000c 	.word	0x2000000c

08002b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_IncTick+0x1c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	001a      	movs	r2, r3
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	18d2      	adds	r2, r2, r3
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	20000010 	.word	0x20000010
 8002b58:	20000778 	.word	0x20000778

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b02      	ldr	r3, [pc, #8]	@ (8002b6c <HAL_GetTick+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	20000778 	.word	0x20000778

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	001a      	movs	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	f7ff ffe0 	bl	8002b5c <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bca:	d809      	bhi.n	8002be0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	231f      	movs	r3, #31
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_EnableIRQ+0x30>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4091      	lsls	r1, r2
 8002bdc:	000a      	movs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c00:	d828      	bhi.n	8002c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c02:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc0 <__NVIC_SetPriority+0xd4>)
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	33c0      	adds	r3, #192	@ 0xc0
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	589b      	ldr	r3, [r3, r2]
 8002c12:	1dfa      	adds	r2, r7, #7
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	0011      	movs	r1, r2
 8002c18:	2203      	movs	r2, #3
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	21ff      	movs	r1, #255	@ 0xff
 8002c20:	4091      	lsls	r1, r2
 8002c22:	000a      	movs	r2, r1
 8002c24:	43d2      	mvns	r2, r2
 8002c26:	401a      	ands	r2, r3
 8002c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	22ff      	movs	r2, #255	@ 0xff
 8002c30:	401a      	ands	r2, r3
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	4003      	ands	r3, r0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c40:	481f      	ldr	r0, [pc, #124]	@ (8002cc0 <__NVIC_SetPriority+0xd4>)
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	33c0      	adds	r3, #192	@ 0xc0
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c52:	e031      	b.n	8002cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c54:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <__NVIC_SetPriority+0xd8>)
 8002c56:	1dfb      	adds	r3, r7, #7
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	400b      	ands	r3, r1
 8002c60:	3b08      	subs	r3, #8
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3306      	adds	r3, #6
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	18d3      	adds	r3, r2, r3
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1dfa      	adds	r2, r7, #7
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	0011      	movs	r1, r2
 8002c74:	2203      	movs	r2, #3
 8002c76:	400a      	ands	r2, r1
 8002c78:	00d2      	lsls	r2, r2, #3
 8002c7a:	21ff      	movs	r1, #255	@ 0xff
 8002c7c:	4091      	lsls	r1, r2
 8002c7e:	000a      	movs	r2, r1
 8002c80:	43d2      	mvns	r2, r2
 8002c82:	401a      	ands	r2, r3
 8002c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	22ff      	movs	r2, #255	@ 0xff
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	0018      	movs	r0, r3
 8002c94:	2303      	movs	r3, #3
 8002c96:	4003      	ands	r3, r0
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c9c:	4809      	ldr	r0, [pc, #36]	@ (8002cc4 <__NVIC_SetPriority+0xd8>)
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	001c      	movs	r4, r3
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	4023      	ands	r3, r4
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	430a      	orrs	r2, r1
 8002cae:	3306      	adds	r3, #6
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	18c3      	adds	r3, r0, r3
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	601a      	str	r2, [r3, #0]
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b003      	add	sp, #12
 8002cbe:	bd90      	pop	{r4, r7, pc}
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	045b      	lsls	r3, r3, #17
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d301      	bcc.n	8002ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e010      	b.n	8002d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <SysTick_Config+0x44>)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3a01      	subs	r2, #1
 8002ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce8:	2301      	movs	r3, #1
 8002cea:	425b      	negs	r3, r3
 8002cec:	2103      	movs	r1, #3
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff ff7c 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <SysTick_Config+0x44>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <SysTick_Config+0x44>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	0002      	movs	r2, r0
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff ff33 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b002      	add	sp, #8
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff ffaf 	bl	8002cc8 <SysTick_Config>
 8002d6a:	0003      	movs	r3, r0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e077      	b.n	8002e76 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e80 <HAL_DMA_Init+0x10c>)
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	4463      	add	r3, ip
 8002d90:	2114      	movs	r1, #20
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002d9a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2225      	movs	r2, #37	@ 0x25
 8002da4:	2102      	movs	r1, #2
 8002da6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4934      	ldr	r1, [pc, #208]	@ (8002e84 <HAL_DMA_Init+0x110>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fa9f 	bl	8003334 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d102      	bne.n	8002e08 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	21ff      	movs	r1, #255	@ 0xff
 8002e12:	400a      	ands	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <HAL_DMA_Init+0xd8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d80d      	bhi.n	8002e4c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 faaa 	bl	800338c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e008      	b.n	8002e5e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2225      	movs	r2, #37	@ 0x25
 8002e68:	2101      	movs	r1, #1
 8002e6a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	@ 0x24
 8002e70:	2100      	movs	r1, #0
 8002e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	bffdfff8 	.word	0xbffdfff8
 8002e84:	ffff800f 	.word	0xffff800f

08002e88 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2317      	movs	r3, #23
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2224      	movs	r2, #36	@ 0x24
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Start_IT+0x24>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e070      	b.n	8002f8e <HAL_DMA_Start_IT+0x106>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2225      	movs	r2, #37	@ 0x25
 8002eb8:	5c9b      	ldrb	r3, [r3, r2]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d157      	bne.n	8002f70 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2225      	movs	r2, #37	@ 0x25
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9e5 	bl	80032b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	210e      	movs	r1, #14
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00f      	b.n	8002f24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2104      	movs	r1, #4
 8002f10:	438a      	bics	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	210a      	movs	r1, #10
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d008      	beq.n	8002f44 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	2180      	movs	r1, #128	@ 0x80
 8002f3e:	0049      	lsls	r1, r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	0049      	lsls	r1, r1, #1
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e007      	b.n	8002f80 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f78:	2317      	movs	r3, #23
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2224      	movs	r2, #36	@ 0x24
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

  return status;
 8002f88:	2317      	movs	r3, #23
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b006      	add	sp, #24
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e050      	b.n	800304c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2225      	movs	r2, #37	@ 0x25
 8002fae:	5c9b      	ldrb	r3, [r3, r2]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d008      	beq.n	8002fc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e041      	b.n	800304c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	210e      	movs	r1, #14
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	491c      	ldr	r1, [pc, #112]	@ (8003054 <HAL_DMA_Abort+0xbc>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_DMA_Abort+0xc0>)
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	221c      	movs	r2, #28
 8003002:	4013      	ands	r3, r2
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <HAL_DMA_Abort+0xc0>)
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003016:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302a:	490a      	ldr	r1, [pc, #40]	@ (8003054 <HAL_DMA_Abort+0xbc>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003038:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2225      	movs	r2, #37	@ 0x25
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2224      	movs	r2, #36	@ 0x24
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}
 8003054:	fffffeff 	.word	0xfffffeff
 8003058:	40020000 	.word	0x40020000

0800305c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	@ 0x24
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_DMA_Abort_IT+0x26>
 800307e:	2302      	movs	r3, #2
 8003080:	e05e      	b.n	8003140 <HAL_DMA_Abort_IT+0xe4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2224      	movs	r2, #36	@ 0x24
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2225      	movs	r2, #37	@ 0x25
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800309c:	230f      	movs	r3, #15
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e049      	b.n	800313a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	210e      	movs	r1, #14
 80030b2:	438a      	bics	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	438a      	bics	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	491d      	ldr	r1, [pc, #116]	@ (8003148 <HAL_DMA_Abort_IT+0xec>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80030d6:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_DMA_Abort_IT+0xf0>)
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	221c      	movs	r2, #28
 80030e0:	4013      	ands	r3, r2
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_DMA_Abort_IT+0xf0>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003108:	490f      	ldr	r1, [pc, #60]	@ (8003148 <HAL_DMA_Abort_IT+0xec>)
 800310a:	400a      	ands	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003116:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2225      	movs	r2, #37	@ 0x25
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	@ 0x24
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	0010      	movs	r0, r2
 8003138:	4798      	blx	r3
    }
  }
  return status;
 800313a:	230f      	movs	r3, #15
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	781b      	ldrb	r3, [r3, #0]
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fffffeff 	.word	0xfffffeff
 800314c:	40020000 	.word	0x40020000

08003150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003158:	4b55      	ldr	r3, [pc, #340]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	221c      	movs	r2, #28
 800316c:	4013      	ands	r3, r2
 800316e:	2204      	movs	r2, #4
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	d027      	beq.n	80031ca <HAL_DMA_IRQHandler+0x7a>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d023      	beq.n	80031ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d107      	bne.n	800319e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2104      	movs	r1, #4
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800319e:	4b44      	ldr	r3, [pc, #272]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	221c      	movs	r2, #28
 80031a8:	4013      	ands	r3, r2
 80031aa:	2204      	movs	r2, #4
 80031ac:	409a      	lsls	r2, r3
 80031ae:	4b40      	ldr	r3, [pc, #256]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d100      	bne.n	80031be <HAL_DMA_IRQHandler+0x6e>
 80031bc:	e073      	b.n	80032a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	0010      	movs	r0, r2
 80031c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031c8:	e06d      	b.n	80032a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	221c      	movs	r2, #28
 80031d0:	4013      	ands	r3, r2
 80031d2:	2202      	movs	r2, #2
 80031d4:	409a      	lsls	r2, r3
 80031d6:	0013      	movs	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	d02e      	beq.n	800323c <HAL_DMA_IRQHandler+0xec>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2202      	movs	r2, #2
 80031e2:	4013      	ands	r3, r2
 80031e4:	d02a      	beq.n	800323c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2220      	movs	r2, #32
 80031ee:	4013      	ands	r3, r2
 80031f0:	d10b      	bne.n	800320a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	210a      	movs	r1, #10
 80031fe:	438a      	bics	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2225      	movs	r2, #37	@ 0x25
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	221c      	movs	r2, #28
 8003214:	4013      	ands	r3, r2
 8003216:	2202      	movs	r2, #2
 8003218:	409a      	lsls	r2, r3
 800321a:	4b25      	ldr	r3, [pc, #148]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	@ 0x24
 8003224:	2100      	movs	r1, #0
 8003226:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03a      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	0010      	movs	r0, r2
 8003238:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800323a:	e034      	b.n	80032a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	221c      	movs	r2, #28
 8003242:	4013      	ands	r3, r2
 8003244:	2208      	movs	r2, #8
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	d02b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x158>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2208      	movs	r2, #8
 8003254:	4013      	ands	r3, r2
 8003256:	d027      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	210e      	movs	r1, #14
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	221c      	movs	r2, #28
 8003272:	4013      	ands	r3, r2
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <HAL_DMA_IRQHandler+0x160>)
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2225      	movs	r2, #37	@ 0x25
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	@ 0x24
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	0010      	movs	r0, r2
 80032a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46c0      	nop			@ (mov r8, r8)
}
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b004      	add	sp, #16
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40020000 	.word	0x40020000

080032b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80032de:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <DMA_SetConfig+0x7c>)
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	221c      	movs	r2, #28
 80032e8:	4013      	ands	r3, r2
 80032ea:	2201      	movs	r2, #1
 80032ec:	409a      	lsls	r2, r3
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <DMA_SetConfig+0x7c>)
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b10      	cmp	r3, #16
 8003302:	d108      	bne.n	8003316 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003314:	e007      	b.n	8003326 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	60da      	str	r2, [r3, #12]
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	40020000 	.word	0x40020000

08003334 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	001a      	movs	r2, r3
 8003342:	23ff      	movs	r3, #255	@ 0xff
 8003344:	4013      	ands	r3, r2
 8003346:	3b08      	subs	r3, #8
 8003348:	2114      	movs	r1, #20
 800334a:	0018      	movs	r0, r3
 800334c:	f7fc fedc 	bl	8000108 <__udivsi3>
 8003350:	0003      	movs	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800335c:	4694      	mov	ip, r2
 800335e:	4463      	add	r3, ip
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	001a      	movs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800336c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	221c      	movs	r2, #28
 8003372:	4013      	ands	r3, r2
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bd80      	pop	{r7, pc}
 8003384:	10008200 	.word	0x10008200
 8003388:	40020880 	.word	0x40020880

0800338c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	22ff      	movs	r2, #255	@ 0xff
 800339a:	4013      	ands	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033a2:	4694      	mov	ip, r2
 80033a4:	4463      	add	r3, ip
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	001a      	movs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	4013      	ands	r3, r2
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	1000823f 	.word	0x1000823f
 80033d0:	40020940 	.word	0x40020940

080033d4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033e2:	e153      	b.n	800368c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4091      	lsls	r1, r2
 80033ee:	000a      	movs	r2, r1
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d100      	bne.n	80033fc <HAL_GPIO_Init+0x28>
 80033fa:	e144      	b.n	8003686 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x38>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b12      	cmp	r3, #18
 800340a:	d125      	bne.n	8003458 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	58d3      	ldr	r3, [r2, r3]
 8003418:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2207      	movs	r2, #7
 800341e:	4013      	ands	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	409a      	lsls	r2, r3
 8003426:	0013      	movs	r3, r2
 8003428:	43da      	mvns	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	220f      	movs	r2, #15
 8003436:	401a      	ands	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2107      	movs	r1, #7
 800343c:	400b      	ands	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	409a      	lsls	r2, r3
 8003442:	0013      	movs	r3, r2
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	409a      	lsls	r2, r3
 8003466:	0013      	movs	r3, r2
 8003468:	43da      	mvns	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	401a      	ands	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	0013      	movs	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d00b      	beq.n	80034ac <HAL_GPIO_Init+0xd8>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a0:	2b11      	cmp	r3, #17
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d130      	bne.n	800350e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	409a      	lsls	r2, r3
 80034ba:	0013      	movs	r3, r2
 80034bc:	43da      	mvns	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4013      	ands	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	409a      	lsls	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e2:	2201      	movs	r2, #1
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	409a      	lsls	r2, r3
 80034e8:	0013      	movs	r3, r2
 80034ea:	43da      	mvns	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4013      	ands	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	2201      	movs	r2, #1
 80034fa:	401a      	ands	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	409a      	lsls	r2, r3
 8003500:	0013      	movs	r3, r2
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d017      	beq.n	8003546 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	2203      	movs	r2, #3
 8003522:	409a      	lsls	r2, r3
 8003524:	0013      	movs	r3, r2
 8003526:	43da      	mvns	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	055b      	lsls	r3, r3, #21
 800354e:	4013      	ands	r3, r2
 8003550:	d100      	bne.n	8003554 <HAL_GPIO_Init+0x180>
 8003552:	e098      	b.n	8003686 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003554:	4a53      	ldr	r2, [pc, #332]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3318      	adds	r3, #24
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	589b      	ldr	r3, [r3, r2]
 8003560:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2203      	movs	r2, #3
 8003566:	4013      	ands	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	220f      	movs	r2, #15
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	43da      	mvns	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4013      	ands	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	23a0      	movs	r3, #160	@ 0xa0
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	429a      	cmp	r2, r3
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x1e2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a48      	ldr	r2, [pc, #288]	@ (80036a8 <HAL_GPIO_Init+0x2d4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x1de>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a47      	ldr	r2, [pc, #284]	@ (80036ac <HAL_GPIO_Init+0x2d8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x1da>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a46      	ldr	r2, [pc, #280]	@ (80036b0 <HAL_GPIO_Init+0x2dc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x1d6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a45      	ldr	r2, [pc, #276]	@ (80036b4 <HAL_GPIO_Init+0x2e0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x1d2>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x1e4>
 80035a6:	2306      	movs	r3, #6
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x1e4>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x1e4>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x1e4>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x1e4>
 80035b6:	2300      	movs	r3, #0
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	2103      	movs	r1, #3
 80035bc:	400a      	ands	r2, r1
 80035be:	00d2      	lsls	r2, r2, #3
 80035c0:	4093      	lsls	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80035c8:	4936      	ldr	r1, [pc, #216]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3318      	adds	r3, #24
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80035d6:	4a33      	ldr	r2, [pc, #204]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	58d3      	ldr	r3, [r2, r3]
 80035dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4013      	ands	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	025b      	lsls	r3, r3, #9
 80035f0:	4013      	ands	r3, r2
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80035fc:	4929      	ldr	r1, [pc, #164]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003604:	4a27      	ldr	r2, [pc, #156]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 8003606:	2384      	movs	r3, #132	@ 0x84
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43da      	mvns	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4013      	ands	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	4013      	ands	r3, r2
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800362a:	491e      	ldr	r1, [pc, #120]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 800362c:	2284      	movs	r2, #132	@ 0x84
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003632:	4b1c      	ldr	r3, [pc, #112]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43da      	mvns	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	4013      	ands	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	035b      	lsls	r3, r3, #13
 800364a:	4013      	ands	r3, r2
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003656:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	43da      	mvns	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	039b      	lsls	r3, r3, #14
 8003674:	4013      	ands	r3, r2
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_GPIO_Init+0x2d0>)
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3301      	adds	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	40da      	lsrs	r2, r3
 8003694:	1e13      	subs	r3, r2, #0
 8003696:	d000      	beq.n	800369a <HAL_GPIO_Init+0x2c6>
 8003698:	e6a4      	b.n	80033e4 <HAL_GPIO_Init+0x10>
  }
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46c0      	nop			@ (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b006      	add	sp, #24
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021800 	.word	0x40021800
 80036a8:	50000400 	.word	0x50000400
 80036ac:	50000800 	.word	0x50000800
 80036b0:	50000c00 	.word	0x50000c00
 80036b4:	50001400 	.word	0x50001400

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	0008      	movs	r0, r1
 80036c2:	0011      	movs	r1, r2
 80036c4:	1cbb      	adds	r3, r7, #2
 80036c6:	1c02      	adds	r2, r0, #0
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	1c7b      	adds	r3, r7, #1
 80036cc:	1c0a      	adds	r2, r1, #0
 80036ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d0:	1c7b      	adds	r3, r7, #1
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d8:	1cbb      	adds	r3, r7, #2
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e2:	1cbb      	adds	r3, r7, #2
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1d0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	4013      	ands	r3, r2
 800370e:	d100      	bne.n	8003712 <HAL_RCC_OscConfig+0x1e>
 8003710:	e069      	b.n	80037e6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003712:	4bc8      	ldr	r3, [pc, #800]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2238      	movs	r2, #56	@ 0x38
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d15d      	bne.n	80037e6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e1bc      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	429a      	cmp	r2, r3
 8003738:	d107      	bne.n	800374a <HAL_RCC_OscConfig+0x56>
 800373a:	4bbe      	ldr	r3, [pc, #760]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4bbd      	ldr	r3, [pc, #756]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003740:	2180      	movs	r1, #128	@ 0x80
 8003742:	0249      	lsls	r1, r1, #9
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e020      	b.n	800378c <HAL_RCC_OscConfig+0x98>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	23a0      	movs	r3, #160	@ 0xa0
 8003750:	02db      	lsls	r3, r3, #11
 8003752:	429a      	cmp	r2, r3
 8003754:	d10e      	bne.n	8003774 <HAL_RCC_OscConfig+0x80>
 8003756:	4bb7      	ldr	r3, [pc, #732]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4bb6      	ldr	r3, [pc, #728]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800375c:	2180      	movs	r1, #128	@ 0x80
 800375e:	02c9      	lsls	r1, r1, #11
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	4bb3      	ldr	r3, [pc, #716]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4bb2      	ldr	r3, [pc, #712]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800376a:	2180      	movs	r1, #128	@ 0x80
 800376c:	0249      	lsls	r1, r1, #9
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x98>
 8003774:	4baf      	ldr	r3, [pc, #700]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4bae      	ldr	r3, [pc, #696]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800377a:	49af      	ldr	r1, [pc, #700]	@ (8003a38 <HAL_RCC_OscConfig+0x344>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	4bac      	ldr	r3, [pc, #688]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4bab      	ldr	r3, [pc, #684]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003786:	49ad      	ldr	r1, [pc, #692]	@ (8003a3c <HAL_RCC_OscConfig+0x348>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d014      	beq.n	80037be <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7ff f9e2 	bl	8002b5c <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800379e:	f7ff f9dd 	bl	8002b5c <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	@ 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e17b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b0:	4ba0      	ldr	r3, [pc, #640]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0xaa>
 80037bc:	e013      	b.n	80037e6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7ff f9cd 	bl	8002b5c <HAL_GetTick>
 80037c2:	0003      	movs	r3, r0
 80037c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80037c8:	f7ff f9c8 	bl	8002b5c <HAL_GetTick>
 80037cc:	0002      	movs	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	@ 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e166      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037da:	4b96      	ldr	r3, [pc, #600]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	4013      	ands	r3, r2
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2202      	movs	r2, #2
 80037ec:	4013      	ands	r3, r2
 80037ee:	d100      	bne.n	80037f2 <HAL_RCC_OscConfig+0xfe>
 80037f0:	e086      	b.n	8003900 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b90      	ldr	r3, [pc, #576]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2238      	movs	r2, #56	@ 0x38
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12f      	bne.n	8003862 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e14c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4b89      	ldr	r3, [pc, #548]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4a8b      	ldr	r2, [pc, #556]	@ (8003a40 <HAL_RCC_OscConfig+0x34c>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	021a      	lsls	r2, r3, #8
 800381e:	4b85      	ldr	r3, [pc, #532]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d112      	bne.n	8003850 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800382a:	4b82      	ldr	r3, [pc, #520]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a85      	ldr	r2, [pc, #532]	@ (8003a44 <HAL_RCC_OscConfig+0x350>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	4b7e      	ldr	r3, [pc, #504]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800383e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0adb      	lsrs	r3, r3, #11
 8003844:	2207      	movs	r2, #7
 8003846:	4013      	ands	r3, r2
 8003848:	4a7f      	ldr	r2, [pc, #508]	@ (8003a48 <HAL_RCC_OscConfig+0x354>)
 800384a:	40da      	lsrs	r2, r3
 800384c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a4c <HAL_RCC_OscConfig+0x358>)
 800384e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003850:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x35c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff f925 	bl	8002aa4 <HAL_InitTick>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d050      	beq.n	8003900 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e122      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d030      	beq.n	80038cc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800386a:	4b72      	ldr	r3, [pc, #456]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	@ (8003a44 <HAL_RCC_OscConfig+0x350>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	4b6e      	ldr	r3, [pc, #440]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800387a:	430a      	orrs	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800387e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b6c      	ldr	r3, [pc, #432]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003884:	2180      	movs	r1, #128	@ 0x80
 8003886:	0049      	lsls	r1, r1, #1
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff f966 	bl	8002b5c <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003896:	f7ff f961 	bl	8002b5c <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0ff      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a8:	4b62      	ldr	r3, [pc, #392]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4013      	ands	r3, r2
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a61      	ldr	r2, [pc, #388]	@ (8003a40 <HAL_RCC_OscConfig+0x34c>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e019      	b.n	8003900 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80038cc:	4b59      	ldr	r3, [pc, #356]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b58      	ldr	r3, [pc, #352]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038d2:	4960      	ldr	r1, [pc, #384]	@ (8003a54 <HAL_RCC_OscConfig+0x360>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7ff f940 	bl	8002b5c <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038e2:	f7ff f93b 	bl	8002b5c <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0d9      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4013      	ands	r3, r2
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	d042      	beq.n	8003990 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800390a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2238      	movs	r2, #56	@ 0x38
 8003910:	4013      	ands	r3, r2
 8003912:	2b18      	cmp	r3, #24
 8003914:	d105      	bne.n	8003922 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d138      	bne.n	8003990 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0c2      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d019      	beq.n	800395e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800392a:	4b42      	ldr	r3, [pc, #264]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 800392c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800392e:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003930:	2101      	movs	r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7ff f911 	bl	8002b5c <HAL_GetTick>
 800393a:	0003      	movs	r3, r0
 800393c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003940:	f7ff f90c 	bl	8002b5c <HAL_GetTick>
 8003944:	0002      	movs	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0aa      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003952:	4b38      	ldr	r3, [pc, #224]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	2202      	movs	r2, #2
 8003958:	4013      	ands	r3, r2
 800395a:	d0f1      	beq.n	8003940 <HAL_RCC_OscConfig+0x24c>
 800395c:	e018      	b.n	8003990 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800395e:	4b35      	ldr	r3, [pc, #212]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003960:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003962:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003964:	2101      	movs	r1, #1
 8003966:	438a      	bics	r2, r1
 8003968:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7ff f8f7 	bl	8002b5c <HAL_GetTick>
 800396e:	0003      	movs	r3, r0
 8003970:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003974:	f7ff f8f2 	bl	8002b5c <HAL_GetTick>
 8003978:	0002      	movs	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e090      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003986:	4b2b      	ldr	r3, [pc, #172]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398a:	2202      	movs	r2, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d1f1      	bne.n	8003974 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	4013      	ands	r3, r2
 8003998:	d100      	bne.n	800399c <HAL_RCC_OscConfig+0x2a8>
 800399a:	e084      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399c:	230f      	movs	r3, #15
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80039a4:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2238      	movs	r2, #56	@ 0x38
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d000      	beq.n	80039ba <HAL_RCC_OscConfig+0x2c6>
 80039b8:	e075      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e074      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2e0>
 80039c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039cc:	2101      	movs	r1, #1
 80039ce:	430a      	orrs	r2, r1
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x31a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x302>
 80039dc:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039e2:	2104      	movs	r1, #4
 80039e4:	430a      	orrs	r2, r1
 80039e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x31a>
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	438a      	bics	r2, r1
 8003a00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003a04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_OscConfig+0x340>)
 8003a08:	2104      	movs	r1, #4
 8003a0a:	438a      	bics	r2, r1
 8003a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7ff f8a1 	bl	8002b5c <HAL_GetTick>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a1e:	e01d      	b.n	8003a5c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7ff f89c 	bl	8002b5c <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <HAL_RCC_OscConfig+0x364>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d915      	bls.n	8003a5c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e039      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	fffeffff 	.word	0xfffeffff
 8003a3c:	fffbffff 	.word	0xfffbffff
 8003a40:	ffff80ff 	.word	0xffff80ff
 8003a44:	ffffc7ff 	.word	0xffffc7ff
 8003a48:	02dc6c00 	.word	0x02dc6c00
 8003a4c:	20000008 	.word	0x20000008
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	fffffeff 	.word	0xfffffeff
 8003a58:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a5c:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_RCC_OscConfig+0x3bc>)
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	2202      	movs	r2, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	d0dc      	beq.n	8003a20 <HAL_RCC_OscConfig+0x32c>
 8003a66:	e013      	b.n	8003a90 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7ff f878 	bl	8002b5c <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003a70:	e009      	b.n	8003a86 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7ff f873 	bl	8002b5c <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <HAL_RCC_OscConfig+0x3c0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e010      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_RCC_OscConfig+0x3bc>)
 8003a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a90:	230f      	movs	r3, #15
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_OscConfig+0x3bc>)
 8003a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9e:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <HAL_RCC_OscConfig+0x3bc>)
 8003aa0:	4905      	ldr	r1, [pc, #20]	@ (8003ab8 <HAL_RCC_OscConfig+0x3c4>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b006      	add	sp, #24
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	efffffff 	.word	0xefffffff

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0df      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b71      	ldr	r3, [pc, #452]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d91e      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b6e      	ldr	r3, [pc, #440]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	4393      	bics	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003af0:	f7ff f834 	bl	8002b5c <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f7ff f82f 	bl	8002b5c <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	4a65      	ldr	r2, [pc, #404]	@ (8003c9c <HAL_RCC_ClockConfig+0x1e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0c0      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b0e:	4b62      	ldr	r3, [pc, #392]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2207      	movs	r2, #7
 8003b14:	4013      	ands	r3, r2
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2202      	movs	r2, #2
 8003b22:	4013      	ands	r3, r2
 8003b24:	d017      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b30:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1e8>)
 8003b36:	401a      	ands	r2, r3
 8003b38:	4b59      	ldr	r3, [pc, #356]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b3a:	21b0      	movs	r1, #176	@ 0xb0
 8003b3c:	0109      	lsls	r1, r1, #4
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b42:	4b57      	ldr	r3, [pc, #348]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4a58      	ldr	r2, [pc, #352]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	4b53      	ldr	r3, [pc, #332]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d04b      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	029b      	lsls	r3, r3, #10
 8003b70:	4013      	ands	r3, r2
 8003b72:	d11f      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e08b      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b80:	4b47      	ldr	r3, [pc, #284]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d113      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e07f      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003b98:	4b41      	ldr	r3, [pc, #260]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e074      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003baa:	2202      	movs	r2, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e06d      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2207      	movs	r2, #7
 8003bba:	4393      	bics	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4b37      	ldr	r3, [pc, #220]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fe ffc8 	bl	8002b5c <HAL_GetTick>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd2:	f7fe ffc3 	bl	8002b5c <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <HAL_RCC_ClockConfig+0x1e0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e054      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2238      	movs	r2, #56	@ 0x38
 8003bec:	401a      	ands	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1ec      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b27      	ldr	r3, [pc, #156]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	4013      	ands	r3, r2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d21e      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b24      	ldr	r3, [pc, #144]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	4b21      	ldr	r3, [pc, #132]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c18:	f7fe ffa0 	bl	8002b5c <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c20:	e009      	b.n	8003c36 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003c22:	f7fe ff9b 	bl	8002b5c <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <HAL_RCC_ClockConfig+0x1e0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e02c      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c36:	4b18      	ldr	r3, [pc, #96]	@ (8003c98 <HAL_RCC_ClockConfig+0x1dc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1ee      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4a16      	ldr	r2, [pc, #88]	@ (8003cac <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003c62:	f000 f82b 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c66:	0001      	movs	r1, r0
 8003c68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	220f      	movs	r2, #15
 8003c70:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003c72:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c74:	0092      	lsls	r2, r2, #2
 8003c76:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c78:	221f      	movs	r2, #31
 8003c7a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003c7c:	000a      	movs	r2, r1
 8003c7e:	40da      	lsrs	r2, r3
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c84:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fe ff0b 	bl	8002aa4 <HAL_InitTick>
 8003c8e:	0003      	movs	r3, r0
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	00001388 	.word	0x00001388
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	ffff84ff 	.word	0xffff84ff
 8003ca8:	fffff0ff 	.word	0xfffff0ff
 8003cac:	ffff8fff 	.word	0xffff8fff
 8003cb0:	0800748c 	.word	0x0800748c
 8003cb4:	20000008 	.word	0x20000008
 8003cb8:	2000000c 	.word	0x2000000c

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x78>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2238      	movs	r2, #56	@ 0x38
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d10f      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x78>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0adb      	lsrs	r3, r3, #11
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	0013      	movs	r3, r2
 8003cdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	4815      	ldr	r0, [pc, #84]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003ce2:	f7fc fa11 	bl	8000108 <__udivsi3>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	e01e      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x78>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2238      	movs	r2, #56	@ 0x38
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e015      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x78>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2238      	movs	r2, #56	@ 0x38
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d103      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003d12:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x78>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2238      	movs	r2, #56	@ 0x38
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b18      	cmp	r3, #24
 8003d1c:	d103      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d1e:	23fa      	movs	r3, #250	@ 0xfa
 8003d20:	01db      	lsls	r3, r3, #7
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	e001      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003d2a:	687b      	ldr	r3, [r7, #4]
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	02dc6c00 	.word	0x02dc6c00

08003d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003d40:	f7ff ffbc 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003d44:	0001      	movs	r1, r0
 8003d46:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <HAL_RCC_GetHCLKFreq+0x30>)
 8003d48:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x34>)
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d56:	221f      	movs	r2, #31
 8003d58:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003d5a:	000a      	movs	r2, r1
 8003d5c:	40da      	lsrs	r2, r3
 8003d5e:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x38>)
 8003d60:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003d62:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x38>)
 8003d64:	681b      	ldr	r3, [r3, #0]
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800748c 	.word	0x0800748c
 8003d74:	20000008 	.word	0x20000008

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003d7c:	f7ff ffde 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d80:	0001      	movs	r1, r0
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0b1b      	lsrs	r3, r3, #12
 8003d88:	2207      	movs	r2, #7
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003d8e:	0092      	lsls	r2, r2, #2
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	221f      	movs	r2, #31
 8003d94:	4013      	ands	r3, r2
 8003d96:	40d9      	lsrs	r1, r3
 8003d98:	000b      	movs	r3, r1
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	080074cc 	.word	0x080074cc

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003db0:	2313      	movs	r3, #19
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db8:	2312      	movs	r3, #18
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2240      	movs	r2, #64	@ 0x40
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d100      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003dca:	e079      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2011      	movs	r0, #17
 8003dce:	183b      	adds	r3, r7, r0
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd4:	4b63      	ldr	r3, [pc, #396]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	055b      	lsls	r3, r3, #21
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d110      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	0549      	lsls	r1, r1, #21
 8003dea:	430a      	orrs	r2, r1
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dee:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	055b      	lsls	r3, r3, #21
 8003df6:	4013      	ands	r3, r2
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfc:	183b      	adds	r3, r7, r0
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003e02:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e06:	23c0      	movs	r3, #192	@ 0xc0
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d019      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d014      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003e1e:	4b51      	ldr	r3, [pc, #324]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	4a51      	ldr	r2, [pc, #324]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e28:	4b4e      	ldr	r3, [pc, #312]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	0249      	lsls	r1, r1, #9
 8003e32:	430a      	orrs	r2, r1
 8003e34:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e36:	4b4b      	ldr	r3, [pc, #300]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e3c:	494b      	ldr	r1, [pc, #300]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003e42:	4b48      	ldr	r3, [pc, #288]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fe fe84 	bl	8002b5c <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003e58:	e00c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fe7f 	bl	8002b5c <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	4a42      	ldr	r2, [pc, #264]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d904      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003e6a:	2313      	movs	r3, #19
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2203      	movs	r2, #3
 8003e70:	701a      	strb	r2, [r3, #0]
          break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003e74:	4b3b      	ldr	r3, [pc, #236]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	2202      	movs	r2, #2
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d0ed      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003e7e:	2313      	movs	r3, #19
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	4a36      	ldr	r2, [pc, #216]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	2312      	movs	r3, #18
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2213      	movs	r2, #19
 8003ea4:	18ba      	adds	r2, r7, r2
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eaa:	2311      	movs	r3, #17
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eba:	492e      	ldr	r1, [pc, #184]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eca:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2220      	movs	r2, #32
 8003f02:	4013      	ands	r3, r2
 8003f04:	d008      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	0899      	lsrs	r1, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f14:	430a      	orrs	r2, r1
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003f22:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	22e0      	movs	r2, #224	@ 0xe0
 8003f46:	4393      	bics	r3, r2
 8003f48:	0019      	movs	r1, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003f54:	2312      	movs	r3, #18
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b006      	add	sp, #24
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	40021000 	.word	0x40021000
 8003f68:	fffffcff 	.word	0xfffffcff
 8003f6c:	fffeffff 	.word	0xfffeffff
 8003f70:	00001388 	.word	0x00001388
 8003f74:	efffffff 	.word	0xefffffff
 8003f78:	ffffcfff 	.word	0xffffcfff
 8003f7c:	ffff3fff 	.word	0xffff3fff

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e04a      	b.n	8004028 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	223d      	movs	r2, #61	@ 0x3d
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223c      	movs	r2, #60	@ 0x3c
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fe f943 	bl	8002234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	223d      	movs	r2, #61	@ 0x3d
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	0010      	movs	r0, r2
 8003fc2:	f000 fe6d 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2248      	movs	r2, #72	@ 0x48
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	223e      	movs	r2, #62	@ 0x3e
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	223f      	movs	r2, #63	@ 0x3f
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2240      	movs	r2, #64	@ 0x40
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2241      	movs	r2, #65	@ 0x41
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2242      	movs	r2, #66	@ 0x42
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2243      	movs	r2, #67	@ 0x43
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2244      	movs	r2, #68	@ 0x44
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2245      	movs	r2, #69	@ 0x45
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2246      	movs	r2, #70	@ 0x46
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2247      	movs	r2, #71	@ 0x47
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223d      	movs	r2, #61	@ 0x3d
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	223d      	movs	r2, #61	@ 0x3d
 800403c:	5c9b      	ldrb	r3, [r3, r2]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e02f      	b.n	80040a8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	223d      	movs	r2, #61	@ 0x3d
 800404c:	2102      	movs	r1, #2
 800404e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_TIM_Base_Start+0x80>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_TIM_Base_Start+0x34>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <HAL_TIM_Base_Start+0x84>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d116      	bne.n	8004092 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4a13      	ldr	r2, [pc, #76]	@ (80040b8 <HAL_TIM_Base_Start+0x88>)
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b06      	cmp	r3, #6
 8004074:	d016      	beq.n	80040a4 <HAL_TIM_Base_Start+0x74>
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	025b      	lsls	r3, r3, #9
 800407c:	429a      	cmp	r2, r3
 800407e:	d011      	beq.n	80040a4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	e008      	b.n	80040a4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e000      	b.n	80040a6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b004      	add	sp, #16
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40000400 	.word	0x40000400
 80040b8:	00010007 	.word	0x00010007

080040bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e04a      	b.n	8004164 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	223d      	movs	r2, #61	@ 0x3d
 80040d2:	5c9b      	ldrb	r3, [r3, r2]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223c      	movs	r2, #60	@ 0x3c
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f841 	bl	800416c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	223d      	movs	r2, #61	@ 0x3d
 80040ee:	2102      	movs	r1, #2
 80040f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	0019      	movs	r1, r3
 80040fc:	0010      	movs	r0, r2
 80040fe:	f000 fdcf 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2248      	movs	r2, #72	@ 0x48
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	223e      	movs	r2, #62	@ 0x3e
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223f      	movs	r2, #63	@ 0x3f
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2240      	movs	r2, #64	@ 0x40
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2241      	movs	r2, #65	@ 0x41
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2242      	movs	r2, #66	@ 0x42
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2243      	movs	r2, #67	@ 0x43
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2244      	movs	r2, #68	@ 0x44
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2245      	movs	r2, #69	@ 0x45
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2246      	movs	r2, #70	@ 0x46
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2247      	movs	r2, #71	@ 0x47
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223d      	movs	r2, #61	@ 0x3d
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004174:	46c0      	nop			@ (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	001a      	movs	r2, r3
 800418a:	1cbb      	adds	r3, r7, #2
 800418c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2317      	movs	r3, #23
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <HAL_TIM_PWM_Start_DMA+0x32>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	223e      	movs	r2, #62	@ 0x3e
 80041a0:	5c9b      	ldrb	r3, [r3, r2]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3b02      	subs	r3, #2
 80041a6:	425a      	negs	r2, r3
 80041a8:	4153      	adcs	r3, r2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e037      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0xa2>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d108      	bne.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	223f      	movs	r2, #63	@ 0x3f
 80041b8:	5c9b      	ldrb	r3, [r3, r2]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3b02      	subs	r3, #2
 80041be:	425a      	negs	r2, r3
 80041c0:	4153      	adcs	r3, r2
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e02b      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0xa2>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d108      	bne.n	80041de <HAL_TIM_PWM_Start_DMA+0x62>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	3b02      	subs	r3, #2
 80041d6:	425a      	negs	r2, r3
 80041d8:	4153      	adcs	r3, r2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e01f      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0xa2>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d108      	bne.n	80041f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2241      	movs	r2, #65	@ 0x41
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b02      	subs	r3, #2
 80041ee:	425a      	negs	r2, r3
 80041f0:	4153      	adcs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0xa2>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d108      	bne.n	800420e <HAL_TIM_PWM_Start_DMA+0x92>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2242      	movs	r2, #66	@ 0x42
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3b02      	subs	r3, #2
 8004206:	425a      	negs	r2, r3
 8004208:	4153      	adcs	r3, r2
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e007      	b.n	800421e <HAL_TIM_PWM_Start_DMA+0xa2>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2243      	movs	r2, #67	@ 0x43
 8004212:	5c9b      	ldrb	r3, [r3, r2]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3b02      	subs	r3, #2
 8004218:	425a      	negs	r2, r3
 800421a:	4153      	adcs	r3, r2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
 8004224:	e183      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <HAL_TIM_PWM_Start_DMA+0xc2>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	223e      	movs	r2, #62	@ 0x3e
 8004230:	5c9b      	ldrb	r3, [r3, r2]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	425a      	negs	r2, r3
 8004238:	4153      	adcs	r3, r2
 800423a:	b2db      	uxtb	r3, r3
 800423c:	e037      	b.n	80042ae <HAL_TIM_PWM_Start_DMA+0x132>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d108      	bne.n	8004256 <HAL_TIM_PWM_Start_DMA+0xda>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	223f      	movs	r2, #63	@ 0x3f
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	425a      	negs	r2, r3
 8004250:	4153      	adcs	r3, r2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e02b      	b.n	80042ae <HAL_TIM_PWM_Start_DMA+0x132>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d108      	bne.n	800426e <HAL_TIM_PWM_Start_DMA+0xf2>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2240      	movs	r2, #64	@ 0x40
 8004260:	5c9b      	ldrb	r3, [r3, r2]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	425a      	negs	r2, r3
 8004268:	4153      	adcs	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e01f      	b.n	80042ae <HAL_TIM_PWM_Start_DMA+0x132>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d108      	bne.n	8004286 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2241      	movs	r2, #65	@ 0x41
 8004278:	5c9b      	ldrb	r3, [r3, r2]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	425a      	negs	r2, r3
 8004280:	4153      	adcs	r3, r2
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e013      	b.n	80042ae <HAL_TIM_PWM_Start_DMA+0x132>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b10      	cmp	r3, #16
 800428a:	d108      	bne.n	800429e <HAL_TIM_PWM_Start_DMA+0x122>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2242      	movs	r2, #66	@ 0x42
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	425a      	negs	r2, r3
 8004298:	4153      	adcs	r3, r2
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e007      	b.n	80042ae <HAL_TIM_PWM_Start_DMA+0x132>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2243      	movs	r2, #67	@ 0x43
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	425a      	negs	r2, r3
 80042aa:	4153      	adcs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d035      	beq.n	800431e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_TIM_PWM_Start_DMA+0x144>
 80042b8:	1cbb      	adds	r3, r7, #2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e134      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <HAL_TIM_PWM_Start_DMA+0x158>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	223e      	movs	r2, #62	@ 0x3e
 80042ce:	2102      	movs	r1, #2
 80042d0:	5499      	strb	r1, [r3, r2]
 80042d2:	e026      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d104      	bne.n	80042e4 <HAL_TIM_PWM_Start_DMA+0x168>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	223f      	movs	r2, #63	@ 0x3f
 80042de:	2102      	movs	r1, #2
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	e01e      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d104      	bne.n	80042f4 <HAL_TIM_PWM_Start_DMA+0x178>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2240      	movs	r2, #64	@ 0x40
 80042ee:	2102      	movs	r1, #2
 80042f0:	5499      	strb	r1, [r3, r2]
 80042f2:	e016      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d104      	bne.n	8004304 <HAL_TIM_PWM_Start_DMA+0x188>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2241      	movs	r2, #65	@ 0x41
 80042fe:	2102      	movs	r1, #2
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	e00e      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b10      	cmp	r3, #16
 8004308:	d104      	bne.n	8004314 <HAL_TIM_PWM_Start_DMA+0x198>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2242      	movs	r2, #66	@ 0x42
 800430e:	2102      	movs	r1, #2
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	e006      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2243      	movs	r2, #67	@ 0x43
 8004318:	2102      	movs	r1, #2
 800431a:	5499      	strb	r1, [r3, r2]
 800431c:	e001      	b.n	8004322 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e105      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d100      	bne.n	800432a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8004328:	e080      	b.n	800442c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d900      	bls.n	8004332 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8004330:	e0a1      	b.n	8004476 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d054      	beq.n	80043e2 <HAL_TIM_PWM_Start_DMA+0x266>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d900      	bls.n	8004340 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800433e:	e09a      	b.n	8004476 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d025      	beq.n	8004398 <HAL_TIM_PWM_Start_DMA+0x21c>
 800434c:	e093      	b.n	8004476 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	4a79      	ldr	r2, [pc, #484]	@ (8004538 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004354:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	4a78      	ldr	r2, [pc, #480]	@ (800453c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	4a77      	ldr	r2, [pc, #476]	@ (8004540 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3334      	adds	r3, #52	@ 0x34
 8004372:	001a      	movs	r2, r3
 8004374:	1cbb      	adds	r3, r7, #2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	f7fe fd86 	bl	8002e88 <HAL_DMA_Start_IT>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0d4      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	0089      	lsls	r1, r1, #2
 8004392:	430a      	orrs	r2, r1
 8004394:	60da      	str	r2, [r3, #12]
      break;
 8004396:	e073      	b.n	8004480 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	4a66      	ldr	r2, [pc, #408]	@ (8004538 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	4a65      	ldr	r2, [pc, #404]	@ (800453c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	4a64      	ldr	r2, [pc, #400]	@ (8004540 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80043ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3338      	adds	r3, #56	@ 0x38
 80043bc:	001a      	movs	r2, r3
 80043be:	1cbb      	adds	r3, r7, #2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	f7fe fd61 	bl	8002e88 <HAL_DMA_Start_IT>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d001      	beq.n	80043ce <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0af      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	00c9      	lsls	r1, r1, #3
 80043dc:	430a      	orrs	r2, r1
 80043de:	60da      	str	r2, [r3, #12]
      break;
 80043e0:	e04e      	b.n	8004480 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	4a54      	ldr	r2, [pc, #336]	@ (8004538 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a53      	ldr	r2, [pc, #332]	@ (800453c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	4a52      	ldr	r2, [pc, #328]	@ (8004540 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	333c      	adds	r3, #60	@ 0x3c
 8004406:	001a      	movs	r2, r3
 8004408:	1cbb      	adds	r3, r7, #2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	f7fe fd3c 	bl	8002e88 <HAL_DMA_Start_IT>
 8004410:	1e03      	subs	r3, r0, #0
 8004412:	d001      	beq.n	8004418 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e08a      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	0109      	lsls	r1, r1, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
      break;
 800442a:	e029      	b.n	8004480 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	4a41      	ldr	r2, [pc, #260]	@ (8004538 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	4a40      	ldr	r2, [pc, #256]	@ (800453c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	4a3f      	ldr	r2, [pc, #252]	@ (8004540 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004442:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3340      	adds	r3, #64	@ 0x40
 8004450:	001a      	movs	r2, r3
 8004452:	1cbb      	adds	r3, r7, #2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	f7fe fd17 	bl	8002e88 <HAL_DMA_Start_IT>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d001      	beq.n	8004462 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e065      	b.n	800452e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	0149      	lsls	r1, r1, #5
 8004470:	430a      	orrs	r2, r1
 8004472:	60da      	str	r2, [r3, #12]
      break;
 8004474:	e004      	b.n	8004480 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8004476:	2317      	movs	r3, #23
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
      break;
 800447e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004480:	2317      	movs	r3, #23
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d14e      	bne.n	8004528 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	2201      	movs	r2, #1
 8004492:	0018      	movs	r0, r3
 8004494:	f000 ffae 	bl	80053f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a28      	ldr	r2, [pc, #160]	@ (8004548 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a26      	ldr	r2, [pc, #152]	@ (800454c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_PWM_Start_DMA+0x33e>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <HAL_TIM_PWM_Start_DMA+0x340>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2180      	movs	r1, #128	@ 0x80
 80044cc:	0209      	lsls	r1, r1, #8
 80044ce:	430a      	orrs	r2, r1
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004544 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d116      	bne.n	8004514 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d016      	beq.n	8004526 <HAL_TIM_PWM_Start_DMA+0x3aa>
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	025b      	lsls	r3, r3, #9
 80044fe:	429a      	cmp	r2, r3
 8004500:	d011      	beq.n	8004526 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e008      	b.n	8004526 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e000      	b.n	8004528 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004528:	2317      	movs	r3, #23
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	781b      	ldrb	r3, [r3, #0]
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b006      	add	sp, #24
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	08004b8d 	.word	0x08004b8d
 800453c:	08004c37 	.word	0x08004c37
 8004540:	08004af9 	.word	0x08004af9
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800
 8004550:	40000400 	.word	0x40000400
 8004554:	00010007 	.word	0x00010007

08004558 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	230f      	movs	r3, #15
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d039      	beq.n	80045e4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d844      	bhi.n	8004600 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d025      	beq.n	80045c8 <HAL_TIM_PWM_Stop_DMA+0x70>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d83e      	bhi.n	8004600 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_TIM_PWM_Stop_DMA+0x38>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00e      	beq.n	80045ac <HAL_TIM_PWM_Stop_DMA+0x54>
 800458e:	e037      	b.n	8004600 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	495a      	ldr	r1, [pc, #360]	@ (8004704 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800459c:	400a      	ands	r2, r1
 800459e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7fe fd59 	bl	800305c <HAL_DMA_Abort_IT>
      break;
 80045aa:	e02e      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4954      	ldr	r1, [pc, #336]	@ (8004708 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fe fd4b 	bl	800305c <HAL_DMA_Abort_IT>
      break;
 80045c6:	e020      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	494e      	ldr	r1, [pc, #312]	@ (800470c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fe fd3d 	bl	800305c <HAL_DMA_Abort_IT>
      break;
 80045e2:	e012      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4948      	ldr	r1, [pc, #288]	@ (8004710 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fe fd2f 	bl	800305c <HAL_DMA_Abort_IT>
      break;
 80045fe:	e004      	b.n	800460a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8004600:	230f      	movs	r3, #15
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
      break;
 8004608:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800460a:	230f      	movs	r3, #15
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d000      	beq.n	8004616 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8004614:	e06e      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	2200      	movs	r2, #0
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fee8 	bl	80053f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3a      	ldr	r2, [pc, #232]	@ (8004714 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xea>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a39      	ldr	r2, [pc, #228]	@ (8004718 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIM_PWM_Stop_DMA+0xea>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a37      	ldr	r2, [pc, #220]	@ (800471c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4a33      	ldr	r2, [pc, #204]	@ (8004720 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004654:	4013      	ands	r3, r2
 8004656:	d10d      	bne.n	8004674 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a31      	ldr	r2, [pc, #196]	@ (8004724 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004660:	4013      	ands	r3, r2
 8004662:	d107      	bne.n	8004674 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	492e      	ldr	r1, [pc, #184]	@ (8004728 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004670:	400a      	ands	r2, r1
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800467c:	4013      	ands	r3, r2
 800467e:	d10d      	bne.n	800469c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a27      	ldr	r2, [pc, #156]	@ (8004724 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004688:	4013      	ands	r3, r2
 800468a:	d107      	bne.n	800469c <HAL_TIM_PWM_Stop_DMA+0x144>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <HAL_TIM_PWM_Stop_DMA+0x154>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	223e      	movs	r2, #62	@ 0x3e
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	e023      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d104      	bne.n	80046bc <HAL_TIM_PWM_Stop_DMA+0x164>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223f      	movs	r2, #63	@ 0x3f
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	e01b      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d104      	bne.n	80046cc <HAL_TIM_PWM_Stop_DMA+0x174>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2240      	movs	r2, #64	@ 0x40
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	e013      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d104      	bne.n	80046dc <HAL_TIM_PWM_Stop_DMA+0x184>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2241      	movs	r2, #65	@ 0x41
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]
 80046da:	e00b      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d104      	bne.n	80046ec <HAL_TIM_PWM_Stop_DMA+0x194>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2242      	movs	r2, #66	@ 0x42
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]
 80046ea:	e003      	b.n	80046f4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2243      	movs	r2, #67	@ 0x43
 80046f0:	2101      	movs	r1, #1
 80046f2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80046f4:	230f      	movs	r3, #15
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	781b      	ldrb	r3, [r3, #0]
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b004      	add	sp, #16
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	fffffdff 	.word	0xfffffdff
 8004708:	fffffbff 	.word	0xfffffbff
 800470c:	fffff7ff 	.word	0xfffff7ff
 8004710:	ffffefff 	.word	0xffffefff
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800
 8004720:	00001111 	.word	0x00001111
 8004724:	00000444 	.word	0x00000444
 8004728:	ffff7fff 	.word	0xffff7fff

0800472c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2317      	movs	r3, #23
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	223c      	movs	r2, #60	@ 0x3c
 8004744:	5c9b      	ldrb	r3, [r3, r2]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_TIM_PWM_ConfigChannel+0x22>
 800474a:	2302      	movs	r3, #2
 800474c:	e0e5      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	223c      	movs	r2, #60	@ 0x3c
 8004752:	2101      	movs	r1, #1
 8004754:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b14      	cmp	r3, #20
 800475a:	d900      	bls.n	800475e <HAL_TIM_PWM_ConfigChannel+0x32>
 800475c:	e0d1      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	009a      	lsls	r2, r3, #2
 8004762:	4b70      	ldr	r3, [pc, #448]	@ (8004924 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004764:	18d3      	adds	r3, r2, r3
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f000 fb06 	bl	8004d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2108      	movs	r1, #8
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2104      	movs	r1, #4
 8004794:	438a      	bics	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e0af      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	0011      	movs	r1, r2
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fb65 	bl	8004e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2180      	movs	r1, #128	@ 0x80
 80047c6:	0109      	lsls	r1, r1, #4
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4954      	ldr	r1, [pc, #336]	@ (8004928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047d8:	400a      	ands	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6999      	ldr	r1, [r3, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	021a      	lsls	r2, r3, #8
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	619a      	str	r2, [r3, #24]
      break;
 80047f0:	e08c      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fbc0 	bl	8004f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2108      	movs	r1, #8
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2104      	movs	r1, #4
 800481c:	438a      	bics	r2, r1
 800481e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69d9      	ldr	r1, [r3, #28]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	61da      	str	r2, [r3, #28]
      break;
 8004832:	e06b      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0011      	movs	r1, r2
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fc21 	bl	8005084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2180      	movs	r1, #128	@ 0x80
 800484e:	0109      	lsls	r1, r1, #4
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4932      	ldr	r1, [pc, #200]	@ (8004928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004860:	400a      	ands	r2, r1
 8004862:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69d9      	ldr	r1, [r3, #28]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
      break;
 8004878:	e048      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0011      	movs	r1, r2
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fc62 	bl	800514c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2108      	movs	r1, #8
 8004894:	430a      	orrs	r2, r1
 8004896:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048ba:	e027      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fc9b 	bl	8005200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2180      	movs	r1, #128	@ 0x80
 80048d6:	0109      	lsls	r1, r1, #4
 80048d8:	430a      	orrs	r2, r1
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4910      	ldr	r1, [pc, #64]	@ (8004928 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004900:	e004      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004902:	2317      	movs	r3, #23
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
      break;
 800490a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	223c      	movs	r2, #60	@ 0x3c
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]

  return status;
 8004914:	2317      	movs	r3, #23
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	781b      	ldrb	r3, [r3, #0]
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b006      	add	sp, #24
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	080074ec 	.word	0x080074ec
 8004928:	fffffbff 	.word	0xfffffbff

0800492c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	230f      	movs	r3, #15
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	223c      	movs	r2, #60	@ 0x3c
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x20>
 8004948:	2302      	movs	r3, #2
 800494a:	e0bc      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x19a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	223c      	movs	r2, #60	@ 0x3c
 8004950:	2101      	movs	r1, #1
 8004952:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	223d      	movs	r2, #61	@ 0x3d
 8004958:	2102      	movs	r1, #2
 800495a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4a59      	ldr	r2, [pc, #356]	@ (8004ad4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2280      	movs	r2, #128	@ 0x80
 8004982:	0192      	lsls	r2, r2, #6
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xde>
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	0192      	lsls	r2, r2, #6
 800498c:	4293      	cmp	r3, r2
 800498e:	d900      	bls.n	8004992 <HAL_TIM_ConfigClockSource+0x66>
 8004990:	e088      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 8004992:	2280      	movs	r2, #128	@ 0x80
 8004994:	0152      	lsls	r2, r2, #5
 8004996:	4293      	cmp	r3, r2
 8004998:	d100      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x70>
 800499a:	e088      	b.n	8004aae <HAL_TIM_ConfigClockSource+0x182>
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	0152      	lsls	r2, r2, #5
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d900      	bls.n	80049a6 <HAL_TIM_ConfigClockSource+0x7a>
 80049a4:	e07e      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049a6:	2b70      	cmp	r3, #112	@ 0x70
 80049a8:	d018      	beq.n	80049dc <HAL_TIM_ConfigClockSource+0xb0>
 80049aa:	d900      	bls.n	80049ae <HAL_TIM_ConfigClockSource+0x82>
 80049ac:	e07a      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049ae:	2b60      	cmp	r3, #96	@ 0x60
 80049b0:	d04f      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x126>
 80049b2:	d900      	bls.n	80049b6 <HAL_TIM_ConfigClockSource+0x8a>
 80049b4:	e076      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049b6:	2b50      	cmp	r3, #80	@ 0x50
 80049b8:	d03b      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x106>
 80049ba:	d900      	bls.n	80049be <HAL_TIM_ConfigClockSource+0x92>
 80049bc:	e072      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d057      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x146>
 80049c2:	d900      	bls.n	80049c6 <HAL_TIM_ConfigClockSource+0x9a>
 80049c4:	e06e      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049c6:	2b30      	cmp	r3, #48	@ 0x30
 80049c8:	d063      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x166>
 80049ca:	d86b      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d060      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x166>
 80049d0:	d868      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d05d      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x166>
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d05b      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x166>
 80049da:	e063      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ec:	f000 fce2 	bl	80053b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2277      	movs	r2, #119	@ 0x77
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]
      break;
 8004a08:	e052      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	f000 fccb 	bl	80053b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	01c9      	lsls	r1, r1, #7
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
      break;
 8004a30:	e03e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	001a      	movs	r2, r3
 8004a40:	f000 fc3c 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2150      	movs	r1, #80	@ 0x50
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fc96 	bl	800537c <TIM_ITRx_SetConfig>
      break;
 8004a50:	e02e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	001a      	movs	r2, r3
 8004a60:	f000 fc5a 	bl	8005318 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2160      	movs	r1, #96	@ 0x60
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fc86 	bl	800537c <TIM_ITRx_SetConfig>
      break;
 8004a70:	e01e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	001a      	movs	r2, r3
 8004a80:	f000 fc1c 	bl	80052bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2140      	movs	r1, #64	@ 0x40
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fc76 	bl	800537c <TIM_ITRx_SetConfig>
      break;
 8004a90:	e00e      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	f000 fc6d 	bl	800537c <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e005      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004aae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	223d      	movs	r2, #61	@ 0x3d
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	223c      	movs	r2, #60	@ 0x3c
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

  return status;
 8004ac0:	230f      	movs	r3, #15
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	781b      	ldrb	r3, [r3, #0]
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	ffceff88 	.word	0xffceff88
 8004ad4:	ffff00ff 	.word	0xffff00ff

08004ad8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004af0:	46c0      	nop			@ (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	223e      	movs	r2, #62	@ 0x3e
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	5499      	strb	r1, [r3, r2]
 8004b1e:	e02a      	b.n	8004b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d107      	bne.n	8004b3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	223f      	movs	r2, #63	@ 0x3f
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]
 8004b38:	e01d      	b.n	8004b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2204      	movs	r2, #4
 8004b48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2240      	movs	r2, #64	@ 0x40
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]
 8004b52:	e010      	b.n	8004b76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d107      	bne.n	8004b6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2208      	movs	r2, #8
 8004b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2241      	movs	r2, #65	@ 0x41
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]
 8004b6c:	e003      	b.n	8004b76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	223d      	movs	r2, #61	@ 0x3d
 8004b72:	2101      	movs	r1, #1
 8004b74:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7ff ffb5 	bl	8004ae8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
}
 8004b84:	46c0      	nop			@ (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d10b      	bne.n	8004bbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d136      	bne.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	223e      	movs	r2, #62	@ 0x3e
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]
 8004bba:	e031      	b.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10b      	bne.n	8004bde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d125      	bne.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	223f      	movs	r2, #63	@ 0x3f
 8004bd8:	2101      	movs	r1, #1
 8004bda:	5499      	strb	r1, [r3, r2]
 8004bdc:	e020      	b.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d10b      	bne.n	8004c00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2204      	movs	r2, #4
 8004bec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d114      	bne.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2240      	movs	r2, #64	@ 0x40
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]
 8004bfe:	e00f      	b.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10a      	bne.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2241      	movs	r2, #65	@ 0x41
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7fd feda 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	771a      	strb	r2, [r3, #28]
}
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d103      	bne.n	8004c56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	771a      	strb	r2, [r3, #28]
 8004c54:	e019      	b.n	8004c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d103      	bne.n	8004c68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2202      	movs	r2, #2
 8004c64:	771a      	strb	r2, [r3, #28]
 8004c66:	e010      	b.n	8004c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d103      	bne.n	8004c7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
 8004c78:	e007      	b.n	8004c8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d102      	bne.n	8004c8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2208      	movs	r2, #8
 8004c88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff ff23 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
}
 8004c98:	46c0      	nop			@ (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b004      	add	sp, #16
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d6c <TIM_Base_SetConfig+0xcc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0x20>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a2d      	ldr	r2, [pc, #180]	@ (8004d70 <TIM_Base_SetConfig+0xd0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d108      	bne.n	8004cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2270      	movs	r2, #112	@ 0x70
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <TIM_Base_SetConfig+0xcc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_Base_SetConfig+0x5a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	@ (8004d70 <TIM_Base_SetConfig+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0x5a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	@ (8004d74 <TIM_Base_SetConfig+0xd4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0x5a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a22      	ldr	r2, [pc, #136]	@ (8004d78 <TIM_Base_SetConfig+0xd8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0x5a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a21      	ldr	r2, [pc, #132]	@ (8004d7c <TIM_Base_SetConfig+0xdc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <TIM_Base_SetConfig+0xe0>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2280      	movs	r2, #128	@ 0x80
 8004d10:	4393      	bics	r3, r2
 8004d12:	001a      	movs	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d6c <TIM_Base_SetConfig+0xcc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0xa4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a10      	ldr	r2, [pc, #64]	@ (8004d78 <TIM_Base_SetConfig+0xd8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0xa4>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d7c <TIM_Base_SetConfig+0xdc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2204      	movs	r2, #4
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40002000 	.word	0x40002000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800
 8004d80:	fffffcff 	.word	0xfffffcff

08004d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <TIM_OC1_SetConfig+0xe8>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2203      	movs	r2, #3
 8004dba:	4393      	bics	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4393      	bics	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	@ (8004e70 <TIM_OC1_SetConfig+0xec>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_OC1_SetConfig+0x6e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a23      	ldr	r2, [pc, #140]	@ (8004e74 <TIM_OC1_SetConfig+0xf0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_OC1_SetConfig+0x6e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <TIM_OC1_SetConfig+0xf4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10c      	bne.n	8004e0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2208      	movs	r2, #8
 8004df6:	4393      	bics	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4393      	bics	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <TIM_OC1_SetConfig+0xec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_OC1_SetConfig+0xa0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <TIM_OC1_SetConfig+0xf0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC1_SetConfig+0xa0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <TIM_OC1_SetConfig+0xf4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <TIM_OC1_SetConfig+0xf8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4a14      	ldr	r2, [pc, #80]	@ (8004e80 <TIM_OC1_SetConfig+0xfc>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b006      	add	sp, #24
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	fffeff8f 	.word	0xfffeff8f
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800
 8004e7c:	fffffeff 	.word	0xfffffeff
 8004e80:	fffffdff 	.word	0xfffffdff

08004e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	2210      	movs	r2, #16
 8004e9a:	4393      	bics	r3, r2
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f64 <TIM_OC2_SetConfig+0xe0>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f68 <TIM_OC2_SetConfig+0xe4>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	4393      	bics	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	@ (8004f6c <TIM_OC2_SetConfig+0xe8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10d      	bne.n	8004f02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2280      	movs	r2, #128	@ 0x80
 8004eea:	4393      	bics	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2240      	movs	r2, #64	@ 0x40
 8004efe:	4393      	bics	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <TIM_OC2_SetConfig+0xe8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC2_SetConfig+0x96>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	@ (8004f70 <TIM_OC2_SetConfig+0xec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC2_SetConfig+0x96>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <TIM_OC2_SetConfig+0xf0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d113      	bne.n	8004f42 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	@ (8004f78 <TIM_OC2_SetConfig+0xf4>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <TIM_OC2_SetConfig+0xf8>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	46c0      	nop			@ (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b006      	add	sp, #24
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	feff8fff 	.word	0xfeff8fff
 8004f68:	fffffcff 	.word	0xfffffcff
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800
 8004f78:	fffffbff 	.word	0xfffffbff
 8004f7c:	fffff7ff 	.word	0xfffff7ff

08004f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	4a31      	ldr	r2, [pc, #196]	@ (800505c <TIM_OC3_SetConfig+0xdc>)
 8004f96:	401a      	ands	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <TIM_OC3_SetConfig+0xe0>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <TIM_OC3_SetConfig+0xe4>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a23      	ldr	r2, [pc, #140]	@ (8005068 <TIM_OC3_SetConfig+0xe8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10d      	bne.n	8004ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4a22      	ldr	r2, [pc, #136]	@ (800506c <TIM_OC3_SetConfig+0xec>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8005070 <TIM_OC3_SetConfig+0xf0>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8005068 <TIM_OC3_SetConfig+0xe8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_OC3_SetConfig+0x92>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1b      	ldr	r2, [pc, #108]	@ (8005074 <TIM_OC3_SetConfig+0xf4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x92>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1a      	ldr	r2, [pc, #104]	@ (8005078 <TIM_OC3_SetConfig+0xf8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d113      	bne.n	800503a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4a19      	ldr	r2, [pc, #100]	@ (800507c <TIM_OC3_SetConfig+0xfc>)
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4a18      	ldr	r2, [pc, #96]	@ (8005080 <TIM_OC3_SetConfig+0x100>)
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	46c0      	nop			@ (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b006      	add	sp, #24
 800505a:	bd80      	pop	{r7, pc}
 800505c:	fffffeff 	.word	0xfffffeff
 8005060:	fffeff8f 	.word	0xfffeff8f
 8005064:	fffffdff 	.word	0xfffffdff
 8005068:	40012c00 	.word	0x40012c00
 800506c:	fffff7ff 	.word	0xfffff7ff
 8005070:	fffffbff 	.word	0xfffffbff
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800
 800507c:	ffffefff 	.word	0xffffefff
 8005080:	ffffdfff 	.word	0xffffdfff

08005084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a24      	ldr	r2, [pc, #144]	@ (800512c <TIM_OC4_SetConfig+0xa8>)
 800509a:	401a      	ands	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a20      	ldr	r2, [pc, #128]	@ (8005130 <TIM_OC4_SetConfig+0xac>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005134 <TIM_OC4_SetConfig+0xb0>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <TIM_OC4_SetConfig+0xb4>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <TIM_OC4_SetConfig+0xb8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC4_SetConfig+0x70>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <TIM_OC4_SetConfig+0xbc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC4_SetConfig+0x70>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <TIM_OC4_SetConfig+0xc0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <TIM_OC4_SetConfig+0xc4>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	ffffefff 	.word	0xffffefff
 8005130:	feff8fff 	.word	0xfeff8fff
 8005134:	fffffcff 	.word	0xfffffcff
 8005138:	ffffdfff 	.word	0xffffdfff
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	ffffbfff 	.word	0xffffbfff

0800514c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4a21      	ldr	r2, [pc, #132]	@ (80051e8 <TIM_OC5_SetConfig+0x9c>)
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a1d      	ldr	r2, [pc, #116]	@ (80051ec <TIM_OC5_SetConfig+0xa0>)
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <TIM_OC5_SetConfig+0xa4>)
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <TIM_OC5_SetConfig+0xa8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC5_SetConfig+0x66>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <TIM_OC5_SetConfig+0xac>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC5_SetConfig+0x66>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <TIM_OC5_SetConfig+0xb0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d109      	bne.n	80051c6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4a0c      	ldr	r2, [pc, #48]	@ (80051e8 <TIM_OC5_SetConfig+0x9c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffeffff 	.word	0xfffeffff
 80051ec:	fffeff8f 	.word	0xfffeff8f
 80051f0:	fffdffff 	.word	0xfffdffff
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	4a22      	ldr	r2, [pc, #136]	@ (80052a0 <TIM_OC6_SetConfig+0xa0>)
 8005216:	401a      	ands	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <TIM_OC6_SetConfig+0xa4>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <TIM_OC6_SetConfig+0xa8>)
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	@ (80052ac <TIM_OC6_SetConfig+0xac>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC6_SetConfig+0x68>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <TIM_OC6_SetConfig+0xb0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC6_SetConfig+0x68>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <TIM_OC6_SetConfig+0xb4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d109      	bne.n	800527c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <TIM_OC6_SetConfig+0xb8>)
 800526c:	4013      	ands	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	029b      	lsls	r3, r3, #10
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b006      	add	sp, #24
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	ffefffff 	.word	0xffefffff
 80052a4:	feff8fff 	.word	0xfeff8fff
 80052a8:	ffdfffff 	.word	0xffdfffff
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800
 80052b8:	fffbffff 	.word	0xfffbffff

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4393      	bics	r3, r2
 80052d6:	001a      	movs	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	22f0      	movs	r2, #240	@ 0xf0
 80052e6:	4393      	bics	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	220a      	movs	r2, #10
 80052f8:	4393      	bics	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	46c0      	nop			@ (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b006      	add	sp, #24
 8005316:	bd80      	pop	{r7, pc}

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	2210      	movs	r2, #16
 8005330:	4393      	bics	r3, r2
 8005332:	001a      	movs	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a0d      	ldr	r2, [pc, #52]	@ (8005378 <TIM_TI2_ConfigInputStage+0x60>)
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	22a0      	movs	r2, #160	@ 0xa0
 8005354:	4393      	bics	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b006      	add	sp, #24
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	ffff0fff 	.word	0xffff0fff

0800537c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <TIM_ITRx_SetConfig+0x34>)
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	2207      	movs	r2, #7
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	609a      	str	r2, [r3, #8]
}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	ffcfff8f 	.word	0xffcfff8f

080053b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <TIM_ETR_SetConfig+0x3c>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b006      	add	sp, #24
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	ffff00ff 	.word	0xffff00ff

080053f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	221f      	movs	r2, #31
 8005404:	4013      	ands	r3, r2
 8005406:	2201      	movs	r2, #1
 8005408:	409a      	lsls	r2, r3
 800540a:	0013      	movs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	43d2      	mvns	r2, r2
 8005416:	401a      	ands	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	211f      	movs	r1, #31
 8005424:	400b      	ands	r3, r1
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4099      	lsls	r1, r3
 800542a:	000b      	movs	r3, r1
 800542c:	431a      	orrs	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b006      	add	sp, #24
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	223c      	movs	r2, #60	@ 0x3c
 800544a:	5c9b      	ldrb	r3, [r3, r2]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e04a      	b.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	223c      	movs	r2, #60	@ 0x3c
 8005458:	2101      	movs	r1, #1
 800545a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223d      	movs	r2, #61	@ 0x3d
 8005460:	2102      	movs	r1, #2
 8005462:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a1d      	ldr	r2, [pc, #116]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2270      	movs	r2, #112	@ 0x70
 8005494:	4393      	bics	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a11      	ldr	r2, [pc, #68]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a10      	ldr	r2, [pc, #64]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10c      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2280      	movs	r2, #128	@ 0x80
 80054c2:	4393      	bics	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	223d      	movs	r2, #61	@ 0x3d
 80054dc:	2101      	movs	r1, #1
 80054de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	223c      	movs	r2, #60	@ 0x3c
 80054e4:	2100      	movs	r1, #0
 80054e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b004      	add	sp, #16
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	ff0fffff 	.word	0xff0fffff
 80054fc:	40000400 	.word	0x40000400

08005500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e046      	b.n	80055a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2288      	movs	r2, #136	@ 0x88
 8005516:	589b      	ldr	r3, [r3, r2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2284      	movs	r2, #132	@ 0x84
 8005520:	2100      	movs	r1, #0
 8005522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	0018      	movs	r0, r3
 8005528:	f7fc ff0e 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2288      	movs	r2, #136	@ 0x88
 8005530:	2124      	movs	r1, #36	@ 0x24
 8005532:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2101      	movs	r1, #1
 8005540:	438a      	bics	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fd64 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 fbe2 	bl	8005d20 <UART_SetConfig>
 800555c:	0003      	movs	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e01c      	b.n	80055a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	490d      	ldr	r1, [pc, #52]	@ (80055a8 <HAL_UART_Init+0xa8>)
 8005572:	400a      	ands	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	212a      	movs	r1, #42	@ 0x2a
 8005582:	438a      	bics	r2, r1
 8005584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f000 fdf3 	bl	8006184 <UART_CheckIdleState>
 800559e:	0003      	movs	r3, r0
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	ffffb7ff 	.word	0xffffb7ff

080055ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	1dbb      	adds	r3, r7, #6
 80055b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	228c      	movs	r2, #140	@ 0x8c
 80055be:	589b      	ldr	r3, [r3, r2]
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d145      	bne.n	8005650 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_UART_Receive_IT+0x26>
 80055ca:	1dbb      	adds	r3, r7, #6
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e03d      	b.n	8005652 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	2380      	movs	r3, #128	@ 0x80
 80055dc:	015b      	lsls	r3, r3, #5
 80055de:	429a      	cmp	r2, r3
 80055e0:	d109      	bne.n	80055f6 <HAL_UART_Receive_IT+0x4a>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2201      	movs	r2, #1
 80055ee:	4013      	ands	r3, r2
 80055f0:	d001      	beq.n	80055f6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e02d      	b.n	8005652 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	2380      	movs	r3, #128	@ 0x80
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	4013      	ands	r3, r2
 8005608:	d019      	beq.n	800563e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800560a:	f3ef 8310 	mrs	r3, PRIMASK
 800560e:	613b      	str	r3, [r7, #16]
  return(result);
 8005610:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f383 8810 	msr	PRIMASK, r3
}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2180      	movs	r1, #128	@ 0x80
 800562c:	04c9      	lsls	r1, r1, #19
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f383 8810 	msr	PRIMASK, r3
}
 800563c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800563e:	1dbb      	adds	r3, r7, #6
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0018      	movs	r0, r3
 8005648:	f000 feb6 	bl	80063b8 <UART_Start_Receive_IT>
 800564c:	0003      	movs	r3, r0
 800564e:	e000      	b.n	8005652 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
  }
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	b008      	add	sp, #32
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800565c:	b5b0      	push	{r4, r5, r7, lr}
 800565e:	b0aa      	sub	sp, #168	@ 0xa8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	22a4      	movs	r2, #164	@ 0xa4
 800566c:	18b9      	adds	r1, r7, r2
 800566e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	20a0      	movs	r0, #160	@ 0xa0
 8005678:	1839      	adds	r1, r7, r0
 800567a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	249c      	movs	r4, #156	@ 0x9c
 8005684:	1939      	adds	r1, r7, r4
 8005686:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005688:	0011      	movs	r1, r2
 800568a:	18bb      	adds	r3, r7, r2
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4aa2      	ldr	r2, [pc, #648]	@ (8005918 <HAL_UART_IRQHandler+0x2bc>)
 8005690:	4013      	ands	r3, r2
 8005692:	2298      	movs	r2, #152	@ 0x98
 8005694:	18bd      	adds	r5, r7, r2
 8005696:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005698:	18bb      	adds	r3, r7, r2
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11a      	bne.n	80056d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2220      	movs	r2, #32
 80056a6:	4013      	ands	r3, r2
 80056a8:	d015      	beq.n	80056d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2220      	movs	r2, #32
 80056b0:	4013      	ands	r3, r2
 80056b2:	d105      	bne.n	80056c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056b4:	193b      	adds	r3, r7, r4
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	055b      	lsls	r3, r3, #21
 80056bc:	4013      	ands	r3, r2
 80056be:	d00a      	beq.n	80056d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d100      	bne.n	80056ca <HAL_UART_IRQHandler+0x6e>
 80056c8:	e2fb      	b.n	8005cc2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	0010      	movs	r0, r2
 80056d2:	4798      	blx	r3
      }
      return;
 80056d4:	e2f5      	b.n	8005cc2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056d6:	2398      	movs	r3, #152	@ 0x98
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d100      	bne.n	80056e2 <HAL_UART_IRQHandler+0x86>
 80056e0:	e122      	b.n	8005928 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056e2:	239c      	movs	r3, #156	@ 0x9c
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a8c      	ldr	r2, [pc, #560]	@ (800591c <HAL_UART_IRQHandler+0x2c0>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	d106      	bne.n	80056fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056ee:	23a0      	movs	r3, #160	@ 0xa0
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a8a      	ldr	r2, [pc, #552]	@ (8005920 <HAL_UART_IRQHandler+0x2c4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	d100      	bne.n	80056fc <HAL_UART_IRQHandler+0xa0>
 80056fa:	e115      	b.n	8005928 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fc:	23a4      	movs	r3, #164	@ 0xa4
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	4013      	ands	r3, r2
 8005706:	d012      	beq.n	800572e <HAL_UART_IRQHandler+0xd2>
 8005708:	23a0      	movs	r3, #160	@ 0xa0
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4013      	ands	r3, r2
 8005714:	d00b      	beq.n	800572e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2201      	movs	r2, #1
 800571c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2290      	movs	r2, #144	@ 0x90
 8005722:	589b      	ldr	r3, [r3, r2]
 8005724:	2201      	movs	r2, #1
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2190      	movs	r1, #144	@ 0x90
 800572c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572e:	23a4      	movs	r3, #164	@ 0xa4
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2202      	movs	r2, #2
 8005736:	4013      	ands	r3, r2
 8005738:	d011      	beq.n	800575e <HAL_UART_IRQHandler+0x102>
 800573a:	239c      	movs	r3, #156	@ 0x9c
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	4013      	ands	r3, r2
 8005744:	d00b      	beq.n	800575e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2202      	movs	r2, #2
 800574c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2290      	movs	r2, #144	@ 0x90
 8005752:	589b      	ldr	r3, [r3, r2]
 8005754:	2204      	movs	r2, #4
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2190      	movs	r1, #144	@ 0x90
 800575c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575e:	23a4      	movs	r3, #164	@ 0xa4
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2204      	movs	r2, #4
 8005766:	4013      	ands	r3, r2
 8005768:	d011      	beq.n	800578e <HAL_UART_IRQHandler+0x132>
 800576a:	239c      	movs	r3, #156	@ 0x9c
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	4013      	ands	r3, r2
 8005774:	d00b      	beq.n	800578e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2204      	movs	r2, #4
 800577c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2290      	movs	r2, #144	@ 0x90
 8005782:	589b      	ldr	r3, [r3, r2]
 8005784:	2202      	movs	r2, #2
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2190      	movs	r1, #144	@ 0x90
 800578c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800578e:	23a4      	movs	r3, #164	@ 0xa4
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2208      	movs	r2, #8
 8005796:	4013      	ands	r3, r2
 8005798:	d017      	beq.n	80057ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800579a:	23a0      	movs	r3, #160	@ 0xa0
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2220      	movs	r2, #32
 80057a2:	4013      	ands	r3, r2
 80057a4:	d105      	bne.n	80057b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057a6:	239c      	movs	r3, #156	@ 0x9c
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5b      	ldr	r2, [pc, #364]	@ (800591c <HAL_UART_IRQHandler+0x2c0>)
 80057ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057b0:	d00b      	beq.n	80057ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2208      	movs	r2, #8
 80057b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2290      	movs	r2, #144	@ 0x90
 80057be:	589b      	ldr	r3, [r3, r2]
 80057c0:	2208      	movs	r2, #8
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2190      	movs	r1, #144	@ 0x90
 80057c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057ca:	23a4      	movs	r3, #164	@ 0xa4
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	4013      	ands	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_UART_IRQHandler+0x1a4>
 80057d8:	23a0      	movs	r3, #160	@ 0xa0
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	04db      	lsls	r3, r3, #19
 80057e2:	4013      	ands	r3, r2
 80057e4:	d00c      	beq.n	8005800 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2280      	movs	r2, #128	@ 0x80
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2290      	movs	r2, #144	@ 0x90
 80057f4:	589b      	ldr	r3, [r3, r2]
 80057f6:	2220      	movs	r2, #32
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2190      	movs	r1, #144	@ 0x90
 80057fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2290      	movs	r2, #144	@ 0x90
 8005804:	589b      	ldr	r3, [r3, r2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d100      	bne.n	800580c <HAL_UART_IRQHandler+0x1b0>
 800580a:	e25c      	b.n	8005cc6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800580c:	23a4      	movs	r3, #164	@ 0xa4
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2220      	movs	r2, #32
 8005814:	4013      	ands	r3, r2
 8005816:	d015      	beq.n	8005844 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005818:	23a0      	movs	r3, #160	@ 0xa0
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2220      	movs	r2, #32
 8005820:	4013      	ands	r3, r2
 8005822:	d106      	bne.n	8005832 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005824:	239c      	movs	r3, #156	@ 0x9c
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	055b      	lsls	r3, r3, #21
 800582e:	4013      	ands	r3, r2
 8005830:	d008      	beq.n	8005844 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	0010      	movs	r0, r2
 8005842:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2290      	movs	r2, #144	@ 0x90
 8005848:	589b      	ldr	r3, [r3, r2]
 800584a:	2194      	movs	r1, #148	@ 0x94
 800584c:	187a      	adds	r2, r7, r1
 800584e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2240      	movs	r2, #64	@ 0x40
 8005858:	4013      	ands	r3, r2
 800585a:	2b40      	cmp	r3, #64	@ 0x40
 800585c:	d004      	beq.n	8005868 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800585e:	187b      	adds	r3, r7, r1
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2228      	movs	r2, #40	@ 0x28
 8005864:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005866:	d04c      	beq.n	8005902 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	0018      	movs	r0, r3
 800586c:	f000 fec8 	bl	8006600 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2240      	movs	r2, #64	@ 0x40
 8005878:	4013      	ands	r3, r2
 800587a:	2b40      	cmp	r3, #64	@ 0x40
 800587c:	d13c      	bne.n	80058f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800587e:	f3ef 8310 	mrs	r3, PRIMASK
 8005882:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005886:	2090      	movs	r0, #144	@ 0x90
 8005888:	183a      	adds	r2, r7, r0
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	2301      	movs	r3, #1
 800588e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005892:	f383 8810 	msr	PRIMASK, r3
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2140      	movs	r1, #64	@ 0x40
 80058a4:	438a      	bics	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	183b      	adds	r3, r7, r0
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2280      	movs	r2, #128	@ 0x80
 80058ba:	589b      	ldr	r3, [r3, r2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	589b      	ldr	r3, [r3, r2]
 80058c6:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <HAL_UART_IRQHandler+0x2c8>)
 80058c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2280      	movs	r2, #128	@ 0x80
 80058ce:	589b      	ldr	r3, [r3, r2]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7fd fbc3 	bl	800305c <HAL_DMA_Abort_IT>
 80058d6:	1e03      	subs	r3, r0, #0
 80058d8:	d01c      	beq.n	8005914 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2280      	movs	r2, #128	@ 0x80
 80058de:	589b      	ldr	r3, [r3, r2]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	2180      	movs	r1, #128	@ 0x80
 80058e6:	5852      	ldr	r2, [r2, r1]
 80058e8:	0010      	movs	r0, r2
 80058ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	e012      	b.n	8005914 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 fa01 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	e00d      	b.n	8005914 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 f9fc 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e008      	b.n	8005914 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0018      	movs	r0, r3
 8005906:	f000 f9f7 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2290      	movs	r2, #144	@ 0x90
 800590e:	2100      	movs	r1, #0
 8005910:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005912:	e1d8      	b.n	8005cc6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	46c0      	nop			@ (mov r8, r8)
    return;
 8005916:	e1d6      	b.n	8005cc6 <HAL_UART_IRQHandler+0x66a>
 8005918:	0000080f 	.word	0x0000080f
 800591c:	10000001 	.word	0x10000001
 8005920:	04000120 	.word	0x04000120
 8005924:	080066cd 	.word	0x080066cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d000      	beq.n	8005932 <HAL_UART_IRQHandler+0x2d6>
 8005930:	e15d      	b.n	8005bee <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005932:	23a4      	movs	r3, #164	@ 0xa4
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	4013      	ands	r3, r2
 800593c:	d100      	bne.n	8005940 <HAL_UART_IRQHandler+0x2e4>
 800593e:	e156      	b.n	8005bee <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005940:	23a0      	movs	r3, #160	@ 0xa0
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2210      	movs	r2, #16
 8005948:	4013      	ands	r3, r2
 800594a:	d100      	bne.n	800594e <HAL_UART_IRQHandler+0x2f2>
 800594c:	e14f      	b.n	8005bee <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2210      	movs	r2, #16
 8005954:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2240      	movs	r2, #64	@ 0x40
 800595e:	4013      	ands	r3, r2
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d000      	beq.n	8005966 <HAL_UART_IRQHandler+0x30a>
 8005964:	e0c3      	b.n	8005aee <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2280      	movs	r2, #128	@ 0x80
 800596a:	589b      	ldr	r3, [r3, r2]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	217e      	movs	r1, #126	@ 0x7e
 8005972:	187b      	adds	r3, r7, r1
 8005974:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005976:	187b      	adds	r3, r7, r1
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d100      	bne.n	8005980 <HAL_UART_IRQHandler+0x324>
 800597e:	e097      	b.n	8005ab0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	225c      	movs	r2, #92	@ 0x5c
 8005984:	5a9b      	ldrh	r3, [r3, r2]
 8005986:	187a      	adds	r2, r7, r1
 8005988:	8812      	ldrh	r2, [r2, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d300      	bcc.n	8005990 <HAL_UART_IRQHandler+0x334>
 800598e:	e08f      	b.n	8005ab0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	187a      	adds	r2, r7, r1
 8005994:	215e      	movs	r1, #94	@ 0x5e
 8005996:	8812      	ldrh	r2, [r2, #0]
 8005998:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2280      	movs	r2, #128	@ 0x80
 800599e:	589b      	ldr	r3, [r3, r2]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2220      	movs	r2, #32
 80059a6:	4013      	ands	r3, r2
 80059a8:	d170      	bne.n	8005a8c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059aa:	f3ef 8310 	mrs	r3, PRIMASK
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b4:	2301      	movs	r3, #1
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	49c4      	ldr	r1, [pc, #784]	@ (8005cdc <HAL_UART_IRQHandler+0x680>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059dc:	f3ef 8310 	mrs	r3, PRIMASK
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80059e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80059e6:	2301      	movs	r3, #1
 80059e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			@ (mov r8, r8)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2101      	movs	r1, #1
 80059fe:	438a      	bics	r2, r1
 8005a00:	609a      	str	r2, [r3, #8]
 8005a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a04:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a08:	f383 8810 	msr	PRIMASK, r3
}
 8005a0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a18:	2301      	movs	r3, #1
 8005a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2140      	movs	r1, #64	@ 0x40
 8005a30:	438a      	bics	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a36:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	228c      	movs	r2, #140	@ 0x8c
 8005a44:	2120      	movs	r1, #32
 8005a46:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a52:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a58:	2301      	movs	r3, #1
 8005a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2110      	movs	r1, #16
 8005a70:	438a      	bics	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7a:	f383 8810 	msr	PRIMASK, r3
}
 8005a7e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2280      	movs	r2, #128	@ 0x80
 8005a84:	589b      	ldr	r3, [r3, r2]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7fd fa86 	bl	8002f98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	225c      	movs	r2, #92	@ 0x5c
 8005a96:	5a9a      	ldrh	r2, [r3, r2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	215e      	movs	r1, #94	@ 0x5e
 8005a9c:	5a5b      	ldrh	r3, [r3, r1]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 f92d 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005aae:	e10c      	b.n	8005cca <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	225c      	movs	r2, #92	@ 0x5c
 8005ab4:	5a9b      	ldrh	r3, [r3, r2]
 8005ab6:	227e      	movs	r2, #126	@ 0x7e
 8005ab8:	18ba      	adds	r2, r7, r2
 8005aba:	8812      	ldrh	r2, [r2, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d000      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x466>
 8005ac0:	e103      	b.n	8005cca <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	589b      	ldr	r3, [r3, r2]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2220      	movs	r2, #32
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d000      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x47a>
 8005ad4:	e0f9      	b.n	8005cca <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	225c      	movs	r2, #92	@ 0x5c
 8005ae0:	5a9a      	ldrh	r2, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 f90e 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
      return;
 8005aec:	e0ed      	b.n	8005cca <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	225c      	movs	r2, #92	@ 0x5c
 8005af2:	5a99      	ldrh	r1, [r3, r2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	225e      	movs	r2, #94	@ 0x5e
 8005af8:	5a9b      	ldrh	r3, [r3, r2]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	208e      	movs	r0, #142	@ 0x8e
 8005afe:	183b      	adds	r3, r7, r0
 8005b00:	1a8a      	subs	r2, r1, r2
 8005b02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	225e      	movs	r2, #94	@ 0x5e
 8005b08:	5a9b      	ldrh	r3, [r3, r2]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d100      	bne.n	8005b12 <HAL_UART_IRQHandler+0x4b6>
 8005b10:	e0dd      	b.n	8005cce <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8005b12:	183b      	adds	r3, r7, r0
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d100      	bne.n	8005b1c <HAL_UART_IRQHandler+0x4c0>
 8005b1a:	e0d8      	b.n	8005cce <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b24:	2488      	movs	r4, #136	@ 0x88
 8005b26:	193a      	adds	r2, r7, r4
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f383 8810 	msr	PRIMASK, r3
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4967      	ldr	r1, [pc, #412]	@ (8005ce0 <HAL_UART_IRQHandler+0x684>)
 8005b42:	400a      	ands	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b54:	f3ef 8310 	mrs	r3, PRIMASK
 8005b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b5c:	2484      	movs	r4, #132	@ 0x84
 8005b5e:	193a      	adds	r2, r7, r4
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	2301      	movs	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			@ (mov r8, r8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	495a      	ldr	r1, [pc, #360]	@ (8005ce4 <HAL_UART_IRQHandler+0x688>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	228c      	movs	r2, #140	@ 0x8c
 8005b90:	2120      	movs	r1, #32
 8005b92:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	2480      	movs	r4, #128	@ 0x80
 8005baa:	193a      	adds	r2, r7, r4
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	f383 8810 	msr	PRIMASK, r3
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2110      	movs	r1, #16
 8005bc6:	438a      	bics	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	193b      	adds	r3, r7, r4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd2:	f383 8810 	msr	PRIMASK, r3
}
 8005bd6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bde:	183b      	adds	r3, r7, r0
 8005be0:	881a      	ldrh	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f88e 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bec:	e06f      	b.n	8005cce <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bee:	23a4      	movs	r3, #164	@ 0xa4
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	035b      	lsls	r3, r3, #13
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d010      	beq.n	8005c1e <HAL_UART_IRQHandler+0x5c2>
 8005bfc:	239c      	movs	r3, #156	@ 0x9c
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	2380      	movs	r3, #128	@ 0x80
 8005c04:	03db      	lsls	r3, r3, #15
 8005c06:	4013      	ands	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2280      	movs	r2, #128	@ 0x80
 8005c10:	0352      	lsls	r2, r2, #13
 8005c12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f001 fa90 	bl	800713c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c1c:	e05a      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c1e:	23a4      	movs	r3, #164	@ 0xa4
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2280      	movs	r2, #128	@ 0x80
 8005c26:	4013      	ands	r3, r2
 8005c28:	d016      	beq.n	8005c58 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c2a:	23a0      	movs	r3, #160	@ 0xa0
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2280      	movs	r2, #128	@ 0x80
 8005c32:	4013      	ands	r3, r2
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c36:	239c      	movs	r3, #156	@ 0x9c
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	4013      	ands	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d042      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	0010      	movs	r0, r2
 8005c54:	4798      	blx	r3
    }
    return;
 8005c56:	e03c      	b.n	8005cd2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c58:	23a4      	movs	r3, #164	@ 0xa4
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2240      	movs	r2, #64	@ 0x40
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00a      	beq.n	8005c7a <HAL_UART_IRQHandler+0x61e>
 8005c64:	23a0      	movs	r3, #160	@ 0xa0
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fd3d 	bl	80066f2 <UART_EndTransmit_IT>
    return;
 8005c78:	e02c      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c7a:	23a4      	movs	r3, #164	@ 0xa4
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	4013      	ands	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x644>
 8005c88:	23a0      	movs	r3, #160	@ 0xa0
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	05db      	lsls	r3, r3, #23
 8005c92:	4013      	ands	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f001 fa5f 	bl	800715c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c9e:	e019      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ca0:	23a4      	movs	r3, #164	@ 0xa4
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	2380      	movs	r3, #128	@ 0x80
 8005ca8:	045b      	lsls	r3, r3, #17
 8005caa:	4013      	ands	r3, r2
 8005cac:	d012      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x678>
 8005cae:	23a0      	movs	r3, #160	@ 0xa0
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da0d      	bge.n	8005cd4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f001 fa46 	bl	800714c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cc0:	e008      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
      return;
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	e006      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
    return;
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	e004      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
      return;
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	e002      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
      return;
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	e000      	b.n	8005cd4 <HAL_UART_IRQHandler+0x678>
    return;
 8005cd2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b02a      	add	sp, #168	@ 0xa8
 8005cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	fffffeff 	.word	0xfffffeff
 8005ce0:	fffffedf 	.word	0xfffffedf
 8005ce4:	effffffe 	.word	0xeffffffe

08005ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cf0:	46c0      	nop			@ (mov r8, r8)
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b002      	add	sp, #8
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	000a      	movs	r2, r1
 8005d12:	1cbb      	adds	r3, r7, #2
 8005d14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b002      	add	sp, #8
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d28:	231e      	movs	r3, #30
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4aab      	ldr	r2, [pc, #684]	@ (8005ffc <UART_SetConfig+0x2dc>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	0019      	movs	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4aa6      	ldr	r2, [pc, #664]	@ (8006000 <UART_SetConfig+0x2e0>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	0019      	movs	r1, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a9d      	ldr	r2, [pc, #628]	@ (8006004 <UART_SetConfig+0x2e4>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	0019      	movs	r1, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	220f      	movs	r2, #15
 8005da4:	4393      	bics	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a93      	ldr	r2, [pc, #588]	@ (8006008 <UART_SetConfig+0x2e8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d127      	bne.n	8005e0e <UART_SetConfig+0xee>
 8005dbe:	4b93      	ldr	r3, [pc, #588]	@ (800600c <UART_SetConfig+0x2ec>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d017      	beq.n	8005dfa <UART_SetConfig+0xda>
 8005dca:	d81b      	bhi.n	8005e04 <UART_SetConfig+0xe4>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d00a      	beq.n	8005de6 <UART_SetConfig+0xc6>
 8005dd0:	d818      	bhi.n	8005e04 <UART_SetConfig+0xe4>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <UART_SetConfig+0xbc>
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00a      	beq.n	8005df0 <UART_SetConfig+0xd0>
 8005dda:	e013      	b.n	8005e04 <UART_SetConfig+0xe4>
 8005ddc:	231f      	movs	r3, #31
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e021      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005de6:	231f      	movs	r3, #31
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	2202      	movs	r2, #2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	e01c      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005df0:	231f      	movs	r3, #31
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	2204      	movs	r2, #4
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e017      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005dfa:	231f      	movs	r3, #31
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	2208      	movs	r2, #8
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e012      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005e04:	231f      	movs	r3, #31
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	2210      	movs	r2, #16
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7f      	ldr	r2, [pc, #508]	@ (8006010 <UART_SetConfig+0x2f0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d104      	bne.n	8005e22 <UART_SetConfig+0x102>
 8005e18:	231f      	movs	r3, #31
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e003      	b.n	8005e2a <UART_SetConfig+0x10a>
 8005e22:	231f      	movs	r3, #31
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	2210      	movs	r2, #16
 8005e28:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	2380      	movs	r3, #128	@ 0x80
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d000      	beq.n	8005e38 <UART_SetConfig+0x118>
 8005e36:	e06f      	b.n	8005f18 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005e38:	231f      	movs	r3, #31
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d01f      	beq.n	8005e82 <UART_SetConfig+0x162>
 8005e42:	dc22      	bgt.n	8005e8a <UART_SetConfig+0x16a>
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d017      	beq.n	8005e78 <UART_SetConfig+0x158>
 8005e48:	dc1f      	bgt.n	8005e8a <UART_SetConfig+0x16a>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <UART_SetConfig+0x134>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d005      	beq.n	8005e5e <UART_SetConfig+0x13e>
 8005e52:	e01a      	b.n	8005e8a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e54:	f7fd ff90 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	61bb      	str	r3, [r7, #24]
        break;
 8005e5c:	e01c      	b.n	8005e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005e5e:	4b6b      	ldr	r3, [pc, #428]	@ (800600c <UART_SetConfig+0x2ec>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2207      	movs	r2, #7
 8005e66:	4013      	ands	r3, r2
 8005e68:	3301      	adds	r3, #1
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	4869      	ldr	r0, [pc, #420]	@ (8006014 <UART_SetConfig+0x2f4>)
 8005e6e:	f7fa f94b 	bl	8000108 <__udivsi3>
 8005e72:	0003      	movs	r3, r0
 8005e74:	61bb      	str	r3, [r7, #24]
        break;
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e78:	f7fd ff20 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	61bb      	str	r3, [r7, #24]
        break;
 8005e80:	e00a      	b.n	8005e98 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	2380      	movs	r3, #128	@ 0x80
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e006      	b.n	8005e98 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e8e:	231e      	movs	r3, #30
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
        break;
 8005e96:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d100      	bne.n	8005ea0 <UART_SetConfig+0x180>
 8005e9e:	e097      	b.n	8005fd0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8006018 <UART_SetConfig+0x2f8>)
 8005ea6:	0052      	lsls	r2, r2, #1
 8005ea8:	5ad3      	ldrh	r3, [r2, r3]
 8005eaa:	0019      	movs	r1, r3
 8005eac:	69b8      	ldr	r0, [r7, #24]
 8005eae:	f7fa f92b 	bl	8000108 <__udivsi3>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	005a      	lsls	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	18d2      	adds	r2, r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	0010      	movs	r0, r2
 8005ec6:	f7fa f91f 	bl	8000108 <__udivsi3>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d91c      	bls.n	8005f0e <UART_SetConfig+0x1ee>
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	025b      	lsls	r3, r3, #9
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d217      	bcs.n	8005f0e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	200e      	movs	r0, #14
 8005ee4:	183b      	adds	r3, r7, r0
 8005ee6:	210f      	movs	r1, #15
 8005ee8:	438a      	bics	r2, r1
 8005eea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2207      	movs	r2, #7
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	183b      	adds	r3, r7, r0
 8005efa:	183a      	adds	r2, r7, r0
 8005efc:	8812      	ldrh	r2, [r2, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	183a      	adds	r2, r7, r0
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	e060      	b.n	8005fd0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0e:	231e      	movs	r3, #30
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e05b      	b.n	8005fd0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f18:	231f      	movs	r3, #31
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d01f      	beq.n	8005f62 <UART_SetConfig+0x242>
 8005f22:	dc22      	bgt.n	8005f6a <UART_SetConfig+0x24a>
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d017      	beq.n	8005f58 <UART_SetConfig+0x238>
 8005f28:	dc1f      	bgt.n	8005f6a <UART_SetConfig+0x24a>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <UART_SetConfig+0x214>
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d005      	beq.n	8005f3e <UART_SetConfig+0x21e>
 8005f32:	e01a      	b.n	8005f6a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f34:	f7fd ff20 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	61bb      	str	r3, [r7, #24]
        break;
 8005f3c:	e01c      	b.n	8005f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005f3e:	4b33      	ldr	r3, [pc, #204]	@ (800600c <UART_SetConfig+0x2ec>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2207      	movs	r2, #7
 8005f46:	4013      	ands	r3, r2
 8005f48:	3301      	adds	r3, #1
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	4831      	ldr	r0, [pc, #196]	@ (8006014 <UART_SetConfig+0x2f4>)
 8005f4e:	f7fa f8db 	bl	8000108 <__udivsi3>
 8005f52:	0003      	movs	r3, r0
 8005f54:	61bb      	str	r3, [r7, #24]
        break;
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f58:	f7fd feb0 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	61bb      	str	r3, [r7, #24]
        break;
 8005f60:	e00a      	b.n	8005f78 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	2380      	movs	r3, #128	@ 0x80
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e006      	b.n	8005f78 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f6e:	231e      	movs	r3, #30
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	2201      	movs	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
        break;
 8005f76:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d028      	beq.n	8005fd0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f82:	4b25      	ldr	r3, [pc, #148]	@ (8006018 <UART_SetConfig+0x2f8>)
 8005f84:	0052      	lsls	r2, r2, #1
 8005f86:	5ad3      	ldrh	r3, [r2, r3]
 8005f88:	0019      	movs	r1, r3
 8005f8a:	69b8      	ldr	r0, [r7, #24]
 8005f8c:	f7fa f8bc 	bl	8000108 <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	001a      	movs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	18d2      	adds	r2, r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	0010      	movs	r0, r2
 8005fa4:	f7fa f8b0 	bl	8000108 <__udivsi3>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	d90a      	bls.n	8005fc8 <UART_SetConfig+0x2a8>
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	025b      	lsls	r3, r3, #9
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d205      	bcs.n	8005fc8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e003      	b.n	8005fd0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc8:	231e      	movs	r3, #30
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	226a      	movs	r2, #106	@ 0x6a
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2268      	movs	r2, #104	@ 0x68
 8005fdc:	2101      	movs	r1, #1
 8005fde:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fec:	231e      	movs	r3, #30
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	781b      	ldrb	r3, [r3, #0]
}
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b008      	add	sp, #32
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	cfff69f3 	.word	0xcfff69f3
 8006000:	ffffcfff 	.word	0xffffcfff
 8006004:	11fff4ff 	.word	0x11fff4ff
 8006008:	40013800 	.word	0x40013800
 800600c:	40021000 	.word	0x40021000
 8006010:	40004400 	.word	0x40004400
 8006014:	02dc6c00 	.word	0x02dc6c00
 8006018:	08007540 	.word	0x08007540

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	2208      	movs	r2, #8
 800602a:	4013      	ands	r3, r2
 800602c:	d00b      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4a4a      	ldr	r2, [pc, #296]	@ (8006160 <UART_AdvFeatureConfig+0x144>)
 8006036:	4013      	ands	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	2201      	movs	r2, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d00b      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4a43      	ldr	r2, [pc, #268]	@ (8006164 <UART_AdvFeatureConfig+0x148>)
 8006058:	4013      	ands	r3, r2
 800605a:	0019      	movs	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	2202      	movs	r2, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d00b      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a3b      	ldr	r2, [pc, #236]	@ (8006168 <UART_AdvFeatureConfig+0x14c>)
 800607a:	4013      	ands	r3, r2
 800607c:	0019      	movs	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	2204      	movs	r2, #4
 8006090:	4013      	ands	r3, r2
 8006092:	d00b      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4a34      	ldr	r2, [pc, #208]	@ (800616c <UART_AdvFeatureConfig+0x150>)
 800609c:	4013      	ands	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	2210      	movs	r2, #16
 80060b2:	4013      	ands	r3, r2
 80060b4:	d00b      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <UART_AdvFeatureConfig+0x154>)
 80060be:	4013      	ands	r3, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	2220      	movs	r2, #32
 80060d4:	4013      	ands	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a25      	ldr	r2, [pc, #148]	@ (8006174 <UART_AdvFeatureConfig+0x158>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	2240      	movs	r2, #64	@ 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d01d      	beq.n	8006136 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <UART_AdvFeatureConfig+0x15c>)
 8006102:	4013      	ands	r3, r2
 8006104:	0019      	movs	r1, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006116:	2380      	movs	r3, #128	@ 0x80
 8006118:	035b      	lsls	r3, r3, #13
 800611a:	429a      	cmp	r2, r3
 800611c:	d10b      	bne.n	8006136 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	@ (800617c <UART_AdvFeatureConfig+0x160>)
 8006126:	4013      	ands	r3, r2
 8006128:	0019      	movs	r1, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2280      	movs	r2, #128	@ 0x80
 800613c:	4013      	ands	r3, r2
 800613e:	d00b      	beq.n	8006158 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4a0e      	ldr	r2, [pc, #56]	@ (8006180 <UART_AdvFeatureConfig+0x164>)
 8006148:	4013      	ands	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }
}
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b002      	add	sp, #8
 800615e:	bd80      	pop	{r7, pc}
 8006160:	ffff7fff 	.word	0xffff7fff
 8006164:	fffdffff 	.word	0xfffdffff
 8006168:	fffeffff 	.word	0xfffeffff
 800616c:	fffbffff 	.word	0xfffbffff
 8006170:	ffffefff 	.word	0xffffefff
 8006174:	ffffdfff 	.word	0xffffdfff
 8006178:	ffefffff 	.word	0xffefffff
 800617c:	ff9fffff 	.word	0xff9fffff
 8006180:	fff7ffff 	.word	0xfff7ffff

08006184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b092      	sub	sp, #72	@ 0x48
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2290      	movs	r2, #144	@ 0x90
 8006190:	2100      	movs	r1, #0
 8006192:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006194:	f7fc fce2 	bl	8002b5c <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2208      	movs	r2, #8
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d12d      	bne.n	8006206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ac:	2280      	movs	r2, #128	@ 0x80
 80061ae:	0391      	lsls	r1, r2, #14
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4a47      	ldr	r2, [pc, #284]	@ (80062d0 <UART_CheckIdleState+0x14c>)
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f000 f88e 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d022      	beq.n	8006206 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ca:	2301      	movs	r3, #1
 80061cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			@ (mov r8, r8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2180      	movs	r1, #128	@ 0x80
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2288      	movs	r2, #136	@ 0x88
 80061f6:	2120      	movs	r1, #32
 80061f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2284      	movs	r2, #132	@ 0x84
 80061fe:	2100      	movs	r1, #0
 8006200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e060      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2204      	movs	r2, #4
 800620e:	4013      	ands	r3, r2
 8006210:	2b04      	cmp	r3, #4
 8006212:	d146      	bne.n	80062a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	2280      	movs	r2, #128	@ 0x80
 8006218:	03d1      	lsls	r1, r2, #15
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <UART_CheckIdleState+0x14c>)
 800621e:	9200      	str	r2, [sp, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	f000 f859 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d03b      	beq.n	80062a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800622a:	f3ef 8310 	mrs	r3, PRIMASK
 800622e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006230:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34
 8006234:	2301      	movs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f383 8810 	msr	PRIMASK, r3
}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4922      	ldr	r1, [pc, #136]	@ (80062d4 <UART_CheckIdleState+0x150>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	61bb      	str	r3, [r7, #24]
  return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	633b      	str	r3, [r7, #48]	@ 0x30
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	228c      	movs	r2, #140	@ 0x8c
 8006292:	2120      	movs	r1, #32
 8006294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2284      	movs	r2, #132	@ 0x84
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2288      	movs	r2, #136	@ 0x88
 80062a6:	2120      	movs	r1, #32
 80062a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	228c      	movs	r2, #140	@ 0x8c
 80062ae:	2120      	movs	r1, #32
 80062b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2284      	movs	r2, #132	@ 0x84
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b010      	add	sp, #64	@ 0x40
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	01ffffff 	.word	0x01ffffff
 80062d4:	fffffedf 	.word	0xfffffedf

080062d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	e051      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3301      	adds	r3, #1
 80062ee:	d04e      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fc fc34 	bl	8002b5c <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e051      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2204      	movs	r2, #4
 8006312:	4013      	ands	r3, r2
 8006314:	d03b      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b80      	cmp	r3, #128	@ 0x80
 800631a:	d038      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b40      	cmp	r3, #64	@ 0x40
 8006320:	d035      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2208      	movs	r2, #8
 800632a:	4013      	ands	r3, r2
 800632c:	2b08      	cmp	r3, #8
 800632e:	d111      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 f960 	bl	8006600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2290      	movs	r2, #144	@ 0x90
 8006344:	2108      	movs	r1, #8
 8006346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2284      	movs	r2, #132	@ 0x84
 800634c:	2100      	movs	r1, #0
 800634e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e02c      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	2380      	movs	r3, #128	@ 0x80
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	401a      	ands	r2, r3
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	429a      	cmp	r2, r3
 8006366:	d112      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2280      	movs	r2, #128	@ 0x80
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f000 f943 	bl	8006600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2290      	movs	r2, #144	@ 0x90
 800637e:	2120      	movs	r1, #32
 8006380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2284      	movs	r2, #132	@ 0x84
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	425a      	negs	r2, r3
 800639e:	4153      	adcs	r3, r2
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	001a      	movs	r2, r3
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d09e      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b098      	sub	sp, #96	@ 0x60
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1dba      	adds	r2, r7, #6
 80063d0:	215c      	movs	r1, #92	@ 0x5c
 80063d2:	8812      	ldrh	r2, [r2, #0]
 80063d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1dba      	adds	r2, r7, #6
 80063da:	215e      	movs	r1, #94	@ 0x5e
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	2380      	movs	r3, #128	@ 0x80
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d10d      	bne.n	800640e <UART_Start_Receive_IT+0x56>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <UART_Start_Receive_IT+0x4c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2260      	movs	r2, #96	@ 0x60
 80063fe:	497b      	ldr	r1, [pc, #492]	@ (80065ec <UART_Start_Receive_IT+0x234>)
 8006400:	5299      	strh	r1, [r3, r2]
 8006402:	e02e      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2260      	movs	r2, #96	@ 0x60
 8006408:	21ff      	movs	r1, #255	@ 0xff
 800640a:	5299      	strh	r1, [r3, r2]
 800640c:	e029      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <UART_Start_Receive_IT+0x7a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <UART_Start_Receive_IT+0x70>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2260      	movs	r2, #96	@ 0x60
 8006422:	21ff      	movs	r1, #255	@ 0xff
 8006424:	5299      	strh	r1, [r3, r2]
 8006426:	e01c      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2260      	movs	r2, #96	@ 0x60
 800642c:	217f      	movs	r1, #127	@ 0x7f
 800642e:	5299      	strh	r1, [r3, r2]
 8006430:	e017      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	055b      	lsls	r3, r3, #21
 800643a:	429a      	cmp	r2, r3
 800643c:	d10d      	bne.n	800645a <UART_Start_Receive_IT+0xa2>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <UART_Start_Receive_IT+0x98>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2260      	movs	r2, #96	@ 0x60
 800644a:	217f      	movs	r1, #127	@ 0x7f
 800644c:	5299      	strh	r1, [r3, r2]
 800644e:	e008      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2260      	movs	r2, #96	@ 0x60
 8006454:	213f      	movs	r1, #63	@ 0x3f
 8006456:	5299      	strh	r1, [r3, r2]
 8006458:	e003      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2260      	movs	r2, #96	@ 0x60
 800645e:	2100      	movs	r1, #0
 8006460:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2290      	movs	r2, #144	@ 0x90
 8006466:	2100      	movs	r1, #0
 8006468:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	228c      	movs	r2, #140	@ 0x8c
 800646e:	2122      	movs	r1, #34	@ 0x22
 8006470:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800647c:	2301      	movs	r3, #1
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006482:	f383 8810 	msr	PRIMASK, r3
}
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800649a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	059b      	lsls	r3, r3, #22
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d150      	bne.n	8006552 <UART_Start_Receive_IT+0x19a>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2268      	movs	r2, #104	@ 0x68
 80064b4:	5a9b      	ldrh	r3, [r3, r2]
 80064b6:	1dba      	adds	r2, r7, #6
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d349      	bcc.n	8006552 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	015b      	lsls	r3, r3, #5
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d107      	bne.n	80064da <UART_Start_Receive_IT+0x122>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a46      	ldr	r2, [pc, #280]	@ (80065f0 <UART_Start_Receive_IT+0x238>)
 80064d6:	675a      	str	r2, [r3, #116]	@ 0x74
 80064d8:	e002      	b.n	80064e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a45      	ldr	r2, [pc, #276]	@ (80065f4 <UART_Start_Receive_IT+0x23c>)
 80064de:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d019      	beq.n	800651c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064e8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80064ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064f2:	2301      	movs	r3, #1
 80064f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2180      	movs	r1, #128	@ 0x80
 800650a:	0049      	lsls	r1, r1, #1
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006516:	f383 8810 	msr	PRIMASK, r3
}
 800651a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800651c:	f3ef 8310 	mrs	r3, PRIMASK
 8006520:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006524:	657b      	str	r3, [r7, #84]	@ 0x54
 8006526:	2301      	movs	r3, #1
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2180      	movs	r1, #128	@ 0x80
 800653e:	0549      	lsls	r1, r1, #21
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006546:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	e047      	b.n	80065e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	015b      	lsls	r3, r3, #5
 800655a:	429a      	cmp	r2, r3
 800655c:	d107      	bne.n	800656e <UART_Start_Receive_IT+0x1b6>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a23      	ldr	r2, [pc, #140]	@ (80065f8 <UART_Start_Receive_IT+0x240>)
 800656a:	675a      	str	r2, [r3, #116]	@ 0x74
 800656c:	e002      	b.n	8006574 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a22      	ldr	r2, [pc, #136]	@ (80065fc <UART_Start_Receive_IT+0x244>)
 8006572:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d019      	beq.n	80065b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	61fb      	str	r3, [r7, #28]
  return(result);
 8006582:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006586:	2301      	movs	r3, #1
 8006588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2190      	movs	r1, #144	@ 0x90
 800659e:	0049      	lsls	r1, r1, #1
 80065a0:	430a      	orrs	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	f383 8810 	msr	PRIMASK, r3
}
 80065ae:	e018      	b.n	80065e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80065b0:	f3ef 8310 	mrs	r3, PRIMASK
 80065b4:	613b      	str	r3, [r7, #16]
  return(result);
 80065b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80065ba:	2301      	movs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f383 8810 	msr	PRIMASK, r3
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2120      	movs	r1, #32
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f383 8810 	msr	PRIMASK, r3
}
 80065e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b018      	add	sp, #96	@ 0x60
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	000001ff 	.word	0x000001ff
 80065f0:	08006df1 	.word	0x08006df1
 80065f4:	08006abd 	.word	0x08006abd
 80065f8:	08006905 	.word	0x08006905
 80065fc:	0800674d 	.word	0x0800674d

08006600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	@ 0x38
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	617b      	str	r3, [r7, #20]
  return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	2301      	movs	r3, #1
 8006614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			@ (mov r8, r8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4926      	ldr	r1, [pc, #152]	@ (80066c4 <UART_EndRxTransfer+0xc4>)
 800662a:	400a      	ands	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800663a:	f3ef 8310 	mrs	r3, PRIMASK
 800663e:	623b      	str	r3, [r7, #32]
  return(result);
 8006640:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006642:	633b      	str	r3, [r7, #48]	@ 0x30
 8006644:	2301      	movs	r3, #1
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	491b      	ldr	r1, [pc, #108]	@ (80066c8 <UART_EndRxTransfer+0xc8>)
 800665c:	400a      	ands	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d118      	bne.n	80066a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60bb      	str	r3, [r7, #8]
  return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800667e:	2301      	movs	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f383 8810 	msr	PRIMASK, r3
}
 8006688:	46c0      	nop			@ (mov r8, r8)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2110      	movs	r1, #16
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f383 8810 	msr	PRIMASK, r3
}
 80066a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	228c      	movs	r2, #140	@ 0x8c
 80066aa:	2120      	movs	r1, #32
 80066ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066ba:	46c0      	nop			@ (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b00e      	add	sp, #56	@ 0x38
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	fffffedf 	.word	0xfffffedf
 80066c8:	effffffe 	.word	0xeffffffe

080066cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	225e      	movs	r2, #94	@ 0x5e
 80066de:	2100      	movs	r1, #0
 80066e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7ff fb07 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066fa:	f3ef 8310 	mrs	r3, PRIMASK
 80066fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006700:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	2301      	movs	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f383 8810 	msr	PRIMASK, r3
}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2140      	movs	r1, #64	@ 0x40
 800671c:	438a      	bics	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2288      	movs	r2, #136	@ 0x88
 8006730:	2120      	movs	r1, #32
 8006732:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	0018      	movs	r0, r3
 800673e:	f7ff fad3 	bl	8005ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b006      	add	sp, #24
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b094      	sub	sp, #80	@ 0x50
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006754:	204e      	movs	r0, #78	@ 0x4e
 8006756:	183b      	adds	r3, r7, r0
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	2160      	movs	r1, #96	@ 0x60
 800675c:	5a52      	ldrh	r2, [r2, r1]
 800675e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	228c      	movs	r2, #140	@ 0x8c
 8006764:	589b      	ldr	r3, [r3, r2]
 8006766:	2b22      	cmp	r3, #34	@ 0x22
 8006768:	d000      	beq.n	800676c <UART_RxISR_8BIT+0x20>
 800676a:	e0ba      	b.n	80068e2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006772:	214c      	movs	r1, #76	@ 0x4c
 8006774:	187b      	adds	r3, r7, r1
 8006776:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006778:	187b      	adds	r3, r7, r1
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	183b      	adds	r3, r7, r0
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b2d9      	uxtb	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006788:	400a      	ands	r2, r1
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	225e      	movs	r2, #94	@ 0x5e
 800679c:	5a9b      	ldrh	r3, [r3, r2]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b299      	uxth	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	225e      	movs	r2, #94	@ 0x5e
 80067a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	225e      	movs	r2, #94	@ 0x5e
 80067ae:	5a9b      	ldrh	r3, [r3, r2]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d000      	beq.n	80067b8 <UART_RxISR_8BIT+0x6c>
 80067b6:	e09c      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c2:	2301      	movs	r3, #1
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			@ (mov r8, r8)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4948      	ldr	r1, [pc, #288]	@ (80068fc <UART_RxISR_8BIT+0x1b0>)
 80067da:	400a      	ands	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e4:	f383 8810 	msr	PRIMASK, r3
}
 80067e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f4:	2301      	movs	r3, #1
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	f383 8810 	msr	PRIMASK, r3
}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2101      	movs	r1, #1
 800680c:	438a      	bics	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006812:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	f383 8810 	msr	PRIMASK, r3
}
 800681a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	228c      	movs	r2, #140	@ 0x8c
 8006820:	2120      	movs	r1, #32
 8006822:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	2380      	movs	r3, #128	@ 0x80
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	4013      	ands	r3, r2
 800683c:	d018      	beq.n	8006870 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800683e:	f3ef 8310 	mrs	r3, PRIMASK
 8006842:	61bb      	str	r3, [r7, #24]
  return(result);
 8006844:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006846:	643b      	str	r3, [r7, #64]	@ 0x40
 8006848:	2301      	movs	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f383 8810 	msr	PRIMASK, r3
}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4928      	ldr	r1, [pc, #160]	@ (8006900 <UART_RxISR_8BIT+0x1b4>)
 8006860:	400a      	ands	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006866:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d12f      	bne.n	80068d8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800687e:	f3ef 8310 	mrs	r3, PRIMASK
 8006882:	60fb      	str	r3, [r7, #12]
  return(result);
 8006884:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006888:	2301      	movs	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f383 8810 	msr	PRIMASK, r3
}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2110      	movs	r1, #16
 80068a0:	438a      	bics	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2210      	movs	r2, #16
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d103      	bne.n	80068c6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	225c      	movs	r2, #92	@ 0x5c
 80068ca:	5a9a      	ldrh	r2, [r3, r2]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7ff fa19 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068d6:	e00c      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fb fac2 	bl	8001e64 <HAL_UART_RxCpltCallback>
}
 80068e0:	e007      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2108      	movs	r1, #8
 80068ee:	430a      	orrs	r2, r1
 80068f0:	619a      	str	r2, [r3, #24]
}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b014      	add	sp, #80	@ 0x50
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	fffffedf 	.word	0xfffffedf
 8006900:	fbffffff 	.word	0xfbffffff

08006904 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b094      	sub	sp, #80	@ 0x50
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800690c:	204e      	movs	r0, #78	@ 0x4e
 800690e:	183b      	adds	r3, r7, r0
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	2160      	movs	r1, #96	@ 0x60
 8006914:	5a52      	ldrh	r2, [r2, r1]
 8006916:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	228c      	movs	r2, #140	@ 0x8c
 800691c:	589b      	ldr	r3, [r3, r2]
 800691e:	2b22      	cmp	r3, #34	@ 0x22
 8006920:	d000      	beq.n	8006924 <UART_RxISR_16BIT+0x20>
 8006922:	e0ba      	b.n	8006a9a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692a:	214c      	movs	r1, #76	@ 0x4c
 800692c:	187b      	adds	r3, r7, r1
 800692e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006934:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006936:	187b      	adds	r3, r7, r1
 8006938:	183a      	adds	r2, r7, r0
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006944:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	225e      	movs	r2, #94	@ 0x5e
 8006954:	5a9b      	ldrh	r3, [r3, r2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b299      	uxth	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	225e      	movs	r2, #94	@ 0x5e
 8006960:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	225e      	movs	r2, #94	@ 0x5e
 8006966:	5a9b      	ldrh	r3, [r3, r2]
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d000      	beq.n	8006970 <UART_RxISR_16BIT+0x6c>
 800696e:	e09c      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006970:	f3ef 8310 	mrs	r3, PRIMASK
 8006974:	623b      	str	r3, [r7, #32]
  return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
 800697a:	2301      	movs	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	f383 8810 	msr	PRIMASK, r3
}
 8006984:	46c0      	nop			@ (mov r8, r8)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4948      	ldr	r1, [pc, #288]	@ (8006ab4 <UART_RxISR_16BIT+0x1b0>)
 8006992:	400a      	ands	r2, r1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006998:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	f383 8810 	msr	PRIMASK, r3
}
 80069a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069a2:	f3ef 8310 	mrs	r3, PRIMASK
 80069a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ac:	2301      	movs	r3, #1
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	f383 8810 	msr	PRIMASK, r3
}
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2101      	movs	r1, #1
 80069c4:	438a      	bics	r2, r1
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	f383 8810 	msr	PRIMASK, r3
}
 80069d2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	228c      	movs	r2, #140	@ 0x8c
 80069d8:	2120      	movs	r1, #32
 80069da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	2380      	movs	r3, #128	@ 0x80
 80069f0:	041b      	lsls	r3, r3, #16
 80069f2:	4013      	ands	r3, r2
 80069f4:	d018      	beq.n	8006a28 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069f6:	f3ef 8310 	mrs	r3, PRIMASK
 80069fa:	617b      	str	r3, [r7, #20]
  return(result);
 80069fc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a00:	2301      	movs	r3, #1
 8006a02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f383 8810 	msr	PRIMASK, r3
}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4928      	ldr	r1, [pc, #160]	@ (8006ab8 <UART_RxISR_16BIT+0x1b4>)
 8006a18:	400a      	ands	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f383 8810 	msr	PRIMASK, r3
}
 8006a26:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d12f      	bne.n	8006a90 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a36:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			@ (mov r8, r8)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2110      	movs	r1, #16
 8006a58:	438a      	bics	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f383 8810 	msr	PRIMASK, r3
}
 8006a66:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d103      	bne.n	8006a7e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	225c      	movs	r2, #92	@ 0x5c
 8006a82:	5a9a      	ldrh	r2, [r3, r2]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7ff f93d 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a8e:	e00c      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fb f9e6 	bl	8001e64 <HAL_UART_RxCpltCallback>
}
 8006a98:	e007      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2108      	movs	r1, #8
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	619a      	str	r2, [r3, #24]
}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b014      	add	sp, #80	@ 0x50
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	fffffedf 	.word	0xfffffedf
 8006ab8:	fbffffff 	.word	0xfbffffff

08006abc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b0a0      	sub	sp, #128	@ 0x80
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006ac4:	237a      	movs	r3, #122	@ 0x7a
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	2160      	movs	r1, #96	@ 0x60
 8006acc:	5a52      	ldrh	r2, [r2, r1]
 8006ace:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	228c      	movs	r2, #140	@ 0x8c
 8006aec:	589b      	ldr	r3, [r3, r2]
 8006aee:	2b22      	cmp	r3, #34	@ 0x22
 8006af0:	d000      	beq.n	8006af4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006af2:	e166      	b.n	8006dc2 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006af4:	236e      	movs	r3, #110	@ 0x6e
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	2168      	movs	r1, #104	@ 0x68
 8006afc:	5a52      	ldrh	r2, [r2, r1]
 8006afe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b00:	e10d      	b.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b08:	216c      	movs	r1, #108	@ 0x6c
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	237a      	movs	r3, #122	@ 0x7a
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b2d9      	uxtb	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b20:	400a      	ands	r2, r1
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	225e      	movs	r2, #94	@ 0x5e
 8006b34:	5a9b      	ldrh	r3, [r3, r2]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b299      	uxth	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	225e      	movs	r2, #94	@ 0x5e
 8006b40:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b4c:	2207      	movs	r2, #7
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d049      	beq.n	8006be6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	d010      	beq.n	8006b7c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006b5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006b5c:	2380      	movs	r3, #128	@ 0x80
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	4013      	ands	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2290      	movs	r2, #144	@ 0x90
 8006b70:	589b      	ldr	r3, [r3, r2]
 8006b72:	2201      	movs	r2, #1
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2190      	movs	r1, #144	@ 0x90
 8006b7a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4013      	ands	r3, r2
 8006b82:	d00f      	beq.n	8006ba4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b86:	2201      	movs	r2, #1
 8006b88:	4013      	ands	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2202      	movs	r2, #2
 8006b92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2290      	movs	r2, #144	@ 0x90
 8006b98:	589b      	ldr	r3, [r3, r2]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2190      	movs	r1, #144	@ 0x90
 8006ba2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d00f      	beq.n	8006bcc <UART_RxISR_8BIT_FIFOEN+0x110>
 8006bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2290      	movs	r2, #144	@ 0x90
 8006bc0:	589b      	ldr	r3, [r3, r2]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2190      	movs	r1, #144	@ 0x90
 8006bca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2290      	movs	r2, #144	@ 0x90
 8006bd0:	589b      	ldr	r3, [r3, r2]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7ff f88d 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2290      	movs	r2, #144	@ 0x90
 8006be2:	2100      	movs	r1, #0
 8006be4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	225e      	movs	r2, #94	@ 0x5e
 8006bea:	5a9b      	ldrh	r3, [r3, r2]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d000      	beq.n	8006bf4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006bf2:	e094      	b.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bfe:	2301      	movs	r3, #1
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c04:	f383 8810 	msr	PRIMASK, r3
}
 8006c08:	46c0      	nop			@ (mov r8, r8)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4971      	ldr	r1, [pc, #452]	@ (8006ddc <UART_RxISR_8BIT_FIFOEN+0x320>)
 8006c16:	400a      	ands	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c20:	f383 8810 	msr	PRIMASK, r3
}
 8006c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c26:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c30:	2301      	movs	r3, #1
 8006c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c36:	f383 8810 	msr	PRIMASK, r3
}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4966      	ldr	r1, [pc, #408]	@ (8006de0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8006c48:	400a      	ands	r2, r1
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	228c      	movs	r2, #140	@ 0x8c
 8006c5c:	2120      	movs	r1, #32
 8006c5e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	2380      	movs	r3, #128	@ 0x80
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	4013      	ands	r3, r2
 8006c78:	d018      	beq.n	8006cac <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c82:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c84:	2301      	movs	r3, #1
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	f383 8810 	msr	PRIMASK, r3
}
 8006c8e:	46c0      	nop			@ (mov r8, r8)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4952      	ldr	r1, [pc, #328]	@ (8006de4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d12f      	bne.n	8006d14 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cba:	f3ef 8310 	mrs	r3, PRIMASK
 8006cbe:	623b      	str	r3, [r7, #32]
  return(result);
 8006cc0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	f383 8810 	msr	PRIMASK, r3
}
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2110      	movs	r1, #16
 8006cdc:	438a      	bics	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d103      	bne.n	8006d02 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	225c      	movs	r2, #92	@ 0x5c
 8006d06:	5a9a      	ldrh	r2, [r3, r2]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0011      	movs	r1, r2
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7fe fffb 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006d12:	e00e      	b.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fb f8a4 	bl	8001e64 <HAL_UART_RxCpltCallback>
        break;
 8006d1c:	e009      	b.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d1e:	236e      	movs	r3, #110	@ 0x6e
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d000      	beq.n	8006d32 <UART_RxISR_8BIT_FIFOEN+0x276>
 8006d30:	e6e7      	b.n	8006b02 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d32:	205a      	movs	r0, #90	@ 0x5a
 8006d34:	183b      	adds	r3, r7, r0
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	215e      	movs	r1, #94	@ 0x5e
 8006d3a:	5a52      	ldrh	r2, [r2, r1]
 8006d3c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d3e:	0001      	movs	r1, r0
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d044      	beq.n	8006dd2 <UART_RxISR_8BIT_FIFOEN+0x316>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2268      	movs	r2, #104	@ 0x68
 8006d4c:	5a9b      	ldrh	r3, [r3, r2]
 8006d4e:	187a      	adds	r2, r7, r1
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d23d      	bcs.n	8006dd2 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d56:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d60:	2301      	movs	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f383 8810 	msr	PRIMASK, r3
}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	491c      	ldr	r1, [pc, #112]	@ (8006de8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006d78:	400a      	ands	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f383 8810 	msr	PRIMASK, r3
}
 8006d86:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	@ (8006dec <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006d8c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d92:	617b      	str	r3, [r7, #20]
  return(result);
 8006d94:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2120      	movs	r1, #32
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f383 8810 	msr	PRIMASK, r3
}
 8006dbe:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dc0:	e007      	b.n	8006dd2 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2108      	movs	r1, #8
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	619a      	str	r2, [r3, #24]
}
 8006dd2:	46c0      	nop			@ (mov r8, r8)
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b020      	add	sp, #128	@ 0x80
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	fffffeff 	.word	0xfffffeff
 8006de0:	effffffe 	.word	0xeffffffe
 8006de4:	fbffffff 	.word	0xfbffffff
 8006de8:	efffffff 	.word	0xefffffff
 8006dec:	0800674d 	.word	0x0800674d

08006df0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0a2      	sub	sp, #136	@ 0x88
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006df8:	2382      	movs	r3, #130	@ 0x82
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	2160      	movs	r1, #96	@ 0x60
 8006e00:	5a52      	ldrh	r2, [r2, r1]
 8006e02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	2284      	movs	r2, #132	@ 0x84
 8006e0c:	18ba      	adds	r2, r7, r2
 8006e0e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	228c      	movs	r2, #140	@ 0x8c
 8006e24:	589b      	ldr	r3, [r3, r2]
 8006e26:	2b22      	cmp	r3, #34	@ 0x22
 8006e28:	d000      	beq.n	8006e2c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006e2a:	e170      	b.n	800710e <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e2c:	2376      	movs	r3, #118	@ 0x76
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	2168      	movs	r1, #104	@ 0x68
 8006e34:	5a52      	ldrh	r2, [r2, r1]
 8006e36:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e38:	e115      	b.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e40:	2174      	movs	r1, #116	@ 0x74
 8006e42:	187b      	adds	r3, r7, r1
 8006e44:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e4c:	187b      	adds	r3, r7, r1
 8006e4e:	2282      	movs	r2, #130	@ 0x82
 8006e50:	18ba      	adds	r2, r7, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	8812      	ldrh	r2, [r2, #0]
 8006e56:	4013      	ands	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	225e      	movs	r2, #94	@ 0x5e
 8006e6c:	5a9b      	ldrh	r3, [r3, r2]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b299      	uxth	r1, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	225e      	movs	r2, #94	@ 0x5e
 8006e78:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	2184      	movs	r1, #132	@ 0x84
 8006e82:	187a      	adds	r2, r7, r1
 8006e84:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d04e      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e90:	187b      	adds	r3, r7, r1
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2201      	movs	r2, #1
 8006e96:	4013      	ands	r3, r2
 8006e98:	d010      	beq.n	8006ebc <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006e9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e9c:	2380      	movs	r3, #128	@ 0x80
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d00b      	beq.n	8006ebc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2290      	movs	r2, #144	@ 0x90
 8006eb0:	589b      	ldr	r3, [r3, r2]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2190      	movs	r1, #144	@ 0x90
 8006eba:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ebc:	2384      	movs	r3, #132	@ 0x84
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d00f      	beq.n	8006ee8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d00b      	beq.n	8006ee8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2290      	movs	r2, #144	@ 0x90
 8006edc:	589b      	ldr	r3, [r3, r2]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2190      	movs	r1, #144	@ 0x90
 8006ee6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee8:	2384      	movs	r3, #132	@ 0x84
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d00f      	beq.n	8006f14 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2204      	movs	r2, #4
 8006f02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2290      	movs	r2, #144	@ 0x90
 8006f08:	589b      	ldr	r3, [r3, r2]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2190      	movs	r1, #144	@ 0x90
 8006f12:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2290      	movs	r2, #144	@ 0x90
 8006f18:	589b      	ldr	r3, [r3, r2]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7fe fee9 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2290      	movs	r2, #144	@ 0x90
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	225e      	movs	r2, #94	@ 0x5e
 8006f32:	5a9b      	ldrh	r3, [r3, r2]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d000      	beq.n	8006f3c <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006f3a:	e094      	b.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f46:	2301      	movs	r3, #1
 8006f48:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4c:	f383 8810 	msr	PRIMASK, r3
}
 8006f50:	46c0      	nop			@ (mov r8, r8)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4972      	ldr	r1, [pc, #456]	@ (8007128 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8006f5e:	400a      	ands	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f64:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f68:	f383 8810 	msr	PRIMASK, r3
}
 8006f6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f78:	2301      	movs	r3, #1
 8006f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f7e:	f383 8810 	msr	PRIMASK, r3
}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4967      	ldr	r1, [pc, #412]	@ (800712c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8006f90:	400a      	ands	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f96:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9a:	f383 8810 	msr	PRIMASK, r3
}
 8006f9e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	228c      	movs	r2, #140	@ 0x8c
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	2380      	movs	r3, #128	@ 0x80
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fcc:	2301      	movs	r3, #1
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	f383 8810 	msr	PRIMASK, r3
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4953      	ldr	r1, [pc, #332]	@ (8007130 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	f383 8810 	msr	PRIMASK, r3
}
 8006ff2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d12f      	bne.n	800705c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700a:	663b      	str	r3, [r7, #96]	@ 0x60
 800700c:	2301      	movs	r3, #1
 800700e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2110      	movs	r1, #16
 8007024:	438a      	bics	r2, r1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	2210      	movs	r2, #16
 800703c:	4013      	ands	r3, r2
 800703e:	2b10      	cmp	r3, #16
 8007040:	d103      	bne.n	800704a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2210      	movs	r2, #16
 8007048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	225c      	movs	r2, #92	@ 0x5c
 800704e:	5a9a      	ldrh	r2, [r3, r2]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f7fe fe57 	bl	8005d08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800705a:	e010      	b.n	800707e <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	0018      	movs	r0, r3
 8007060:	f7fa ff00 	bl	8001e64 <HAL_UART_RxCpltCallback>
        break;
 8007064:	e00b      	b.n	800707e <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007066:	2376      	movs	r3, #118	@ 0x76
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8007070:	2384      	movs	r3, #132	@ 0x84
 8007072:	18fb      	adds	r3, r7, r3
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2220      	movs	r2, #32
 8007078:	4013      	ands	r3, r2
 800707a:	d000      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x28e>
 800707c:	e6dd      	b.n	8006e3a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800707e:	205e      	movs	r0, #94	@ 0x5e
 8007080:	183b      	adds	r3, r7, r0
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	215e      	movs	r1, #94	@ 0x5e
 8007086:	5a52      	ldrh	r2, [r2, r1]
 8007088:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800708a:	0001      	movs	r1, r0
 800708c:	187b      	adds	r3, r7, r1
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d044      	beq.n	800711e <UART_RxISR_16BIT_FIFOEN+0x32e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2268      	movs	r2, #104	@ 0x68
 8007098:	5a9b      	ldrh	r3, [r3, r2]
 800709a:	187a      	adds	r2, r7, r1
 800709c:	8812      	ldrh	r2, [r2, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d23d      	bcs.n	800711e <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070a2:	f3ef 8310 	mrs	r3, PRIMASK
 80070a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ac:	2301      	movs	r3, #1
 80070ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	491c      	ldr	r1, [pc, #112]	@ (8007134 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	609a      	str	r2, [r3, #8]
 80070c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f383 8810 	msr	PRIMASK, r3
}
 80070d2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a18      	ldr	r2, [pc, #96]	@ (8007138 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80070d8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	61bb      	str	r3, [r7, #24]
  return(result);
 80070e0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070e4:	2301      	movs	r3, #1
 80070e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2120      	movs	r1, #32
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007102:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800710c:	e007      	b.n	800711e <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2108      	movs	r1, #8
 800711a:	430a      	orrs	r2, r1
 800711c:	619a      	str	r2, [r3, #24]
}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	46bd      	mov	sp, r7
 8007122:	b022      	add	sp, #136	@ 0x88
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	fffffeff 	.word	0xfffffeff
 800712c:	effffffe 	.word	0xeffffffe
 8007130:	fbffffff 	.word	0xfbffffff
 8007134:	efffffff 	.word	0xefffffff
 8007138:	08006905 	.word	0x08006905

0800713c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007144:	46c0      	nop			@ (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007154:	46c0      	nop			@ (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b002      	add	sp, #8
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007164:	46c0      	nop			@ (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b002      	add	sp, #8
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2284      	movs	r2, #132	@ 0x84
 8007178:	5c9b      	ldrb	r3, [r3, r2]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_UARTEx_DisableFifoMode+0x16>
 800717e:	2302      	movs	r3, #2
 8007180:	e027      	b.n	80071d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2284      	movs	r2, #132	@ 0x84
 8007186:	2101      	movs	r1, #1
 8007188:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2288      	movs	r2, #136	@ 0x88
 800718e:	2124      	movs	r1, #36	@ 0x24
 8007190:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2101      	movs	r1, #1
 80071a6:	438a      	bics	r2, r1
 80071a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a0b      	ldr	r2, [pc, #44]	@ (80071dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2288      	movs	r2, #136	@ 0x88
 80071c4:	2120      	movs	r1, #32
 80071c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2284      	movs	r2, #132	@ 0x84
 80071cc:	2100      	movs	r1, #0
 80071ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b004      	add	sp, #16
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	dfffffff 	.word	0xdfffffff

080071e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2284      	movs	r2, #132	@ 0x84
 80071ee:	5c9b      	ldrb	r3, [r3, r2]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e02e      	b.n	8007256 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2284      	movs	r2, #132	@ 0x84
 80071fc:	2101      	movs	r1, #1
 80071fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2288      	movs	r2, #136	@ 0x88
 8007204:	2124      	movs	r1, #36	@ 0x24
 8007206:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2101      	movs	r1, #1
 800721c:	438a      	bics	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	08d9      	lsrs	r1, r3, #3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	0018      	movs	r0, r3
 8007238:	f000 f854 	bl	80072e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2288      	movs	r2, #136	@ 0x88
 8007248:	2120      	movs	r1, #32
 800724a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2284      	movs	r2, #132	@ 0x84
 8007250:	2100      	movs	r1, #0
 8007252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	0018      	movs	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	b004      	add	sp, #16
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2284      	movs	r2, #132	@ 0x84
 800726e:	5c9b      	ldrb	r3, [r3, r2]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e02f      	b.n	80072d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2284      	movs	r2, #132	@ 0x84
 800727c:	2101      	movs	r1, #1
 800727e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2288      	movs	r2, #136	@ 0x88
 8007284:	2124      	movs	r1, #36	@ 0x24
 8007286:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2101      	movs	r1, #1
 800729c:	438a      	bics	r2, r1
 800729e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	4a0e      	ldr	r2, [pc, #56]	@ (80072e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	0019      	movs	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 f813 	bl	80072e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2288      	movs	r2, #136	@ 0x88
 80072ca:	2120      	movs	r1, #32
 80072cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2284      	movs	r2, #132	@ 0x84
 80072d2:	2100      	movs	r1, #0
 80072d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b004      	add	sp, #16
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	f1ffffff 	.word	0xf1ffffff

080072e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d108      	bne.n	8007306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	226a      	movs	r2, #106	@ 0x6a
 80072f8:	2101      	movs	r1, #1
 80072fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2268      	movs	r2, #104	@ 0x68
 8007300:	2101      	movs	r1, #1
 8007302:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007304:	e043      	b.n	800738e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007306:	260f      	movs	r6, #15
 8007308:	19bb      	adds	r3, r7, r6
 800730a:	2208      	movs	r2, #8
 800730c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800730e:	200e      	movs	r0, #14
 8007310:	183b      	adds	r3, r7, r0
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	0e5b      	lsrs	r3, r3, #25
 800731e:	b2da      	uxtb	r2, r3
 8007320:	240d      	movs	r4, #13
 8007322:	193b      	adds	r3, r7, r4
 8007324:	2107      	movs	r1, #7
 8007326:	400a      	ands	r2, r1
 8007328:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	0f5b      	lsrs	r3, r3, #29
 8007332:	b2da      	uxtb	r2, r3
 8007334:	250c      	movs	r5, #12
 8007336:	197b      	adds	r3, r7, r5
 8007338:	2107      	movs	r1, #7
 800733a:	400a      	ands	r2, r1
 800733c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800733e:	183b      	adds	r3, r7, r0
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	197a      	adds	r2, r7, r5
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	4914      	ldr	r1, [pc, #80]	@ (8007398 <UARTEx_SetNbDataToProcess+0xb4>)
 8007348:	5c8a      	ldrb	r2, [r1, r2]
 800734a:	435a      	muls	r2, r3
 800734c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800734e:	197b      	adds	r3, r7, r5
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	4a12      	ldr	r2, [pc, #72]	@ (800739c <UARTEx_SetNbDataToProcess+0xb8>)
 8007354:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007356:	0019      	movs	r1, r3
 8007358:	f7f8 ff60 	bl	800021c <__divsi3>
 800735c:	0003      	movs	r3, r0
 800735e:	b299      	uxth	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	226a      	movs	r2, #106	@ 0x6a
 8007364:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007366:	19bb      	adds	r3, r7, r6
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	193a      	adds	r2, r7, r4
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	490a      	ldr	r1, [pc, #40]	@ (8007398 <UARTEx_SetNbDataToProcess+0xb4>)
 8007370:	5c8a      	ldrb	r2, [r1, r2]
 8007372:	435a      	muls	r2, r3
 8007374:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007376:	193b      	adds	r3, r7, r4
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4a08      	ldr	r2, [pc, #32]	@ (800739c <UARTEx_SetNbDataToProcess+0xb8>)
 800737c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800737e:	0019      	movs	r1, r3
 8007380:	f7f8 ff4c 	bl	800021c <__divsi3>
 8007384:	0003      	movs	r3, r0
 8007386:	b299      	uxth	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2268      	movs	r2, #104	@ 0x68
 800738c:	5299      	strh	r1, [r3, r2]
}
 800738e:	46c0      	nop			@ (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b005      	add	sp, #20
 8007394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	08007558 	.word	0x08007558
 800739c:	08007560 	.word	0x08007560

080073a0 <memset>:
 80073a0:	0003      	movs	r3, r0
 80073a2:	1882      	adds	r2, r0, r2
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d100      	bne.n	80073aa <memset+0xa>
 80073a8:	4770      	bx	lr
 80073aa:	7019      	strb	r1, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	e7f9      	b.n	80073a4 <memset+0x4>

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	2600      	movs	r6, #0
 80073b4:	4c0c      	ldr	r4, [pc, #48]	@ (80073e8 <__libc_init_array+0x38>)
 80073b6:	4d0d      	ldr	r5, [pc, #52]	@ (80073ec <__libc_init_array+0x3c>)
 80073b8:	1b64      	subs	r4, r4, r5
 80073ba:	10a4      	asrs	r4, r4, #2
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	2600      	movs	r6, #0
 80073c2:	f000 f819 	bl	80073f8 <_init>
 80073c6:	4c0a      	ldr	r4, [pc, #40]	@ (80073f0 <__libc_init_array+0x40>)
 80073c8:	4d0a      	ldr	r5, [pc, #40]	@ (80073f4 <__libc_init_array+0x44>)
 80073ca:	1b64      	subs	r4, r4, r5
 80073cc:	10a4      	asrs	r4, r4, #2
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	00b3      	lsls	r3, r6, #2
 80073d6:	58eb      	ldr	r3, [r5, r3]
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	00b3      	lsls	r3, r6, #2
 80073e0:	58eb      	ldr	r3, [r5, r3]
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	08007568 	.word	0x08007568
 80073ec:	08007568 	.word	0x08007568
 80073f0:	0800756c 	.word	0x0800756c
 80073f4:	08007568 	.word	0x08007568

080073f8 <_init>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr

08007404 <_fini>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr
